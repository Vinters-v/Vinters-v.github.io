<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>知识补充</title>
    <link href="/2025/09/21/%E6%95%B0%E5%AD%97IC_PPA%E4%BC%98%E5%8C%96/"/>
    <url>/2025/09/21/%E6%95%B0%E5%AD%97IC_PPA%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>电路知识补充</p><span id="more"></span><h1 id="AXI4协议"><a href="#AXI4协议" class="headerlink" title="AXI4协议"></a>AXI4协议</h1><p>AXI总线作为一种总线，可以挂载若干个主设备（master）和从设备（slave），AXI总线协议定义了主设备和从设备之间如何进行通信。</p><p>主设备可以向从设备发起读事务（Read Transaction）和写事务（Write Transaction），从设备只能被动接受主设备发起的请求并作出响应。</p><p>AXI4总线协议支持以下三种类型的<strong>接口</strong>（Interface）：</p><ol><li>AXI4（有时候也叫AXI4-full）：高性能存储映射接口，数据位宽可以是 32,64,128,256,512,1024bits，最大256突发传输，地址位宽可以是64bits &#x2F; 32bits</li><li>AXI4-Lite：简化版的AXI4接口，用于较少数据量的存储映射通信，数据位宽32bits，地址位宽时32bits</li><li>AXI4-Steam：用于高速数据流传输，非存储映射接口</li></ol><p>（所谓存储映射，就是主设备访问从设备时需要给出访问的地址，即从设备是对应一段内存空间地址的，和IO统一编址类似）</p><p>AXI4-full接口支持突发传输，主要用于处理器访问存储器等需要指定地址的高速数据传输场景。AXI4-Lite接口为外设提供单个数据传输，主要用于访问一些低速外设中的寄存器。而AXI-Steam接口则向FIFO一样，数据传输时不需要地址，在主从设备之间直接连续读写数据，主要用于如视频、高速AD、PCIe、DMA接口等需要高速数据传输的场合。</p><p>AXI4-Full 接口和 Lite 接口的一个不同点在于，前者支持 Transaction Identififiers，也就是给每个读&#x2F;写事务赋予一个 ID，具有相同 ID 的事务的顺序不能打乱，不同 ID 的事务的顺序可以打乱（即重排序），这个东西的作用是即使当前还有事务没有完成，Master 可以发出新事务（新事物的ID和未完成事务的ID要不一样），可以提高系统性能。</p><h2 id="AXI4-full"><a href="#AXI4-full" class="headerlink" title="AXI4-full"></a>AXI4-full</h2><p>详细接口设计见设计文档。</p><p>AXI4接口由五个独立的通道构成：</p><ol><li>读地址</li><li>读数据</li><li>写地址</li><li>写数据</li><li>写响应</li></ol><h2 id="AXI的握手机制"><a href="#AXI的握手机制" class="headerlink" title="AXI的握手机制"></a>AXI的握手机制</h2><p>在AXI协议中，请求的发起方是Master，接受方是Slave。</p><p>在每个通道的数据传输控制都是通过主从间的握手机制实现的，具体由两个关键信号完成。</p><ul><li><p>VALID：由发送方驱动，表示数据、地址或者控制信息已经准备就绪，并且相关信号已经稳定。<strong>VALID信号必须保持高电平，直到数据传输完成</strong>。</p></li><li><p>READY：由接收方驱动，表示接收方可以接收数据。READY信号可以在VALID之前或之后拉高。</p></li></ul><p>当VALID和READY同时为高时，握手成功，数据在这一拍完成传输。</p><p>握手机制有效解决了发送方和接收方速率不一致的问题，确保了数据传输的可靠性。</p><h2 id="突发传输"><a href="#突发传输" class="headerlink" title="突发传输"></a>突发传输</h2><p>对于AXI4-Full接口，一次写事务中，Master发出一个地址后，可以连续发出多个数据，Slave可以从该地址开始连续写多个地址处的数据，这便是所谓的突发传输。读事务同理。</p><p>三种突发类型：</p><ul><li><strong>FIXED（0b00）</strong><br>每次传输的地址保持不变，适用于重复访问同一位置（如写入FIFO）。</li><li><strong>INCR（0b01）</strong> (incrementing)<br>地址线性递增，每次增加值为 <strong>AxSIZE</strong> 定义的字节数（如AxSIZE&#x3D;4字节，地址+4）。此时，给出的地址必须是对齐的。<br>适用于顺序访问数据块（如内存读写）。</li><li><strong>WRAP（0b10）</strong>(wrapping)<br>地址递增，但达到特定边界时回绕到起始地址。<br>常用于缓存行填充（Cache Line Fill），需满足：边界地址 &#x3D; 起始地址 + (传输次数 × 字节数)；传输次数必须是2的幂（如4、8次）。根据起始地址和传输大小，可以计算出一个 lower address 和 upper address，Wrapping Burst 下每次传输地址的计算和 Incrementing Burst 是相似的，除了当地址增加到 upper address 时，下次传输的地址需要回落到 lower address 。</li></ul><p>在AXI4协议中，一个突发传输（burst transfer）不能跨越这个4KB的边界，这是为了避免一个突发事务访问两个不同的slave设备，因为每个slave设备通常是4KB对齐的。如果一个突发传输跨越了4KB边界，可能会导致数据被错误地写入到另一个slave设备，从而引发传输错误。1K为2的10次方</p><h2 id="交易标识符-ID"><a href="#交易标识符-ID" class="headerlink" title="交易标识符 ID"></a>交易标识符 ID</h2><p>AXI交易标识符ID，主机用这些ID来判别必须按顺序返回的交易。</p><p>同一ID的交易必须按顺序返回，不同ID的交易可以乱序 。</p><p>AXI通过使用ID，主机可以不等待一笔交易完成就发起多笔交易。起到提升系统性能的作用，实现多笔交易的并行处理。</p><p>从机需要返回合适的BID或者RID来响应主机的ID。</p><p>有以下几个ID信号：写地址ID，写数据ID（只有AXI3，AXI4删除），写响应ID，读地址ID，读响应ID</p><p><strong>乱序 out of order传输</strong></p><p>乱序传输：表示当有多个事务在传输时，有的事务可能先准备好，因此可以先发送在总线上，通过ID号来区分数据和响应来自哪一个事务，乱序指得是事务乱序，而不是说的master，即多个不同master可以发起多个不同的事务，单个master也可以发起多个不同的事务</p><p>说明：</p><p>不同事务的AxID如果一致，那么这些事务就不能实现out of order，只能进行顺序完成。</p><p>如果不同事务AxID不同，那么这些事务之间可以乱序。那么不同AxID事务的数据，对于AXI读来说，如何判断返回的数据属于哪个事务呢，是通过RID来进行匹配的，也就是说，在完成乱序传输的时候，需要RID和ARID保持一致，以标识不同事务的数据</p><p>那么对于实际情况来说，在实际传输中，可能有的事务AxID是不同的，有的是相同的，这是如何解决的？答：对于ID相同的就顺序完成，对于ID不同的可以乱序。</p><p>特殊的写乱序：在AXI4中取消了WID，所以写地址和写数据的顺序必须一致</p><h2 id="OutStanding"><a href="#OutStanding" class="headerlink" title="OutStanding"></a>OutStanding</h2><p><strong>不需要等待前一笔传输完成就可以发送下一笔操作</strong>。AXI因为是通道分离的所以master不需要等待前一笔操作A响应完成就可以发送下一笔操作请求B，这样可以有效提升通路利用率，提升系统性能</p><p>outstanding 就是发出去的地址数量，未处理的地址可以先存放在AXI总线的缓存中，等完成一次传输事务之后，无需再握手传输地址，即可进行下一次的数据传输。所以 outstanding 的本质是为了实现数据传输的pipeline，outstanding 能力即AXI4 Master 不需要等到response 就可以持续发写命令的个数。</p><h2 id="交织interleaving-传输"><a href="#交织interleaving-传输" class="headerlink" title="交织interleaving 传输"></a>交织interleaving 传输</h2><p>交织传输：表示实现不同transaction中的beat的交替传输，但同一transaction的beat是需要按照顺序进行传输的， AXI4不再支持写交织。(依然需要根据ID号来判断数据属于哪个事务)</p><p>例如事务A指令为A，数据是a0，a1，a2,事务B指令是B，数据是b0，b1，b2,</p><p>支持交织数据总线数据顺序就可以是a0，b0，a1，b1，a2，b2(或者其他顺序)</p><p>不支持交织数据总线数据顺序就只能是a0，a1，a2，b0，b1，b2或者b0，b1，b2，a0，a1，a2</p><h2 id="总线带宽的计算"><a href="#总线带宽的计算" class="headerlink" title="总线带宽的计算"></a>总线带宽的计算</h2><p>不考虑缓存大小的前提下，最佳outstanding能力 &#x3D; latency_cycle &#x2F; burst_length</p><p>不考虑访问延迟和outstanding的情况下，</p><p>一次突发传输，传输的数据量为：总线位宽 × 突发传输个数</p><p>一次突发传输，消耗的时间为：突发传输个数 &#x2F; 时钟频率</p><p>因此带宽为，数据量 &#x2F; 时间 &#x3D; 总线位宽 × 时钟频率</p><p>考虑访问延迟和outstanding</p><p>传输的数据量为：总线位宽 × 突发传输个数 × outstandings</p><p>消耗的时间为：突发传输个数 &#x2F; 时钟频率 × outstandings + 访问延迟</p><p>因此带宽为，数据量 &#x2F; 时间 &#x3D; 总线位宽 × 时钟频率</p><p>例：在一个AXI总线系统中，总线位宽为128bit,频率为500MHz，允许的最大Outstanding为8、最大Burst为16,Slave的访问至时为200ns。 那么该AXI总线最大传输带宽是多少？请给出推理过程，并计算最终结果。</p><p><a href="https://zhuanlan.zhihu.com/p/554026947">AXI outstanding传输带宽计算 - 知乎</a></p><h1 id="FIFO深度计算"><a href="#FIFO深度计算" class="headerlink" title="FIFO深度计算"></a>FIFO深度计算</h1><p><a href="https://blog.csdn.net/qq_40483920/article/details/108233399">FPGA&#x2F;IC笔试面试（一）：异步FIFO最小深度计算-CSDN博客</a></p><h1 id="PPA"><a href="#PPA" class="headerlink" title="PPA"></a>PPA</h1><h2 id="一、面向性能的设计方法"><a href="#一、面向性能的设计方法" class="headerlink" title="一、面向性能的设计方法"></a>一、面向性能的设计方法</h2><p>决定性能的因素有很多，比如算法策略，操作数预处理，批量处理，并行处理，输入延迟等等。</p><p>本文主要想讲的是 HDL 层面，所以举如下例子：</p><h3 id="1-信号延迟"><a href="#1-信号延迟" class="headerlink" title="1.信号延迟"></a>1.信号延迟</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog">   <span class="hljs-keyword">module</span> addr_comp(<br>    <span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]A_addr,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]B_addr,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]ptr_in,<br><span class="hljs-keyword">input</span> control,<br><span class="hljs-keyword">output</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]addr_cout<br>);<br><span class="hljs-keyword">parameter</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] addr_base = <span class="hljs-number">8&#x27;b10000000</span>;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] ptr_temp;<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] addr_reg;<br><br><span class="hljs-keyword">assign</span> prt = control? ptr_in:<span class="hljs-number">8&#x27;h0</span>;<br><span class="hljs-keyword">assign</span> ptr_temp = addr_base - prt;<br><span class="hljs-keyword">assign</span> addr_reg = A_addr-ptr_temp;<br><span class="hljs-keyword">assign</span> addr_cout = addr_reg + B_addr;<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>在本例中，心中的电路一定是：一个control控制的2选1 MUX，MUX 输出后面接着几级加法器。</p><p>那么这里问题就来了，加入control信号因为路径太长，或者经历的组合逻辑太多导致延迟到来，那会发生什么？</p><p>很明显，会导致其他输入信号只能等你control信号过来了再依次进行运算，这就降低了整个电路的性能。</p><p>即假设ptr_in和其他相关的输入先到了，control最慢到来，那这个电路要怎么设计？（这里就体现了虽然RTL写的代码思想上是并行的，但实际电路中是带有各种延迟）</p><p>这是我按照上述信号到来顺序设计的代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> addr_comp(<br>    <span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]A_addr,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]B_addr,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]ptr_in,<br><span class="hljs-keyword">input</span> control,<br><span class="hljs-keyword">output</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]addr_cout<br>);<br><span class="hljs-keyword">parameter</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] addr_base = <span class="hljs-number">8&#x27;b10000000</span>;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] ptr_temp;<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] addr_reg1,addr_reg2;<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] count_temp1,count_temp2;<br><br><span class="hljs-keyword">assign</span> ptr_temp = addr_base - prt;<br><span class="hljs-keyword">assign</span> addr_reg1 = A_addr-ptr_temp;<br><span class="hljs-keyword">assign</span> addr_reg2 = A_addr-addr_base;<br><span class="hljs-keyword">assign</span> count_temp1 = addr_reg1 + B_addr;<br><span class="hljs-keyword">assign</span> count_temp2 = addr_reg2 + B_addr;<br><br><span class="hljs-keyword">assign</span> addr_cout = control?addr_reg1:addr_reg1;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>因为知道control最慢来，我就提前将数据计算好，只要control来了马上释放结果，这样就不需要等control来了再进行一系列运算才能输出结果。</p><p>此类体现的思想是：面积换运算速率，关键信号延迟放最靠近输出的一级；</p><p>第二个例子是：</p><h3 id="2-并行处理和流水线"><a href="#2-并行处理和流水线" class="headerlink" title="2.并行处理和流水线"></a>2.并行处理和流水线</h3><p>假设我们要实现a<em>b，a</em>b可以视为temp&#x3D;b[i]?a&lt;&lt;i:0;然后把temp加起来即可。</p><p>所以其RTL为：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog">   <span class="hljs-keyword">module</span> addr_comp(<br>        <span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]  a,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]  b,<br><span class="hljs-keyword">output</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]d<br><br>);<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">91</span>:<span class="hljs-number">0</span>] temp;<br><br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] = b[<span class="hljs-number">0</span>]?a&lt;&lt;<span class="hljs-number">0</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">16</span>:<span class="hljs-number">8</span>] = b[<span class="hljs-number">1</span>]?a&lt;&lt;<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">26</span>:<span class="hljs-number">17</span>] = b[<span class="hljs-number">2</span>]?a&lt;&lt;<span class="hljs-number">2</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">37</span>:<span class="hljs-number">27</span>] = b[<span class="hljs-number">3</span>]?a&lt;&lt;<span class="hljs-number">3</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">49</span>:<span class="hljs-number">38</span>] = b[<span class="hljs-number">4</span>]?a&lt;&lt;<span class="hljs-number">4</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">62</span>:<span class="hljs-number">50</span>] = b[<span class="hljs-number">5</span>]?a&lt;&lt;<span class="hljs-number">5</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">76</span>:<span class="hljs-number">63</span>] = b[<span class="hljs-number">6</span>]?a&lt;&lt;<span class="hljs-number">6</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">91</span>:<span class="hljs-number">77</span>] = b[<span class="hljs-number">7</span>]?a&lt;&lt;<span class="hljs-number">7</span>:<span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">assign</span> d &lt;= temp[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] + temp[<span class="hljs-number">16</span>:<span class="hljs-number">8</span>]+ temp[<span class="hljs-number">26</span>:<span class="hljs-number">17</span>]+ temp[<span class="hljs-number">37</span>:<span class="hljs-number">27</span>]+ temp[<span class="hljs-number">49</span>:<span class="hljs-number">38</span>]+ temp[<span class="hljs-number">62</span>:<span class="hljs-number">50</span>]+ temp[<span class="hljs-number">76</span>:<span class="hljs-number">63</span>]+ temp[<span class="hljs-number">91</span>:<span class="hljs-number">77</span>];<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>这样采用了并行设计的思想，运算速率倒是挺快的，但是这样搞，组合逻辑太多了（主要是在加法那里），频率就会上不去。所以我们需要将其拆开做流水处理。这里心里想出来的电路应该是，8个MUX（输入为做移位的组合逻辑和0）的输出连到8输入加法器身上，当然8输入加法器也是由多级1bit全加器组成，这样延时就会很长了，导致数据到达FF的时间会很慢。</p><p>插入流水线之后的 RTL 代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs verilog">   <span class="hljs-keyword">module</span> addr_comp(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]a,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]  b,<br><span class="hljs-keyword">output</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]d<br><br>);<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">91</span>:<span class="hljs-number">0</span>] temp;<br><br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] = b[<span class="hljs-number">0</span>]?a&lt;&lt;<span class="hljs-number">0</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">16</span>:<span class="hljs-number">8</span>] = b[<span class="hljs-number">1</span>]?a&lt;&lt;<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">26</span>:<span class="hljs-number">17</span>] = b[<span class="hljs-number">2</span>]?a&lt;&lt;<span class="hljs-number">2</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">37</span>:<span class="hljs-number">27</span>] = b[<span class="hljs-number">3</span>]?a&lt;&lt;<span class="hljs-number">3</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">49</span>:<span class="hljs-number">38</span>] = b[<span class="hljs-number">4</span>]?a&lt;&lt;<span class="hljs-number">4</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">62</span>:<span class="hljs-number">50</span>] = b[<span class="hljs-number">5</span>]?a&lt;&lt;<span class="hljs-number">5</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">76</span>:<span class="hljs-number">63</span>] = b[<span class="hljs-number">6</span>]?a&lt;&lt;<span class="hljs-number">6</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">91</span>:<span class="hljs-number">77</span>] = b[<span class="hljs-number">7</span>]?a&lt;&lt;<span class="hljs-number">7</span>:<span class="hljs-number">0</span>;<br><br><br><span class="hljs-comment">//先将数据存放到FF中，此时计算了最低个数据的加法进位，所以此处为第一级流水</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] data_temp0;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">11</span>:<span class="hljs-number">0</span>] data_temp1;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">13</span>:<span class="hljs-number">0</span>] data_temp2;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] data_temp3;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>data_temp0 &lt;= temp[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]   + temp[<span class="hljs-number">16</span>:<span class="hljs-number">8</span>]；<span class="hljs-comment">//8bit+9bit,10bit保留进位</span><br>data_temp1 &lt;= temp[<span class="hljs-number">26</span>:<span class="hljs-number">17</span>] + temp[<span class="hljs-number">37</span>:<span class="hljs-number">27</span>];<span class="hljs-comment">//10bit +11bit 12bit保留进位</span><br>data_temp2 &lt;= temp[<span class="hljs-number">49</span>:<span class="hljs-number">38</span>] + temp[<span class="hljs-number">62</span>:<span class="hljs-number">50</span>];<span class="hljs-comment">//12bit +13bit 14bit保留进位</span><br>data_temp3 &lt;= temp[<span class="hljs-number">76</span>:<span class="hljs-number">63</span>] + temp[<span class="hljs-number">91</span>:<span class="hljs-number">77</span>];<span class="hljs-comment">//14bit +15bit 16bit保留进位</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//传递进位-第二级流水,将data_temp0的进位传递出去</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">11</span>:<span class="hljs-number">0</span>] pipe_temp1;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">13</span>:<span class="hljs-number">0</span>] data_temp22;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] data_temp23;<br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>data_temp22 &lt;= data_temp2;<br>data_temp23 &lt;= data_temp3;<br>pipe_temp1 &lt;= data_temp1 + data_temp0;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//传递进位-第三级流水</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] data_temp33<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">13</span>:<span class="hljs-number">0</span>] pipe_temp2；<br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>data_temp33 &lt;= data_temp23;<br>pipe_temp2 &lt;= data_temp22 + pipe_temp1;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//传递进位-第四级流水</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] pipe_temp3；<br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>pipe_temp3 &lt;= data_temp33 + pipe_temp2;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">assign</span> d =  pipe_temp3;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>用了4级流水，流水主要是将进位传递，这里再度思考下电路变成什么样了？</p><p>主要是在加法器这里，将前面的8输入加法器转换成了2输入加法器，并且每个加法器的输出将其进位保留在FF中，这样虽然增大了输出延迟，但是保证了数据不会在一条路上耽搁太久就进入了FF，根据setup slack计算公式，缩短了数据路径，从而提升了系统整体的运行频率。</p><p>此类体现的思想是：面积换运行频率；<a href="https://zhida.zhihu.com/search?content_id=199273436&content_type=Article&match_order=1&q=%E6%B5%81%E6%B0%B4%E7%BA%BF%E8%AE%BE%E8%AE%A1&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDQ4NTk2NzcsInEiOiLmtYHmsLTnur_orr7orqEiLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoxOTkyNzM0MzYsImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.DN0u_V-cWdfw5OSO62jvZ8F7o0hcFcVE2Y4B-TU5B4c&zhida_source=entity">流水线设计</a>；并行设计。</p><h2 id="二、面向功耗的设计方法"><a href="#二、面向功耗的设计方法" class="headerlink" title="二、面向功耗的设计方法"></a>二、面向功耗的设计方法</h2><p>本文主要还是针对RTL级的优化，并不针对工艺的功耗优化。RTL级的功耗优化主要针对的是动态功耗，要尽可能减小信号的翻转频率，基于这一点，本文总结一些几点优化方式：</p><h3 id="1-门控时钟"><a href="#1-门控时钟" class="headerlink" title="1.门控时钟"></a>1.<a href="https://zhida.zhihu.com/search?content_id=199273436&content_type=Article&match_order=1&q=%E9%97%A8%E6%8E%A7%E6%97%B6%E9%92%9F&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDQ4NTk2NzcsInEiOiLpl6jmjqfml7bpkp8iLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoxOTkyNzM0MzYsImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.Bh3FV2_d1v16k400pRdz1eZR-8bltWGtiJCSSJxHSNw&zhida_source=entity">门控时钟</a></h3><p>门控时钟就是控制时钟的启停，一旦时钟停止，则该时钟域下的所有操作均保持静止，不再翻转。虽然在综合的时候综合工具会自动帮我们生成门控时钟，但是存在一些情况，综合工具无法生成门控时钟。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span> a;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(valid)<br>      a&lt;= <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">else</span><br>      a&lt;= <span class="hljs-number">0</span>; <br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>上面这种情况就没办法做门控，因为门控时钟的含有是在你这个模块完成了对应的功能之后，将时钟gate住，这样所有值都保持住了。上面这种情况a在valid为0是，还会进行翻转，这样综合工具就认为你这模块还没完成对应功能，所以不会做门控。</p><p>推荐的写法如下</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span> a;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(valid)<br>      a&lt;= <span class="hljs-number">1</span>; <br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="2-操作数隔离"><a href="#2-操作数隔离" class="headerlink" title="2.操作数隔离"></a>2.操作数隔离</h3><p>如果在某一段时间内，数据通路的输出是无用的，则将它的输入置成个固定值，这样，数据通路部分没有翻转，功耗就会降低。会增大面积并且影响DFT。例如下题</p><p><img src="https://pic1.zhimg.com/v2-b03cb07870c5d6f4e0cf9c3111461eea_1440w.jpg" alt="img"></p><p>注意ENABLE的选择器，没选到加法器则加法器那里的功耗就浪费了，因此当EN没选到加法器那块时，需要将输入输出gate住，防止跳变产生功耗。</p><p>题解如下：</p><p><img src="https://pic2.zhimg.com/v2-157bae16578185a2eb10197bd05543b5_1440w.jpg" alt="img"></p><h3 id="3-编码优化"><a href="#3-编码优化" class="headerlink" title="3.编码优化"></a>3.<a href="https://zhida.zhihu.com/search?content_id=199273436&content_type=Article&match_order=1&q=%E7%BC%96%E7%A0%81%E4%BC%98%E5%8C%96&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDQ4NTk2NzcsInEiOiLnvJbnoIHkvJjljJYiLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoxOTkyNzM0MzYsImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.bRbFj49ECF7feRX_aYRfQ2VMwdzjWNqR-5jIjh3OmTw&zhida_source=entity">编码优化</a></h3><p>状态机编码采用格雷码或者独热码，能够减少状态跳转时的信号bit翻转。</p><p>二进制转格雷码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">gray = bin^(bin&gt;&gt;<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>一般用于多路选择器的输入端，防止输入乱跳，比如输入为4’b1111，突然跳变为4’b0000，这直接全部跳变了，功耗拉满，相比较下格雷码为</p><p>（4’b1111）(bin)-&gt; (4’b1000) (gray)</p><p>（4’b0000）(bin)-&gt; (4’b0000) (gray） 只跳变了1bit，功耗就降下来了。</p><h3 id="4-减小毛刺及其传递"><a href="#4-减小毛刺及其传递" class="headerlink" title="4.减小毛刺及其传递"></a>4.减小毛刺及其传递</h3><p>毛刺本身就算一种翻转，因为毛刺也可能使后续模块产生翻转，为了降低毛刺带来的影响，一般将关键信号或者变化较快的信号放在离输出最近的一级电路中，这样能减小毛刺的传递，从而降低功耗。</p><h2 id="三、面向面积的设计方法"><a href="#三、面向面积的设计方法" class="headerlink" title="三、面向面积的设计方法"></a>三、面向面积的设计方法</h2><p>一般地，我们在设计中总会要求以性能优先，然后再尽可能去减小设计面积。减小面积就意味着降低成本和功耗，是IC设计工程师在写RTL时必须注意的点。</p><p>本文主要介绍在RTL代码如何来节约面积，</p><h3 id="1-利用位数做判断。"><a href="#1-利用位数做判断。" class="headerlink" title="1.利用位数做判断。"></a>1.利用位数做判断。</h3><p>做判断时注意需要可以采用取某些bit进行判断。</p><p><img src="https://pica.zhimg.com/v2-6bcd96be19c45ecb0a6a64821cba8db4_1440w.jpg" alt="img"></p><p>这里如果用A&lt;32,那就是A与32做减法了，虽然EDA会做优化，但肯定也没A[5]&#x3D;&#x3D;1’b1的效果好。</p><h3 id="2-尽可能调用成熟的算术IP核"><a href="#2-尽可能调用成熟的算术IP核" class="headerlink" title="2.尽可能调用成熟的算术IP核"></a>2.尽可能调用成熟的算术IP核</h3><p><strong>成熟的IP远比自己写的运算速率和面积都进行了优化，所以对于大bit的操作数建议直接用IP进行运算。</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog">  <span class="hljs-comment">//不调用IP       </span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">255</span>:<span class="hljs-number">0</span>] a,b;<br>      ....<br>      <span class="hljs-keyword">if</span>(a+b &lt;c)<br>       ...<br>      <span class="hljs-keyword">else</span><br>      ...<br><span class="hljs-comment">////////////////////////////////////////////////////</span><br>   <span class="hljs-comment">//调用IP</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">255</span>:<span class="hljs-number">0</span>] a,b;<br>add add_inst(<br><span class="hljs-variable">.a</span>(a),<br><span class="hljs-variable">.b</span>(b),<br><span class="hljs-variable">.s</span>(s)<br>);<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">256</span>:<span class="hljs-number">0</span>]s;<br>      ....<br>      <span class="hljs-keyword">if</span>(s &lt;c)<br>       ...<br>      <span class="hljs-keyword">else</span><br>      ...<br></code></pre></td></tr></table></figure><h3 id="3-资源共享"><a href="#3-资源共享" class="headerlink" title="3.资源共享"></a>3.资源共享</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//假设进行如下运算</span><br><span class="hljs-keyword">assign</span> out1=b+c+d+e+f;<br><br><span class="hljs-keyword">assign</span> out2=a+c+d+e+f;<br><br><span class="hljs-keyword">assign</span> out3=a+b+d+e+f;<br><br><span class="hljs-keyword">assign</span> out4=a+b+c+e+f;<br><br><span class="hljs-keyword">assign</span> out5=a+b+c+d+f;<br><br><span class="hljs-comment">//资源共享后</span><br><span class="hljs-keyword">assign</span> sum=a+b+c+d+e+f;<br><br><span class="hljs-keyword">assign</span> out1=sum-a;<br><br><span class="hljs-keyword">assign</span> out2=sum-b;<br><br><span class="hljs-keyword">assign</span> out3=sum-c;<br><br><span class="hljs-keyword">assign</span> out4=sum-d;<br><br><span class="hljs-keyword">assign</span> out5=sum-e;<br></code></pre></td></tr></table></figure><h3 id="4-缩减操作位宽"><a href="#4-缩减操作位宽" class="headerlink" title="4.缩减操作位宽"></a>4.缩减操作位宽</h3><p>对于精度要求不高的运算时，比如调用了一个FIR Filter，输出为64bit，我们可以取其最高的32bit进行下一步运算。</p><p>又比如byte加法器，一次增加一个byte（8bit），则大部分人可能直接写成</p><p>cnt &lt;&#x3D; cnt +8;</p><p>这里注意我们的cnt低三位并没有使用，所以这里可以这样写：</p><p>cnt[7:3] &lt;&#x3D; cnt[7:3]+1;</p><p>cnt[2:0] &lt;&#x3D; cnt[2:0] +0;</p><h3 id="5-卡诺图"><a href="#5-卡诺图" class="headerlink" title="5.卡诺图"></a>5.卡诺图</h3><p>我们可以通过卡诺图尽可能的化简操作式。</p><p>如nv笔试题：用尽可能少的与非门搭建如下逻辑：O&#x3D;C?A&amp;B:A；</p><p>先画卡诺图</p><p><img src="https://pic4.zhimg.com/v2-263fe9113edbb5bda160175ef2d33ddd_1440w.jpg" alt="img"></p><p>化简后逻辑式为：</p><p><img src="https://pica.zhimg.com/v2-668a0d1bfe907267cc79ce4d3598ce0c_1440w.jpg" alt="img"></p><p>电路图为：</p><p><img src="https://pic4.zhimg.com/v2-f5b5856e0820ac7045c04a397ae4f70d_1440w.jpg" alt="img"></p><h3 id="6-时分复用"><a href="#6-时分复用" class="headerlink" title="6.时分复用"></a>6.时分复用</h3><p>其实与资源共享有些类似，核心在于用过时钟流水形成运算器的复用。</p><p>比如：我们要计算e&#x3D;a+b+c+d;如果不要求1个时钟算完，那我们可以只用1个加法器实现。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//时分复用  伪代码，明白意思就行</span><br><span class="hljs-keyword">input</span> a,b,c,d;<br><span class="hljs-keyword">output</span> e;<br><br><span class="hljs-keyword">assign</span> x = y + x;<br>...<br><span class="hljs-keyword">case</span>(counter)<br><span class="hljs-number">2&#x27;b00</span>:y&lt;=a;z&lt;=b;temp1&lt;=x;<span class="hljs-comment">//第一个时钟先算a+b，并将结果存放到temp1中</span><br><span class="hljs-number">2&#x27;b01</span>:y&lt;=temp1;z&lt;=c;temp2&lt;=x;<span class="hljs-comment">//第二个时钟算temp1+c,并将结果存放到temp2中</span><br><span class="hljs-number">2&#x27;b10</span>:y&lt;=temp2;z&lt;=d;e&lt;=x;<span class="hljs-comment">//第二个时钟算temp2+d,并将结果存放到e中   至此，计算结束</span><br><span class="hljs-keyword">endcase</span><br></code></pre></td></tr></table></figure><h2 id="CT项目中的PPA"><a href="#CT项目中的PPA" class="headerlink" title="CT项目中的PPA"></a>CT项目中的PPA</h2><p>主要是面向面积的优化，</p><p>状态机的判断条件使用位数进行判断</p><p>状态的定义使用独热码，更节省面积</p><p>尽量使用简单的逻辑运算表达式，化简卡诺图的方法</p><p>IP 核的使用</p><p>或者是其他的判断条件，例如计数器等等</p><p>对于算法的设计，并不对所有的3*3像素都配置一个算法计算单元，而是通过时分复用</p><p>数据的缓存策略和流动策略</p><p>所有像素的计数器的不可少的，因此所有的计数都是并行执行的，在计数完进行算法计算的时候，通过移位寄存器将数据流入计算单元中，计算每个3*3像素的修正值，每次都是计算得到一个中心像素的修正值，（这里的修正是一个能量聚集的策略）计算完之后，数据流入双端口SRAM进行缓存，SRAM的缓存使用多块的策略。</p><p>我这里只有一块，但整体可以分块进行，在宽度上进行分块</p><p>功耗</p><p>时钟门控和使能信号</p><p>工艺角的问题</p><table><thead><tr><th align="left">工艺角</th><th align="left">NMOS速度</th><th align="left">PMOS速度</th><th align="left">典型影响</th></tr></thead><tbody><tr><td align="left"><strong>TT</strong></td><td align="left">典型</td><td align="left">典型</td><td align="left">标称性能</td></tr><tr><td align="left"><strong>FF</strong></td><td align="left">最快</td><td align="left">最快</td><td align="left">速度最快，但功耗和漏电可能超标</td></tr><tr><td align="left"><strong>SS</strong></td><td align="left">最慢</td><td align="left">最慢</td><td align="left">速度最慢，时序易违规</td></tr><tr><td align="left"><strong>FS</strong></td><td align="left">最快</td><td align="left">最慢</td><td align="left">不对称性能（如PMOS拖累）</td></tr><tr><td align="left"><strong>SF</strong></td><td align="left">最慢</td><td align="left">最快</td><td align="left">不对称性能（如NMOS拖累）</td></tr></tbody></table><p>SS 指芯片中<strong>NMOS和PMOS晶体管均处于最慢速度</strong>的工作状态（高阈值电压、低迁移率）</p><p>开关速度降低，时序路径延迟增加</p><ul><li><strong>可靠性验证</strong>：确保芯片在<strong>最恶劣工艺偏差</strong>下仍能满足时序要求（如时钟频率）。</li><li><strong>功耗评估</strong>：SS角下漏电流最小，可用于评估最低功耗场景。</li><li><strong>设计余量（Margin）</strong>：防止实际生产中出现“速度过慢”的芯片失效。</li></ul><p>FF 用于评估功耗最大的场景，主要由于晶体管速度最快导致动态功耗激增，同时低阈值电压加剧漏电流。设计时必须通过仿真覆盖FF角条件，避免芯片在实际应用中因功耗超标失效。</p><ul><li><strong>SS + 125℃ + Vdd_min</strong>（最差时序）</li><li><strong>FF + 125℃ + Vdd_max</strong>（最大功耗）</li><li><strong>TT + 25℃ + Vdd_nom</strong>（标称性能）</li></ul><h1 id="公司总结"><a href="#公司总结" class="headerlink" title="公司总结"></a>公司总结</h1><h2 id="APB协议"><a href="#APB协议" class="headerlink" title="APB协议"></a>APB协议</h2><p>PCLK     1      时钟</p><p>PRESET   1      复位</p><p>PWRITE   1      读写控制</p><p>PSEL      1      设备选择</p><p>PENABLE   1      设备使能</p><p>PADDR     32     读写地址</p><p>PWDATA  32     写数据</p><p>PRDATA   32     读数据</p><p>PREADY   1      设备状态反馈</p><p>PSLVERR   1      设备错误反馈</p><p>PSTRB             写选通信号，指示总线上哪些字节数据有效</p><p>非流水线式读写，每次读写分为两拍，前一拍为建立阶段，后一拍为访问阶段。</p><p>PSEL在两拍中都为高，PENABLE只有在访问阶段才为高，其余地址和数据信号在两拍中保持不变</p><p>PREADY信号为0时，起到暂停总线的作用，访问阶段会拖延，期间控制信号不变</p><p>PSLVERR信号为1时，表示设备寄存器发生错误，对于读操作，CPU忽略返回的数据</p><p>主机：</p><p>通过维护一个状态机，来实现读写控制逻辑</p><p>空闲状态，设备建立状态，设备访问状态</p><p>根据不同状态，输出控制信号和读写数据</p><p>从机：</p><p>配置字先是被存储在APB域的寄存器，然后在合适的时机同步到内部寄存器，可以由CPU发送同步信号来同步。Buffer Enable</p><p>状态机：</p><p>二进制编码，格雷码，独热码</p><p>1．二进制编码  </p><p>优点：触发器利用率高，仅用较少的触发器就能表示较多的状态</p><p>缺点：状态之间切换速度慢，译码复杂</p><ol start="2"><li>格雷码</li></ol><p>优点：触发器利用率高，可以避免多bit信号的数据歪斜，状态切换速度较快、</p><p>缺点：译码复杂 </p><ol start="3"><li>独热码</li></ol><p>优点：状态切换速度快，译码简单</p><p>缺点：会使用较多的触发器，触发器利用率不高</p><p><strong>高速系统</strong>下统一采用<strong>独热码</strong></p><p>使用独热码的更加节省组合逻辑，对于译码和状态比较和跳转的逻辑都更加简单</p><p>在卡诺图化简中，不care的编码可以与其余的有效编码合并化简。实际上综合器也会这么做，所以独热码非常容易化简。</p><h2 id="AHB协议"><a href="#AHB协议" class="headerlink" title="AHB协议"></a>AHB协议</h2><p>HCLK            1      时钟</p><p>HRESET          1      复位</p><p>HWRITE          1      读写控制</p><p>HTRANS           2      传输方式（空闲，忙，传一个，传多个）</p><p>HSIZE             3      每次传输多少个字节（最大值由数据位宽决定）</p><p>HPORT            4      数据保护（Cache，Buffer，数据权限，指令&#x2F;数据）</p><p>HBUSRT           3      突发传输个数和地址传输方式</p><p>HADDR           32     读写地址</p><p>HWDATA         32     写数据</p><p>HRDATA         32     读数据</p><p>HREADY          1      总线上所有设备状态反馈</p><p>HREADYOUT      1      设备状态反馈</p><p>HRESP            1      设备错误反馈</p><p>其他控制信号</p><p>HMASTER      </p><p>HMASTLOCK     </p><p>AHB的读写数据，分为两拍进行，地址阶段和数据阶段</p><p>传输方式是流水线方式，即B轮传输的地址和A轮的数据重合</p><p>如果HREADY拉低，总线暂停，B轮的地址和控制信号都会保持</p><h2 id="寄存器类型"><a href="#寄存器类型" class="headerlink" title="寄存器类型"></a>寄存器类型</h2><p>已支持类型</p><p><strong>RW（读写）</strong></p><p>描述：由APB数据接口写入，输出到其他模块，可以使用APB数据接口读出</p><p>写入：APB总线写入新值</p><p>读取：APB总线可以读取</p><p>输出：值可用于控制其他模块</p><p>应用场景：常用于控制寄存器，例如配置工作模式、使能位、阈值设置等。</p><p><strong>R（只读）</strong></p><p>描述：由其他模块输入，直接给到APB数据接口读出，该寄存器值由模块内部逻辑提供，CPU&#x2F;APB只能读取，不能写。</p><p>写入：不允许</p><p>读取：APB总线可读取</p><p>应用场景：用于状态反馈、只读标志位、传感器输出、状态监测等。</p><p><strong>W（只写）</strong></p><p>描述：由APB数据接口写入，输出到其他模块，不会使用APB数据接口读出</p><p>写入：可以</p><p>读取：APB无法读取</p><p>输出：用于产生某些控制信号，如触发、复位等</p><p>应用场景：写入触发类操作，如启动DMA、复位模块、产生脉冲控制信号等。</p><p><strong>RC（读清）</strong></p><p>描述：由APB数据接口写入，输出到其他模块，可以使用APB数据接口读出，但读出之后清0</p><p>写入：可以</p><p>读取：读时清0</p><p>应用场景：状态或事件标志类寄存器，如FIFO满&#x2F;空标志、错误中断标志。读取后清零避免重复响应。</p><p><strong>W1C（写1清）</strong></p><p>描述：由APB数据接口写入1时，该寄存器清0，否则保持不变，脉冲，输出到其他模块，可以使用APB数据接口读出</p><p>写入：可以</p><p>读取：可以</p><p>用途：常用于中断清除，CPU进入ISR后写1清除中断标志位。常常用于对中断寄存器清0，当CPU进入中断服务程序时，就必须发出一个脉冲对中断寄存器清0</p><p>应用场景：中断状态寄存器，异常标志寄存器。</p><p><strong>W0S（写0S）</strong></p><p>描述：写0时该位被置1（Set），写1无效。输出到其他模块，可以使用APB数据接口读出</p><p>写入：可以</p><p>读取：可以读取</p><p>用途：不常见，某些特殊场景下用于位反转或异常启动信号。</p><p>注意：不同设计者可能赋予W0S不同含义，也有设计中写0置0的称法，具体以文档定义为准。</p><p><strong>W1（写一次）</strong></p><p>由APB数据接口写入，输出到其他模块，可以使用APB数据接口读出，只有在复位的时候可以写1次</p><p>描述：该寄存器只能在上电&#x2F;复位后写入一次，之后无法修改。</p><p>写入：只能写一次</p><p>读取：可以读取</p><p>应用场景：一次性配置信息，如芯片配置锁定、安全区域解锁等。</p><p><strong>WRS</strong></p><p>由APB数据接口写入，输出到其他模块，可以使用APB数据接口读出（与RW的区别在哪里？）</p><p>描述：与RW相似，但强调寄存器由写入值驱动行为后，也可读回写入值。</p><p>区别于RW：在某些规范中，WRS更强调“写驱动行为”，RW更强调“长期配置保存”</p><p>应用场景：控制启动后可以确认写入值是否生效，如写入DMA启动地址后可读回确认。</p><p>✅ 总结表：</p><table><thead><tr><th>类型</th><th>是否可写</th><th>是否可读</th><th>特殊行为</th><th>应用场景</th></tr></thead><tbody><tr><td>RW</td><td>✅</td><td>✅</td><td>无</td><td>控制与配置</td></tr><tr><td>R</td><td>❌</td><td>✅</td><td>无</td><td>状态反馈</td></tr><tr><td>W</td><td>✅</td><td>❌</td><td>无</td><td>写触发类控制</td></tr><tr><td>RC</td><td>✅</td><td>✅</td><td><strong>读后清零</strong></td><td>标志位&#x2F;事件记录</td></tr><tr><td>W1C</td><td>✅</td><td>✅</td><td><strong>写1清零</strong></td><td>中断清除&#x2F;错误清除</td></tr><tr><td>W0S</td><td>✅</td><td>✅</td><td><strong>写0置位</strong>（不常见）</td><td>启动信号&#x2F;调试</td></tr><tr><td>W1</td><td>✅</td><td>✅</td><td><strong>只允许写1次</strong></td><td>安全配置&#x2F;锁定值</td></tr><tr><td>WRS</td><td>✅</td><td>✅</td><td>强调写驱动行为</td><td>写后确认写入值（DMA配置等）</td></tr></tbody></table><p>下面是一个代码例子</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">/***************************************************MODULE NAME usart**************************************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--------------------------------------------------usart_sr--------------------------------------------------</span><br><span class="hljs-comment">|BIT NAME                 |BIT POSITION   |REG_ACCESS                    |REG_KEY        |SET       |CLEAR     </span><br><span class="hljs-comment">|-------------------------|---------------|------------------------------|---------------|----------|----------</span><br><span class="hljs-comment">|pe                       |[0:0]          |RW                            |None           |0         |0         </span><br><span class="hljs-comment">|fe                       |[1:1]          |W(WriteOnly)                  |None           |0         |0         </span><br><span class="hljs-comment">|ne                       |[2:2]          |R(ReadOnly)                   |None           |0         |0         </span><br><span class="hljs-comment">|ore                      |[3:3]          |RC(readclear)                 |None           |0         |0         </span><br><span class="hljs-comment">|idle                     |[4:4]          |W1C(Write1/auto-clear 0)      |None           |0         |0         </span><br><span class="hljs-comment">|rxne                     |[5:5]          |W0S(Write0/auto-set1)         |None           |0         |0         </span><br><span class="hljs-comment">|tc                       |[6:6]          |W1(WriteOnce)                 |None           |0         |0         </span><br><span class="hljs-comment">|txe                      |[7:7]          |WRS(WR/hardware update)       |None           |0         |0         </span><br><span class="hljs-comment">|lbd                      |[8:8]          |RW                            |None           |0         |0         </span><br><span class="hljs-comment">|cts                      |[9:9]          |RW                            |None           |0         |0         </span><br><span class="hljs-comment">--------------------------------------------------------------------------------------------------------------</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--------------------------------------------------usart_dr--------------------------------------------------</span><br><span class="hljs-comment">|BIT NAME                 |BIT POSITION   |REG_ACCESS                    |REG_KEY        |SET       |CLEAR     </span><br><span class="hljs-comment">|-------------------------|---------------|------------------------------|---------------|----------|----------</span><br><span class="hljs-comment">|dr                       |[7:0]          |RW                            |None           |0         |0         </span><br><span class="hljs-comment">--------------------------------------------------------------------------------------------------------------</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">**************************************************end usart**************************************************/</span><br><br><br><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> USART_MMR_V</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> USART_MMR_V</span><br><br><span class="hljs-keyword">module</span> usart_mmr<br>    #( <br>    <span class="hljs-keyword">parameter</span> ADDR_WIDTH     =    <span class="hljs-number">32</span>,<br>    <span class="hljs-keyword">parameter</span> DATA_WIDTH     =    <span class="hljs-number">32</span>,<br><span class="hljs-comment">//Reg address parameter define </span><br><span class="hljs-keyword">parameter</span> [ADDR_WIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] addr_usart_sr       =  <span class="hljs-number">&#x27;h0</span>,<br><span class="hljs-keyword">parameter</span> [ADDR_WIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] addr_usart_dr       =  <span class="hljs-number">&#x27;h4</span> ) <br><br>( <br><span class="hljs-keyword">input</span>                              userkey   ,<br><span class="hljs-keyword">input</span>                              lckey     ,<br><span class="hljs-keyword">input</span>                              clk       ,<br><span class="hljs-keyword">input</span>                              rstn      ,<br><span class="hljs-keyword">input</span>          [ADDR_WIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>]  p_addr    ,<br><span class="hljs-keyword">input</span>                              p_sel     ,<br><span class="hljs-keyword">input</span>                              p_enable  ,<br><span class="hljs-keyword">input</span>                              p_write   ,<br><span class="hljs-keyword">input</span>          [DATA_WIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>]  p_wdata   ,<br><span class="hljs-keyword">input</span>          [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]               p_strb    ,<br><span class="hljs-keyword">output</span>                             p_ready   ,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>     [DATA_WIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>]  p_rdata   ,<br><span class="hljs-keyword">output</span>                             p_slaverr ,<br><br><span class="hljs-comment">//The signal define of the USART_SR ,type &quot;RW&quot;</span><br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_pe,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_fe,<br><span class="hljs-keyword">input</span>                              I_usart_sr_ne,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_ore,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_idle,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_rxne,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_tc,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_txe,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_lbd,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_cts,<br><br><span class="hljs-comment">//The signal define of the USART_DR ,type &quot;RW&quot;</span><br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>     [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]               O_usart_dr_dr<br>);<br><br><span class="hljs-comment">//Write and read enable wire define </span><br><span class="hljs-keyword">wire</span>    wr_en; <br><span class="hljs-keyword">wire</span>    rd_en; <br><span class="hljs-keyword">wire</span>    wen_usart_sr; <br><span class="hljs-keyword">wire</span>    wen_usart_dr; <br><br><span class="hljs-comment">//Write enable assign for bus </span><br><span class="hljs-keyword">assign</span>   wr_en                = p_sel &amp; p_enable &amp; p_write; <br><span class="hljs-keyword">assign</span>   rd_en                = p_sel &amp; p_enable &amp; !p_write; <br><span class="hljs-keyword">assign</span>   wen_usart_sr         = wr_en &amp; (p_addr ==  addr_usart_sr); <br><span class="hljs-keyword">assign</span>   wen_usart_dr         = wr_en &amp; (p_addr ==  addr_usart_dr); <br><br><span class="hljs-comment">//define always write for reg usart_sr_pe / type-RW</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_pe &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_pe &lt;= p_wdata[<span class="hljs-number">0</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_fe / type-W(WriteOnly)</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_fe &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_fe &lt;= p_wdata[<span class="hljs-number">1</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_ore / type-RC(readclear)</span><br><span class="hljs-keyword">wire</span>rd_clr_usart_sr_ore;<br><span class="hljs-keyword">assign</span>rd_clr_usart_sr_ore = rd_en &amp; (p_addr == addr_usart_sr);<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_ore &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_ore &lt;= p_wdata[<span class="hljs-number">3</span>]; <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rd_clr_usart_sr_ore) <span class="hljs-keyword">begin</span><br>O_usart_sr_ore &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span> <br><br><span class="hljs-comment">//define always write for reg usart_sr_idle / type-W1C(Write1/auto-clear 0)</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_idle &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_idle &lt;= p_wdata[<span class="hljs-number">4</span>] ? <span class="hljs-number">1&#x27;b0</span> : O_usart_sr_idle;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_rxne / type-W0S(Write0/auto-set1)</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_rxne &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_rxne &lt;= (!p_wdata[<span class="hljs-number">5</span>]) ? <span class="hljs-number">1&#x27;b1</span> : O_usart_sr_rxne; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_tc / type-W1(WriteOnce)</span><br><span class="hljs-keyword">reg</span>    flag_w1_usart_sr_tc;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>flag_w1_usart_sr_tc &lt;= <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span> <br>flag_w1_usart_sr_tc &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span> <br><br><span class="hljs-keyword">wire</span> flag_w1_usart_sr_tc_write;<br><span class="hljs-keyword">assign</span> flag_w1_usart_sr_tc_write = wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>] &amp; flag_w1_usart_sr_tc;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_tc &lt;= <span class="hljs-number">1&#x27;h1</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flag_w1_usart_sr_tc_write) <span class="hljs-keyword">begin</span><br>O_usart_sr_tc &lt;= p_wdata[<span class="hljs-number">6</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_txe / type-WRS(WR/hardware update)</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_txe &lt;= <span class="hljs-number">1&#x27;h1</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_txe &lt;= p_wdata[<span class="hljs-number">7</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_lbd / type-RW</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_lbd &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">1</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_lbd &lt;= p_wdata[<span class="hljs-number">8</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_cts / type-RW</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_cts &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">1</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_cts &lt;= p_wdata[<span class="hljs-number">9</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_dr_dr / type-RW</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_dr_dr[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] &lt;= <span class="hljs-number">8&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_dr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_dr_dr[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] &lt;= p_wdata[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//For the bus read for module USART</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span> <br>p_rdata = <span class="hljs-number">&#x27;b0</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">case</span>(p_addr)<br>addr_usart_sr : <span class="hljs-keyword">begin</span> <br>p_rdata[<span class="hljs-number">0</span>]           = O_usart_sr_pe;<br>p_rdata[<span class="hljs-number">1</span>]           = <span class="hljs-number">1&#x27;h0</span>;<br>p_rdata[<span class="hljs-number">2</span>]           = I_usart_sr_ne;<br>p_rdata[<span class="hljs-number">3</span>]           = O_usart_sr_ore;<br>p_rdata[<span class="hljs-number">4</span>]           = O_usart_sr_idle;<br>p_rdata[<span class="hljs-number">5</span>]           = O_usart_sr_rxne;<br>p_rdata[<span class="hljs-number">6</span>]           = O_usart_sr_tc;<br>p_rdata[<span class="hljs-number">7</span>]           = O_usart_sr_txe;<br>p_rdata[<span class="hljs-number">8</span>]           = O_usart_sr_lbd;<br>p_rdata[<span class="hljs-number">9</span>]           = O_usart_sr_cts;<br><span class="hljs-keyword">end</span> <br>addr_usart_dr : <span class="hljs-keyword">begin</span> <br>p_rdata[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]         = O_usart_dr_dr[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br><span class="hljs-keyword">end</span> <br><span class="hljs-keyword">default</span>: p_rdata = <span class="hljs-number">&#x27;b0</span>;<br><span class="hljs-keyword">endcase</span> <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <br>p_rdata = <span class="hljs-number">&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">wire</span> reg_map;<br><span class="hljs-keyword">assign</span> reg_map = <br>(p_addr ==  addr_usart_sr       ) |<br>(p_addr ==  addr_usart_dr       )  ;<br><br><span class="hljs-keyword">assign</span> p_slaverr = p_sel &amp; p_enable &amp; reg_map;<br><br><span class="hljs-keyword">assign</span> p_ready = p_enable;<br><br><span class="hljs-keyword">endmodule</span> <br><br></code></pre></td></tr></table></figure><p>其他类型</p><p>RS（读置位） </p><p>WC（写清）</p><p>W1T（写1翻转）</p><p>WRC</p><p>WSRC</p><p>WCRS</p><p>W1S</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="AXI4接口定义"><a href="#AXI4接口定义" class="headerlink" title="AXI4接口定义"></a>AXI4接口定义</h2><h3 id="AXI4-SLAVE"><a href="#AXI4-SLAVE" class="headerlink" title="AXI4-SLAVE"></a>AXI4-SLAVE</h3><p><strong>模块参数</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>C_S_AXI_ID_WIDTH</td><td>ID 信号的宽度</td></tr><tr><td>C_S_AXI_DATA_WIDTH</td><td>数据宽度</td></tr><tr><td>C_S_AXI_ADDR_WIDTH</td><td>地址宽度</td></tr></tbody></table><p><strong>通用</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>S_AXI_ACLK</td><td>时钟</td></tr><tr><td>S_AXI_ARESETN</td><td>复位信号，低电平复位</td></tr></tbody></table><p><strong>写地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_AWID</td><td>写地址ID，示例代码的 Slave 不支持重排序</td></tr><tr><td>input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_AWADDR</td><td>写地址</td></tr><tr><td>input wire [7 : 0] S_AXI_AWLEN</td><td>突发长度（Burst length），给出了突发中传输（Transfer）的数量</td></tr><tr><td>input wire [2 : 0] S_AXI_AWSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>input wire [1 : 0] S_AXI_AWBURST</td><td>突发类型，AWBURST 和 AWSIZE 决定了此处突发中每次传输的地址是如何计算的</td></tr><tr><td>input wire S_AXI_AWVALID</td><td>写地址有效</td></tr><tr><td>output wire S_AXI_AWREADY</td><td>写地址准备</td></tr></tbody></table><p>注：</p><p>S_AXI_AWLEN：实际传输次数为 S_AXI_AWLEN+ 1（AXI4支持最多256次传输）。</p><p>S_AXI_AWSIZE：定义单次传输的字节数（如 <code>0b010</code> 表示4字节，即32位）。</p><p>S_AXI_AWBURST：决定地址变化模式（固定地址、递增或回环）。</p><p><strong>写数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_WDATA</td><td>写数据</td></tr><tr><td>input wire [(C_S_AXI_DATA_WIDTH&#x2F;8)-1 : 0] S_AXI_WSTRB</td><td>写数据选通</td></tr><tr><td>input wire S_AXI_WLAST</td><td>写最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>input wire S_AXI_WVALID</td><td>写数据有效</td></tr><tr><td>output wire S_AXI_WREADY</td><td>写数据准备</td></tr></tbody></table><p><strong>写响应通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_BID</td><td>写响应的ID，由于本 Slave 不支持重排序，必须赋值为 S_AXI_AWID</td></tr><tr><td>output wire [1 : 0] S_AXI_BRESP</td><td>写响应，给出写事务的状态，示例代码中该信号恒为 2’b0</td></tr><tr><td>output wire S_AXI_BVALID</td><td>写响应有效</td></tr><tr><td>input wire S_AXI_BREADY</td><td>写响应准备</td></tr></tbody></table><p><strong>读地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_ARID</td><td>读地址ID，示例代码的 Slave 不支持重排序</td></tr><tr><td>input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_ARADDR</td><td>读地址</td></tr><tr><td>input wire [7 : 0] S_AXI_ARLEN</td><td>突发长度，给出了突发中传输的数量</td></tr><tr><td>input wire [2 : 0] S_AXI_ARSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>input wire [1 : 0] S_AXI_ARBURST</td><td>突发类型</td></tr><tr><td>input wire S_AXI_ARVALID</td><td>读地址有效</td></tr><tr><td>output wire S_AXI_ARREADY</td><td>读地址准备</td></tr></tbody></table><p><strong>读数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_RID</td><td>读ID，由于Slave 不支持重排序，必须赋值为 S_AXI_ARID</td></tr><tr><td>output wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_RDATA</td><td>读数据</td></tr><tr><td>output wire [1 : 0] S_AXI_RRESP</td><td>读响应，示例代码中该信号恒为 2’b0</td></tr><tr><td>output wire S_AXI_RLAST</td><td>读最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>output wire S_AXI_RVALID</td><td>读数据有效</td></tr><tr><td>input wire S_AXI_RREADY</td><td>读数据准备</td></tr></tbody></table><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>在代码设计中，需要修改，存储数据的部分</p><h3 id="AXI4-Master"><a href="#AXI4-Master" class="headerlink" title="AXI4-Master"></a>AXI4-Master</h3><p><strong>模块参数</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>C_M_AXI_ID_WIDTH</td><td>ID 信号的宽度</td></tr><tr><td>C_M_AXI_ADDR_WIDTH</td><td>数据宽度</td></tr><tr><td>C_M_AXI_DATA_WIDTH</td><td>地址宽度</td></tr><tr><td>C_M_AXI_BURST_LEN</td><td>突发长度</td></tr><tr><td>C_M_TARGET_SLAVE_BASE_ADDR</td><td>目的从机的基地址</td></tr></tbody></table><p><strong>通用</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>M_AXI_ACLK</td><td>时钟</td></tr><tr><td>M_AXI_ARESETN</td><td>复位信号，低电平复位</td></tr><tr><td>input wire  INIT_AXI_TXN</td><td>传输开始脉冲</td></tr><tr><td>output wire  TXN_DONE</td><td>传输结束断言</td></tr><tr><td>output reg  ERROR</td><td>错误信号</td></tr></tbody></table><p><strong>写地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_AWID</td><td>写地址ID</td></tr><tr><td>output wire [C_M_AXI_ADDR_WIDTH-1 : 0] M_AXI_AWADDR</td><td>写地址</td></tr><tr><td>output wire [7 : 0] M_AXI_AWLEN</td><td>突发长度（Burst length），给出了突发中传输（Transfer）的数量</td></tr><tr><td>output wire [2 : 0] M_AXI_AWSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>output wire [1 : 0] M_AXI_AWBURST</td><td>突发类型，AWBURST 和 AWSIZE 决定了此处突发中每次传输的地址是如何计算的</td></tr><tr><td>output wire  M_AXI_AWVALID</td><td>写地址有效</td></tr><tr><td>input wire  M_AXI_AWREADY</td><td>写地址准备</td></tr></tbody></table><p><strong>写数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_M_AXI_DATA_WIDTH-1 : 0] M_AXI_WDATA</td><td>写数据</td></tr><tr><td>output wire [C_M_AXI_DATA_WIDTH&#x2F;8-1 : 0] M_AXI_WSTRB</td><td>写数据选通</td></tr><tr><td>output wire  M_AXI_WLAST</td><td>写最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>output wire  M_AXI_WVALID</td><td>写数据有效</td></tr><tr><td>input wire  M_AXI_WREADY</td><td>写数据准备</td></tr></tbody></table><p><strong>写响应通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_BID</td><td>写响应的ID，由于本 Slave 不支持重排序，必须赋值为 S_AXI_AWID</td></tr><tr><td>input wire [1 : 0] M_AXI_BRESP</td><td>写响应，给出写事务的状态，示例代码中该信号恒为 2’b0</td></tr><tr><td>input wire  M_AXI_BVALID</td><td>写响应有效</td></tr><tr><td>output wire  M_AXI_BREADY</td><td>写响应准备</td></tr></tbody></table><p><strong>读地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_ARID</td><td>读地址ID，示例代码的 Slave 不支持重排序</td></tr><tr><td>output wire [C_M_AXI_ADDR_WIDTH-1 : 0] M_AXI_ARADDR</td><td>读地址</td></tr><tr><td>output wire [7 : 0] M_AXI_ARLEN</td><td>突发长度，给出了突发中传输的数量</td></tr><tr><td>output wire [2 : 0] M_AXI_ARSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>output wire [1 : 0] M_AXI_ARBURST</td><td>突发类型</td></tr><tr><td>output wire  M_AXI_ARVALID</td><td>读地址有效</td></tr><tr><td>input wire  M_AXI_ARREADY</td><td>读地址准备</td></tr></tbody></table><p><strong>读数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_RID</td><td>读ID，由于Slave 不支持重排序，必须赋值为 S_AXI_ARID</td></tr><tr><td>input wire [C_M_AXI_DATA_WIDTH-1 : 0] M_AXI_RDATA</td><td>读数据</td></tr><tr><td>input wire [1 : 0] M_AXI_RRESP</td><td>读响应，示例代码中该信号恒为 2’b0</td></tr><tr><td>input wire  M_AXI_RLAST</td><td>读最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>input wire  M_AXI_RVALID</td><td>读数据有效</td></tr><tr><td>output wire  M_AXI_RREADY</td><td>读数据准备</td></tr></tbody></table><p> <strong>参考</strong></p><p><a href="https://blog.csdn.net/moon9999/article/details/131146296#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BA%86%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E8%AF%BB%E5%86%99%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%8C%85%E6%8B%ACread-writeaccess%E3%80%81modifiedWriteValue%E5%92%8CreadAction%EF%BC%8C%E5%B9%B6%E5%88%97%E4%B8%BE%E4%BA%8625%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8%E8%A1%8C%E4%B8%BA%E5%8F%8A%E5%85%B6%E5%9C%A8RAL%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E6%94%AF%E6%8C%81%E6%83%85%E5%86%B5%E3%80%82,%E6%AD%A4%E5%A4%96%EF%BC%8C%E8%BF%98%E6%8F%90%E4%BE%9B%E4%BA%86%E5%85%B3%E9%94%AE%E5%AF%84%E5%AD%98%E5%99%A8%E7%B1%BB%E5%9E%8B%E7%9A%84RTL%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%A6%82RW%E3%80%81WO%E3%80%81RO%E3%80%81W1%E3%80%81W1C%E3%80%81RC%E3%80%81RS%E3%80%81WRC%E3%80%81WRS%E3%80%81WC%E3%80%81WS%E3%80%81WSRC%E5%92%8CWCRS%E7%AD%89%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%A1%AC%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">【前端验证】通关寄存器与ral_model —— 25种常用寄存器类型全览_寄存器属性-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>IC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识补充</title>
    <link href="/2025/09/21/%E6%95%B0%E5%AD%97IC_APB&amp;AHB/"/>
    <url>/2025/09/21/%E6%95%B0%E5%AD%97IC_APB&amp;AHB/</url>
    
    <content type="html"><![CDATA[<p>电路知识补充</p><span id="more"></span><h1 id="AXI4协议"><a href="#AXI4协议" class="headerlink" title="AXI4协议"></a>AXI4协议</h1><p>AXI总线作为一种总线，可以挂载若干个主设备（master）和从设备（slave），AXI总线协议定义了主设备和从设备之间如何进行通信。</p><p>主设备可以向从设备发起读事务（Read Transaction）和写事务（Write Transaction），从设备只能被动接受主设备发起的请求并作出响应。</p><p>AXI4总线协议支持以下三种类型的<strong>接口</strong>（Interface）：</p><ol><li>AXI4（有时候也叫AXI4-full）：高性能存储映射接口，数据位宽可以是 32,64,128,256,512,1024bits，最大256突发传输，地址位宽可以是64bits &#x2F; 32bits</li><li>AXI4-Lite：简化版的AXI4接口，用于较少数据量的存储映射通信，数据位宽32bits，地址位宽时32bits</li><li>AXI4-Steam：用于高速数据流传输，非存储映射接口</li></ol><p>（所谓存储映射，就是主设备访问从设备时需要给出访问的地址，即从设备是对应一段内存空间地址的，和IO统一编址类似）</p><p>AXI4-full接口支持突发传输，主要用于处理器访问存储器等需要指定地址的高速数据传输场景。AXI4-Lite接口为外设提供单个数据传输，主要用于访问一些低速外设中的寄存器。而AXI-Steam接口则向FIFO一样，数据传输时不需要地址，在主从设备之间直接连续读写数据，主要用于如视频、高速AD、PCIe、DMA接口等需要高速数据传输的场合。</p><p>AXI4-Full 接口和 Lite 接口的一个不同点在于，前者支持 Transaction Identififiers，也就是给每个读&#x2F;写事务赋予一个 ID，具有相同 ID 的事务的顺序不能打乱，不同 ID 的事务的顺序可以打乱（即重排序），这个东西的作用是即使当前还有事务没有完成，Master 可以发出新事务（新事物的ID和未完成事务的ID要不一样），可以提高系统性能。</p><h2 id="AXI4-full"><a href="#AXI4-full" class="headerlink" title="AXI4-full"></a>AXI4-full</h2><p>详细接口设计见设计文档。</p><p>AXI4接口由五个独立的通道构成：</p><ol><li>读地址</li><li>读数据</li><li>写地址</li><li>写数据</li><li>写响应</li></ol><h2 id="AXI的握手机制"><a href="#AXI的握手机制" class="headerlink" title="AXI的握手机制"></a>AXI的握手机制</h2><p>在AXI协议中，请求的发起方是Master，接受方是Slave。</p><p>在每个通道的数据传输控制都是通过主从间的握手机制实现的，具体由两个关键信号完成。</p><ul><li><p>VALID：由发送方驱动，表示数据、地址或者控制信息已经准备就绪，并且相关信号已经稳定。<strong>VALID信号必须保持高电平，直到数据传输完成</strong>。</p></li><li><p>READY：由接收方驱动，表示接收方可以接收数据。READY信号可以在VALID之前或之后拉高。</p></li></ul><p>当VALID和READY同时为高时，握手成功，数据在这一拍完成传输。</p><p>握手机制有效解决了发送方和接收方速率不一致的问题，确保了数据传输的可靠性。</p><h2 id="突发传输"><a href="#突发传输" class="headerlink" title="突发传输"></a>突发传输</h2><p>对于AXI4-Full接口，一次写事务中，Master发出一个地址后，可以连续发出多个数据，Slave可以从该地址开始连续写多个地址处的数据，这便是所谓的突发传输。读事务同理。</p><p>三种突发类型：</p><ul><li><strong>FIXED（0b00）</strong><br>每次传输的地址保持不变，适用于重复访问同一位置（如写入FIFO）。</li><li><strong>INCR（0b01）</strong> (incrementing)<br>地址线性递增，每次增加值为 <strong>AxSIZE</strong> 定义的字节数（如AxSIZE&#x3D;4字节，地址+4）。此时，给出的地址必须是对齐的。<br>适用于顺序访问数据块（如内存读写）。</li><li><strong>WRAP（0b10）</strong>(wrapping)<br>地址递增，但达到特定边界时回绕到起始地址。<br>常用于缓存行填充（Cache Line Fill），需满足：边界地址 &#x3D; 起始地址 + (传输次数 × 字节数)；传输次数必须是2的幂（如4、8次）。根据起始地址和传输大小，可以计算出一个 lower address 和 upper address，Wrapping Burst 下每次传输地址的计算和 Incrementing Burst 是相似的，除了当地址增加到 upper address 时，下次传输的地址需要回落到 lower address 。</li></ul><p>在AXI4协议中，一个突发传输（burst transfer）不能跨越这个4KB的边界，这是为了避免一个突发事务访问两个不同的slave设备，因为每个slave设备通常是4KB对齐的。如果一个突发传输跨越了4KB边界，可能会导致数据被错误地写入到另一个slave设备，从而引发传输错误。1K为2的10次方</p><h2 id="交易标识符-ID"><a href="#交易标识符-ID" class="headerlink" title="交易标识符 ID"></a>交易标识符 ID</h2><p>AXI交易标识符ID，主机用这些ID来判别必须按顺序返回的交易。</p><p>同一ID的交易必须按顺序返回，不同ID的交易可以乱序 。</p><p>AXI通过使用ID，主机可以不等待一笔交易完成就发起多笔交易。起到提升系统性能的作用，实现多笔交易的并行处理。</p><p>从机需要返回合适的BID或者RID来响应主机的ID。</p><p>有以下几个ID信号：写地址ID，写数据ID（只有AXI3，AXI4删除），写响应ID，读地址ID，读响应ID</p><p><strong>乱序 out of order传输</strong></p><p>乱序传输：表示当有多个事务在传输时，有的事务可能先准备好，因此可以先发送在总线上，通过ID号来区分数据和响应来自哪一个事务，乱序指得是事务乱序，而不是说的master，即多个不同master可以发起多个不同的事务，单个master也可以发起多个不同的事务</p><p>说明：</p><p>不同事务的AxID如果一致，那么这些事务就不能实现out of order，只能进行顺序完成。</p><p>如果不同事务AxID不同，那么这些事务之间可以乱序。那么不同AxID事务的数据，对于AXI读来说，如何判断返回的数据属于哪个事务呢，是通过RID来进行匹配的，也就是说，在完成乱序传输的时候，需要RID和ARID保持一致，以标识不同事务的数据</p><p>那么对于实际情况来说，在实际传输中，可能有的事务AxID是不同的，有的是相同的，这是如何解决的？答：对于ID相同的就顺序完成，对于ID不同的可以乱序。</p><p>特殊的写乱序：在AXI4中取消了WID，所以写地址和写数据的顺序必须一致</p><h2 id="OutStanding"><a href="#OutStanding" class="headerlink" title="OutStanding"></a>OutStanding</h2><p><strong>不需要等待前一笔传输完成就可以发送下一笔操作</strong>。AXI因为是通道分离的所以master不需要等待前一笔操作A响应完成就可以发送下一笔操作请求B，这样可以有效提升通路利用率，提升系统性能</p><p>outstanding 就是发出去的地址数量，未处理的地址可以先存放在AXI总线的缓存中，等完成一次传输事务之后，无需再握手传输地址，即可进行下一次的数据传输。所以 outstanding 的本质是为了实现数据传输的pipeline，outstanding 能力即AXI4 Master 不需要等到response 就可以持续发写命令的个数。</p><h2 id="交织interleaving-传输"><a href="#交织interleaving-传输" class="headerlink" title="交织interleaving 传输"></a>交织interleaving 传输</h2><p>交织传输：表示实现不同transaction中的beat的交替传输，但同一transaction的beat是需要按照顺序进行传输的， AXI4不再支持写交织。(依然需要根据ID号来判断数据属于哪个事务)</p><p>例如事务A指令为A，数据是a0，a1，a2,事务B指令是B，数据是b0，b1，b2,</p><p>支持交织数据总线数据顺序就可以是a0，b0，a1，b1，a2，b2(或者其他顺序)</p><p>不支持交织数据总线数据顺序就只能是a0，a1，a2，b0，b1，b2或者b0，b1，b2，a0，a1，a2</p><h2 id="总线带宽的计算"><a href="#总线带宽的计算" class="headerlink" title="总线带宽的计算"></a>总线带宽的计算</h2><p>不考虑缓存大小的前提下，最佳outstanding能力 &#x3D; latency_cycle &#x2F; burst_length</p><p>不考虑访问延迟和outstanding的情况下，</p><p>一次突发传输，传输的数据量为：总线位宽 × 突发传输个数</p><p>一次突发传输，消耗的时间为：突发传输个数 &#x2F; 时钟频率</p><p>因此带宽为，数据量 &#x2F; 时间 &#x3D; 总线位宽 × 时钟频率</p><p>考虑访问延迟和outstanding</p><p>传输的数据量为：总线位宽 × 突发传输个数 × outstandings</p><p>消耗的时间为：突发传输个数 &#x2F; 时钟频率 × outstandings + 访问延迟</p><p>因此带宽为，数据量 &#x2F; 时间 &#x3D; 总线位宽 × 时钟频率</p><p>例：在一个AXI总线系统中，总线位宽为128bit,频率为500MHz，允许的最大Outstanding为8、最大Burst为16,Slave的访问至时为200ns。 那么该AXI总线最大传输带宽是多少？请给出推理过程，并计算最终结果。</p><p><a href="https://zhuanlan.zhihu.com/p/554026947">AXI outstanding传输带宽计算 - 知乎</a></p><h1 id="FIFO深度计算"><a href="#FIFO深度计算" class="headerlink" title="FIFO深度计算"></a>FIFO深度计算</h1><p><a href="https://blog.csdn.net/qq_40483920/article/details/108233399">FPGA&#x2F;IC笔试面试（一）：异步FIFO最小深度计算-CSDN博客</a></p><h1 id="PPA"><a href="#PPA" class="headerlink" title="PPA"></a>PPA</h1><h2 id="一、面向性能的设计方法"><a href="#一、面向性能的设计方法" class="headerlink" title="一、面向性能的设计方法"></a>一、面向性能的设计方法</h2><p>决定性能的因素有很多，比如算法策略，操作数预处理，批量处理，并行处理，输入延迟等等。</p><p>本文主要想讲的是 HDL 层面，所以举如下例子：</p><h3 id="1-信号延迟"><a href="#1-信号延迟" class="headerlink" title="1.信号延迟"></a>1.信号延迟</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog">   <span class="hljs-keyword">module</span> addr_comp(<br>    <span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]A_addr,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]B_addr,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]ptr_in,<br><span class="hljs-keyword">input</span> control,<br><span class="hljs-keyword">output</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]addr_cout<br>);<br><span class="hljs-keyword">parameter</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] addr_base = <span class="hljs-number">8&#x27;b10000000</span>;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] ptr_temp;<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] addr_reg;<br><br><span class="hljs-keyword">assign</span> prt = control? ptr_in:<span class="hljs-number">8&#x27;h0</span>;<br><span class="hljs-keyword">assign</span> ptr_temp = addr_base - prt;<br><span class="hljs-keyword">assign</span> addr_reg = A_addr-ptr_temp;<br><span class="hljs-keyword">assign</span> addr_cout = addr_reg + B_addr;<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>在本例中，心中的电路一定是：一个control控制的2选1 MUX，MUX 输出后面接着几级加法器。</p><p>那么这里问题就来了，加入control信号因为路径太长，或者经历的组合逻辑太多导致延迟到来，那会发生什么？</p><p>很明显，会导致其他输入信号只能等你control信号过来了再依次进行运算，这就降低了整个电路的性能。</p><p>即假设ptr_in和其他相关的输入先到了，control最慢到来，那这个电路要怎么设计？（这里就体现了虽然RTL写的代码思想上是并行的，但实际电路中是带有各种延迟）</p><p>这是我按照上述信号到来顺序设计的代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> addr_comp(<br>    <span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]A_addr,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]B_addr,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]ptr_in,<br><span class="hljs-keyword">input</span> control,<br><span class="hljs-keyword">output</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]addr_cout<br>);<br><span class="hljs-keyword">parameter</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] addr_base = <span class="hljs-number">8&#x27;b10000000</span>;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] ptr_temp;<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] addr_reg1,addr_reg2;<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] count_temp1,count_temp2;<br><br><span class="hljs-keyword">assign</span> ptr_temp = addr_base - prt;<br><span class="hljs-keyword">assign</span> addr_reg1 = A_addr-ptr_temp;<br><span class="hljs-keyword">assign</span> addr_reg2 = A_addr-addr_base;<br><span class="hljs-keyword">assign</span> count_temp1 = addr_reg1 + B_addr;<br><span class="hljs-keyword">assign</span> count_temp2 = addr_reg2 + B_addr;<br><br><span class="hljs-keyword">assign</span> addr_cout = control?addr_reg1:addr_reg1;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>因为知道control最慢来，我就提前将数据计算好，只要control来了马上释放结果，这样就不需要等control来了再进行一系列运算才能输出结果。</p><p>此类体现的思想是：面积换运算速率，关键信号延迟放最靠近输出的一级；</p><p>第二个例子是：</p><h3 id="2-并行处理和流水线"><a href="#2-并行处理和流水线" class="headerlink" title="2.并行处理和流水线"></a>2.并行处理和流水线</h3><p>假设我们要实现a<em>b，a</em>b可以视为temp&#x3D;b[i]?a&lt;&lt;i:0;然后把temp加起来即可。</p><p>所以其RTL为：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog">   <span class="hljs-keyword">module</span> addr_comp(<br>        <span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]  a,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]  b,<br><span class="hljs-keyword">output</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]d<br><br>);<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">91</span>:<span class="hljs-number">0</span>] temp;<br><br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] = b[<span class="hljs-number">0</span>]?a&lt;&lt;<span class="hljs-number">0</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">16</span>:<span class="hljs-number">8</span>] = b[<span class="hljs-number">1</span>]?a&lt;&lt;<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">26</span>:<span class="hljs-number">17</span>] = b[<span class="hljs-number">2</span>]?a&lt;&lt;<span class="hljs-number">2</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">37</span>:<span class="hljs-number">27</span>] = b[<span class="hljs-number">3</span>]?a&lt;&lt;<span class="hljs-number">3</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">49</span>:<span class="hljs-number">38</span>] = b[<span class="hljs-number">4</span>]?a&lt;&lt;<span class="hljs-number">4</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">62</span>:<span class="hljs-number">50</span>] = b[<span class="hljs-number">5</span>]?a&lt;&lt;<span class="hljs-number">5</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">76</span>:<span class="hljs-number">63</span>] = b[<span class="hljs-number">6</span>]?a&lt;&lt;<span class="hljs-number">6</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">91</span>:<span class="hljs-number">77</span>] = b[<span class="hljs-number">7</span>]?a&lt;&lt;<span class="hljs-number">7</span>:<span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">assign</span> d &lt;= temp[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] + temp[<span class="hljs-number">16</span>:<span class="hljs-number">8</span>]+ temp[<span class="hljs-number">26</span>:<span class="hljs-number">17</span>]+ temp[<span class="hljs-number">37</span>:<span class="hljs-number">27</span>]+ temp[<span class="hljs-number">49</span>:<span class="hljs-number">38</span>]+ temp[<span class="hljs-number">62</span>:<span class="hljs-number">50</span>]+ temp[<span class="hljs-number">76</span>:<span class="hljs-number">63</span>]+ temp[<span class="hljs-number">91</span>:<span class="hljs-number">77</span>];<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>这样采用了并行设计的思想，运算速率倒是挺快的，但是这样搞，组合逻辑太多了（主要是在加法那里），频率就会上不去。所以我们需要将其拆开做流水处理。这里心里想出来的电路应该是，8个MUX（输入为做移位的组合逻辑和0）的输出连到8输入加法器身上，当然8输入加法器也是由多级1bit全加器组成，这样延时就会很长了，导致数据到达FF的时间会很慢。</p><p>插入流水线之后的 RTL 代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs verilog">   <span class="hljs-keyword">module</span> addr_comp(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]a,<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]  b,<br><span class="hljs-keyword">output</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]d<br><br>);<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">91</span>:<span class="hljs-number">0</span>] temp;<br><br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] = b[<span class="hljs-number">0</span>]?a&lt;&lt;<span class="hljs-number">0</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">16</span>:<span class="hljs-number">8</span>] = b[<span class="hljs-number">1</span>]?a&lt;&lt;<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">26</span>:<span class="hljs-number">17</span>] = b[<span class="hljs-number">2</span>]?a&lt;&lt;<span class="hljs-number">2</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">37</span>:<span class="hljs-number">27</span>] = b[<span class="hljs-number">3</span>]?a&lt;&lt;<span class="hljs-number">3</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">49</span>:<span class="hljs-number">38</span>] = b[<span class="hljs-number">4</span>]?a&lt;&lt;<span class="hljs-number">4</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">62</span>:<span class="hljs-number">50</span>] = b[<span class="hljs-number">5</span>]?a&lt;&lt;<span class="hljs-number">5</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">76</span>:<span class="hljs-number">63</span>] = b[<span class="hljs-number">6</span>]?a&lt;&lt;<span class="hljs-number">6</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> temp[<span class="hljs-number">91</span>:<span class="hljs-number">77</span>] = b[<span class="hljs-number">7</span>]?a&lt;&lt;<span class="hljs-number">7</span>:<span class="hljs-number">0</span>;<br><br><br><span class="hljs-comment">//先将数据存放到FF中，此时计算了最低个数据的加法进位，所以此处为第一级流水</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] data_temp0;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">11</span>:<span class="hljs-number">0</span>] data_temp1;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">13</span>:<span class="hljs-number">0</span>] data_temp2;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] data_temp3;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>data_temp0 &lt;= temp[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]   + temp[<span class="hljs-number">16</span>:<span class="hljs-number">8</span>]；<span class="hljs-comment">//8bit+9bit,10bit保留进位</span><br>data_temp1 &lt;= temp[<span class="hljs-number">26</span>:<span class="hljs-number">17</span>] + temp[<span class="hljs-number">37</span>:<span class="hljs-number">27</span>];<span class="hljs-comment">//10bit +11bit 12bit保留进位</span><br>data_temp2 &lt;= temp[<span class="hljs-number">49</span>:<span class="hljs-number">38</span>] + temp[<span class="hljs-number">62</span>:<span class="hljs-number">50</span>];<span class="hljs-comment">//12bit +13bit 14bit保留进位</span><br>data_temp3 &lt;= temp[<span class="hljs-number">76</span>:<span class="hljs-number">63</span>] + temp[<span class="hljs-number">91</span>:<span class="hljs-number">77</span>];<span class="hljs-comment">//14bit +15bit 16bit保留进位</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//传递进位-第二级流水,将data_temp0的进位传递出去</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">11</span>:<span class="hljs-number">0</span>] pipe_temp1;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">13</span>:<span class="hljs-number">0</span>] data_temp22;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] data_temp23;<br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>data_temp22 &lt;= data_temp2;<br>data_temp23 &lt;= data_temp3;<br>pipe_temp1 &lt;= data_temp1 + data_temp0;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//传递进位-第三级流水</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] data_temp33<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">13</span>:<span class="hljs-number">0</span>] pipe_temp2；<br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>data_temp33 &lt;= data_temp23;<br>pipe_temp2 &lt;= data_temp22 + pipe_temp1;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//传递进位-第四级流水</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] pipe_temp3；<br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>pipe_temp3 &lt;= data_temp33 + pipe_temp2;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">assign</span> d =  pipe_temp3;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>用了4级流水，流水主要是将进位传递，这里再度思考下电路变成什么样了？</p><p>主要是在加法器这里，将前面的8输入加法器转换成了2输入加法器，并且每个加法器的输出将其进位保留在FF中，这样虽然增大了输出延迟，但是保证了数据不会在一条路上耽搁太久就进入了FF，根据setup slack计算公式，缩短了数据路径，从而提升了系统整体的运行频率。</p><p>此类体现的思想是：面积换运行频率；<a href="https://zhida.zhihu.com/search?content_id=199273436&content_type=Article&match_order=1&q=%E6%B5%81%E6%B0%B4%E7%BA%BF%E8%AE%BE%E8%AE%A1&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDQ4NTk2NzcsInEiOiLmtYHmsLTnur_orr7orqEiLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoxOTkyNzM0MzYsImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.DN0u_V-cWdfw5OSO62jvZ8F7o0hcFcVE2Y4B-TU5B4c&zhida_source=entity">流水线设计</a>；并行设计。</p><h2 id="二、面向功耗的设计方法"><a href="#二、面向功耗的设计方法" class="headerlink" title="二、面向功耗的设计方法"></a>二、面向功耗的设计方法</h2><p>本文主要还是针对RTL级的优化，并不针对工艺的功耗优化。RTL级的功耗优化主要针对的是动态功耗，要尽可能减小信号的翻转频率，基于这一点，本文总结一些几点优化方式：</p><h3 id="1-门控时钟"><a href="#1-门控时钟" class="headerlink" title="1.门控时钟"></a>1.<a href="https://zhida.zhihu.com/search?content_id=199273436&content_type=Article&match_order=1&q=%E9%97%A8%E6%8E%A7%E6%97%B6%E9%92%9F&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDQ4NTk2NzcsInEiOiLpl6jmjqfml7bpkp8iLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoxOTkyNzM0MzYsImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.Bh3FV2_d1v16k400pRdz1eZR-8bltWGtiJCSSJxHSNw&zhida_source=entity">门控时钟</a></h3><p>门控时钟就是控制时钟的启停，一旦时钟停止，则该时钟域下的所有操作均保持静止，不再翻转。虽然在综合的时候综合工具会自动帮我们生成门控时钟，但是存在一些情况，综合工具无法生成门控时钟。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span> a;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(valid)<br>      a&lt;= <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">else</span><br>      a&lt;= <span class="hljs-number">0</span>; <br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>上面这种情况就没办法做门控，因为门控时钟的含有是在你这个模块完成了对应的功能之后，将时钟gate住，这样所有值都保持住了。上面这种情况a在valid为0是，还会进行翻转，这样综合工具就认为你这模块还没完成对应功能，所以不会做门控。</p><p>推荐的写法如下</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span> a;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(valid)<br>      a&lt;= <span class="hljs-number">1</span>; <br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="2-操作数隔离"><a href="#2-操作数隔离" class="headerlink" title="2.操作数隔离"></a>2.操作数隔离</h3><p>如果在某一段时间内，数据通路的输出是无用的，则将它的输入置成个固定值，这样，数据通路部分没有翻转，功耗就会降低。会增大面积并且影响DFT。例如下题</p><p><img src="https://pic1.zhimg.com/v2-b03cb07870c5d6f4e0cf9c3111461eea_1440w.jpg" alt="img"></p><p>注意ENABLE的选择器，没选到加法器则加法器那里的功耗就浪费了，因此当EN没选到加法器那块时，需要将输入输出gate住，防止跳变产生功耗。</p><p>题解如下：</p><p><img src="https://pic2.zhimg.com/v2-157bae16578185a2eb10197bd05543b5_1440w.jpg" alt="img"></p><h3 id="3-编码优化"><a href="#3-编码优化" class="headerlink" title="3.编码优化"></a>3.<a href="https://zhida.zhihu.com/search?content_id=199273436&content_type=Article&match_order=1&q=%E7%BC%96%E7%A0%81%E4%BC%98%E5%8C%96&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDQ4NTk2NzcsInEiOiLnvJbnoIHkvJjljJYiLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoxOTkyNzM0MzYsImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.bRbFj49ECF7feRX_aYRfQ2VMwdzjWNqR-5jIjh3OmTw&zhida_source=entity">编码优化</a></h3><p>状态机编码采用格雷码或者独热码，能够减少状态跳转时的信号bit翻转。</p><p>二进制转格雷码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">gray = bin^(bin&gt;&gt;<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>一般用于多路选择器的输入端，防止输入乱跳，比如输入为4’b1111，突然跳变为4’b0000，这直接全部跳变了，功耗拉满，相比较下格雷码为</p><p>（4’b1111）(bin)-&gt; (4’b1000) (gray)</p><p>（4’b0000）(bin)-&gt; (4’b0000) (gray） 只跳变了1bit，功耗就降下来了。</p><h3 id="4-减小毛刺及其传递"><a href="#4-减小毛刺及其传递" class="headerlink" title="4.减小毛刺及其传递"></a>4.减小毛刺及其传递</h3><p>毛刺本身就算一种翻转，因为毛刺也可能使后续模块产生翻转，为了降低毛刺带来的影响，一般将关键信号或者变化较快的信号放在离输出最近的一级电路中，这样能减小毛刺的传递，从而降低功耗。</p><h2 id="三、面向面积的设计方法"><a href="#三、面向面积的设计方法" class="headerlink" title="三、面向面积的设计方法"></a>三、面向面积的设计方法</h2><p>一般地，我们在设计中总会要求以性能优先，然后再尽可能去减小设计面积。减小面积就意味着降低成本和功耗，是IC设计工程师在写RTL时必须注意的点。</p><p>本文主要介绍在RTL代码如何来节约面积，</p><h3 id="1-利用位数做判断。"><a href="#1-利用位数做判断。" class="headerlink" title="1.利用位数做判断。"></a>1.利用位数做判断。</h3><p>做判断时注意需要可以采用取某些bit进行判断。</p><p><img src="https://pica.zhimg.com/v2-6bcd96be19c45ecb0a6a64821cba8db4_1440w.jpg" alt="img"></p><p>这里如果用A&lt;32,那就是A与32做减法了，虽然EDA会做优化，但肯定也没A[5]&#x3D;&#x3D;1’b1的效果好。</p><h3 id="2-尽可能调用成熟的算术IP核"><a href="#2-尽可能调用成熟的算术IP核" class="headerlink" title="2.尽可能调用成熟的算术IP核"></a>2.尽可能调用成熟的算术IP核</h3><p><strong>成熟的IP远比自己写的运算速率和面积都进行了优化，所以对于大bit的操作数建议直接用IP进行运算。</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog">  <span class="hljs-comment">//不调用IP       </span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">255</span>:<span class="hljs-number">0</span>] a,b;<br>      ....<br>      <span class="hljs-keyword">if</span>(a+b &lt;c)<br>       ...<br>      <span class="hljs-keyword">else</span><br>      ...<br><span class="hljs-comment">////////////////////////////////////////////////////</span><br>   <span class="hljs-comment">//调用IP</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">255</span>:<span class="hljs-number">0</span>] a,b;<br>add add_inst(<br><span class="hljs-variable">.a</span>(a),<br><span class="hljs-variable">.b</span>(b),<br><span class="hljs-variable">.s</span>(s)<br>);<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">256</span>:<span class="hljs-number">0</span>]s;<br>      ....<br>      <span class="hljs-keyword">if</span>(s &lt;c)<br>       ...<br>      <span class="hljs-keyword">else</span><br>      ...<br></code></pre></td></tr></table></figure><h3 id="3-资源共享"><a href="#3-资源共享" class="headerlink" title="3.资源共享"></a>3.资源共享</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//假设进行如下运算</span><br><span class="hljs-keyword">assign</span> out1=b+c+d+e+f;<br><br><span class="hljs-keyword">assign</span> out2=a+c+d+e+f;<br><br><span class="hljs-keyword">assign</span> out3=a+b+d+e+f;<br><br><span class="hljs-keyword">assign</span> out4=a+b+c+e+f;<br><br><span class="hljs-keyword">assign</span> out5=a+b+c+d+f;<br><br><span class="hljs-comment">//资源共享后</span><br><span class="hljs-keyword">assign</span> sum=a+b+c+d+e+f;<br><br><span class="hljs-keyword">assign</span> out1=sum-a;<br><br><span class="hljs-keyword">assign</span> out2=sum-b;<br><br><span class="hljs-keyword">assign</span> out3=sum-c;<br><br><span class="hljs-keyword">assign</span> out4=sum-d;<br><br><span class="hljs-keyword">assign</span> out5=sum-e;<br></code></pre></td></tr></table></figure><h3 id="4-缩减操作位宽"><a href="#4-缩减操作位宽" class="headerlink" title="4.缩减操作位宽"></a>4.缩减操作位宽</h3><p>对于精度要求不高的运算时，比如调用了一个FIR Filter，输出为64bit，我们可以取其最高的32bit进行下一步运算。</p><p>又比如byte加法器，一次增加一个byte（8bit），则大部分人可能直接写成</p><p>cnt &lt;&#x3D; cnt +8;</p><p>这里注意我们的cnt低三位并没有使用，所以这里可以这样写：</p><p>cnt[7:3] &lt;&#x3D; cnt[7:3]+1;</p><p>cnt[2:0] &lt;&#x3D; cnt[2:0] +0;</p><h3 id="5-卡诺图"><a href="#5-卡诺图" class="headerlink" title="5.卡诺图"></a>5.卡诺图</h3><p>我们可以通过卡诺图尽可能的化简操作式。</p><p>如nv笔试题：用尽可能少的与非门搭建如下逻辑：O&#x3D;C?A&amp;B:A；</p><p>先画卡诺图</p><p><img src="https://pic4.zhimg.com/v2-263fe9113edbb5bda160175ef2d33ddd_1440w.jpg" alt="img"></p><p>化简后逻辑式为：</p><p><img src="https://pica.zhimg.com/v2-668a0d1bfe907267cc79ce4d3598ce0c_1440w.jpg" alt="img"></p><p>电路图为：</p><p><img src="https://pic4.zhimg.com/v2-f5b5856e0820ac7045c04a397ae4f70d_1440w.jpg" alt="img"></p><h3 id="6-时分复用"><a href="#6-时分复用" class="headerlink" title="6.时分复用"></a>6.时分复用</h3><p>其实与资源共享有些类似，核心在于用过时钟流水形成运算器的复用。</p><p>比如：我们要计算e&#x3D;a+b+c+d;如果不要求1个时钟算完，那我们可以只用1个加法器实现。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//时分复用  伪代码，明白意思就行</span><br><span class="hljs-keyword">input</span> a,b,c,d;<br><span class="hljs-keyword">output</span> e;<br><br><span class="hljs-keyword">assign</span> x = y + x;<br>...<br><span class="hljs-keyword">case</span>(counter)<br><span class="hljs-number">2&#x27;b00</span>:y&lt;=a;z&lt;=b;temp1&lt;=x;<span class="hljs-comment">//第一个时钟先算a+b，并将结果存放到temp1中</span><br><span class="hljs-number">2&#x27;b01</span>:y&lt;=temp1;z&lt;=c;temp2&lt;=x;<span class="hljs-comment">//第二个时钟算temp1+c,并将结果存放到temp2中</span><br><span class="hljs-number">2&#x27;b10</span>:y&lt;=temp2;z&lt;=d;e&lt;=x;<span class="hljs-comment">//第二个时钟算temp2+d,并将结果存放到e中   至此，计算结束</span><br><span class="hljs-keyword">endcase</span><br></code></pre></td></tr></table></figure><h2 id="CT项目中的PPA"><a href="#CT项目中的PPA" class="headerlink" title="CT项目中的PPA"></a>CT项目中的PPA</h2><p>主要是面向面积的优化，</p><p>状态机的判断条件使用位数进行判断</p><p>状态的定义使用独热码，更节省面积</p><p>尽量使用简单的逻辑运算表达式，化简卡诺图的方法</p><p>IP 核的使用</p><p>或者是其他的判断条件，例如计数器等等</p><p>对于算法的设计，并不对所有的3*3像素都配置一个算法计算单元，而是通过时分复用</p><p>数据的缓存策略和流动策略</p><p>所有像素的计数器的不可少的，因此所有的计数都是并行执行的，在计数完进行算法计算的时候，通过移位寄存器将数据流入计算单元中，计算每个3*3像素的修正值，每次都是计算得到一个中心像素的修正值，（这里的修正是一个能量聚集的策略）计算完之后，数据流入双端口SRAM进行缓存，SRAM的缓存使用多块的策略。</p><p>我这里只有一块，但整体可以分块进行，在宽度上进行分块</p><p>功耗</p><p>时钟门控和使能信号</p><p>工艺角的问题</p><table><thead><tr><th align="left">工艺角</th><th align="left">NMOS速度</th><th align="left">PMOS速度</th><th align="left">典型影响</th></tr></thead><tbody><tr><td align="left"><strong>TT</strong></td><td align="left">典型</td><td align="left">典型</td><td align="left">标称性能</td></tr><tr><td align="left"><strong>FF</strong></td><td align="left">最快</td><td align="left">最快</td><td align="left">速度最快，但功耗和漏电可能超标</td></tr><tr><td align="left"><strong>SS</strong></td><td align="left">最慢</td><td align="left">最慢</td><td align="left">速度最慢，时序易违规</td></tr><tr><td align="left"><strong>FS</strong></td><td align="left">最快</td><td align="left">最慢</td><td align="left">不对称性能（如PMOS拖累）</td></tr><tr><td align="left"><strong>SF</strong></td><td align="left">最慢</td><td align="left">最快</td><td align="left">不对称性能（如NMOS拖累）</td></tr></tbody></table><p>SS 指芯片中<strong>NMOS和PMOS晶体管均处于最慢速度</strong>的工作状态（高阈值电压、低迁移率）</p><p>开关速度降低，时序路径延迟增加</p><ul><li><strong>可靠性验证</strong>：确保芯片在<strong>最恶劣工艺偏差</strong>下仍能满足时序要求（如时钟频率）。</li><li><strong>功耗评估</strong>：SS角下漏电流最小，可用于评估最低功耗场景。</li><li><strong>设计余量（Margin）</strong>：防止实际生产中出现“速度过慢”的芯片失效。</li></ul><p>FF 用于评估功耗最大的场景，主要由于晶体管速度最快导致动态功耗激增，同时低阈值电压加剧漏电流。设计时必须通过仿真覆盖FF角条件，避免芯片在实际应用中因功耗超标失效。</p><ul><li><strong>SS + 125℃ + Vdd_min</strong>（最差时序）</li><li><strong>FF + 125℃ + Vdd_max</strong>（最大功耗）</li><li><strong>TT + 25℃ + Vdd_nom</strong>（标称性能）</li></ul><h1 id="公司总结"><a href="#公司总结" class="headerlink" title="公司总结"></a>公司总结</h1><h2 id="APB协议"><a href="#APB协议" class="headerlink" title="APB协议"></a>APB协议</h2><p>PCLK     1      时钟</p><p>PRESET   1      复位</p><p>PWRITE   1      读写控制</p><p>PSEL      1      设备选择</p><p>PENABLE   1      设备使能</p><p>PADDR     32     读写地址</p><p>PWDATA  32     写数据</p><p>PRDATA   32     读数据</p><p>PREADY   1      设备状态反馈</p><p>PSLVERR   1      设备错误反馈</p><p>PSTRB             写选通信号，指示总线上哪些字节数据有效</p><p>非流水线式读写，每次读写分为两拍，前一拍为建立阶段，后一拍为访问阶段。</p><p>PSEL在两拍中都为高，PENABLE只有在访问阶段才为高，其余地址和数据信号在两拍中保持不变</p><p>PREADY信号为0时，起到暂停总线的作用，访问阶段会拖延，期间控制信号不变</p><p>PSLVERR信号为1时，表示设备寄存器发生错误，对于读操作，CPU忽略返回的数据</p><p>主机：</p><p>通过维护一个状态机，来实现读写控制逻辑</p><p>空闲状态，设备建立状态，设备访问状态</p><p>根据不同状态，输出控制信号和读写数据</p><p>从机：</p><p>配置字先是被存储在APB域的寄存器，然后在合适的时机同步到内部寄存器，可以由CPU发送同步信号来同步。Buffer Enable</p><p>状态机：</p><p>二进制编码，格雷码，独热码</p><p>1．二进制编码  </p><p>优点：触发器利用率高，仅用较少的触发器就能表示较多的状态</p><p>缺点：状态之间切换速度慢，译码复杂</p><ol start="2"><li>格雷码</li></ol><p>优点：触发器利用率高，可以避免多bit信号的数据歪斜，状态切换速度较快、</p><p>缺点：译码复杂 </p><ol start="3"><li>独热码</li></ol><p>优点：状态切换速度快，译码简单</p><p>缺点：会使用较多的触发器，触发器利用率不高</p><p><strong>高速系统</strong>下统一采用<strong>独热码</strong></p><p>使用独热码的更加节省组合逻辑，对于译码和状态比较和跳转的逻辑都更加简单</p><p>在卡诺图化简中，不care的编码可以与其余的有效编码合并化简。实际上综合器也会这么做，所以独热码非常容易化简。</p><h2 id="AHB协议"><a href="#AHB协议" class="headerlink" title="AHB协议"></a>AHB协议</h2><p>HCLK            1      时钟</p><p>HRESET          1      复位</p><p>HWRITE          1      读写控制</p><p>HTRANS           2      传输方式（空闲，忙，传一个，传多个）</p><p>HSIZE             3      每次传输多少个字节（最大值由数据位宽决定）</p><p>HPORT            4      数据保护（Cache，Buffer，数据权限，指令&#x2F;数据）</p><p>HBUSRT           3      突发传输个数和地址传输方式</p><p>HADDR           32     读写地址</p><p>HWDATA         32     写数据</p><p>HRDATA         32     读数据</p><p>HREADY          1      总线上所有设备状态反馈</p><p>HREADYOUT      1      设备状态反馈</p><p>HRESP            1      设备错误反馈</p><p>其他控制信号</p><p>HMASTER      </p><p>HMASTLOCK     </p><p>AHB的读写数据，分为两拍进行，地址阶段和数据阶段</p><p>传输方式是流水线方式，即B轮传输的地址和A轮的数据重合</p><p>如果HREADY拉低，总线暂停，B轮的地址和控制信号都会保持</p><h2 id="寄存器类型"><a href="#寄存器类型" class="headerlink" title="寄存器类型"></a>寄存器类型</h2><p>已支持类型</p><p><strong>RW（读写）</strong></p><p>描述：由APB数据接口写入，输出到其他模块，可以使用APB数据接口读出</p><p>写入：APB总线写入新值</p><p>读取：APB总线可以读取</p><p>输出：值可用于控制其他模块</p><p>应用场景：常用于控制寄存器，例如配置工作模式、使能位、阈值设置等。</p><p><strong>R（只读）</strong></p><p>描述：由其他模块输入，直接给到APB数据接口读出，该寄存器值由模块内部逻辑提供，CPU&#x2F;APB只能读取，不能写。</p><p>写入：不允许</p><p>读取：APB总线可读取</p><p>应用场景：用于状态反馈、只读标志位、传感器输出、状态监测等。</p><p><strong>W（只写）</strong></p><p>描述：由APB数据接口写入，输出到其他模块，不会使用APB数据接口读出</p><p>写入：可以</p><p>读取：APB无法读取</p><p>输出：用于产生某些控制信号，如触发、复位等</p><p>应用场景：写入触发类操作，如启动DMA、复位模块、产生脉冲控制信号等。</p><p><strong>RC（读清）</strong></p><p>描述：由APB数据接口写入，输出到其他模块，可以使用APB数据接口读出，但读出之后清0</p><p>写入：可以</p><p>读取：读时清0</p><p>应用场景：状态或事件标志类寄存器，如FIFO满&#x2F;空标志、错误中断标志。读取后清零避免重复响应。</p><p><strong>W1C（写1清）</strong></p><p>描述：由APB数据接口写入1时，该寄存器清0，否则保持不变，脉冲，输出到其他模块，可以使用APB数据接口读出</p><p>写入：可以</p><p>读取：可以</p><p>用途：常用于中断清除，CPU进入ISR后写1清除中断标志位。常常用于对中断寄存器清0，当CPU进入中断服务程序时，就必须发出一个脉冲对中断寄存器清0</p><p>应用场景：中断状态寄存器，异常标志寄存器。</p><p><strong>W0S（写0S）</strong></p><p>描述：写0时该位被置1（Set），写1无效。输出到其他模块，可以使用APB数据接口读出</p><p>写入：可以</p><p>读取：可以读取</p><p>用途：不常见，某些特殊场景下用于位反转或异常启动信号。</p><p>注意：不同设计者可能赋予W0S不同含义，也有设计中写0置0的称法，具体以文档定义为准。</p><p><strong>W1（写一次）</strong></p><p>由APB数据接口写入，输出到其他模块，可以使用APB数据接口读出，只有在复位的时候可以写1次</p><p>描述：该寄存器只能在上电&#x2F;复位后写入一次，之后无法修改。</p><p>写入：只能写一次</p><p>读取：可以读取</p><p>应用场景：一次性配置信息，如芯片配置锁定、安全区域解锁等。</p><p><strong>WRS</strong></p><p>由APB数据接口写入，输出到其他模块，可以使用APB数据接口读出（与RW的区别在哪里？）</p><p>描述：与RW相似，但强调寄存器由写入值驱动行为后，也可读回写入值。</p><p>区别于RW：在某些规范中，WRS更强调“写驱动行为”，RW更强调“长期配置保存”</p><p>应用场景：控制启动后可以确认写入值是否生效，如写入DMA启动地址后可读回确认。</p><p>✅ 总结表：</p><table><thead><tr><th>类型</th><th>是否可写</th><th>是否可读</th><th>特殊行为</th><th>应用场景</th></tr></thead><tbody><tr><td>RW</td><td>✅</td><td>✅</td><td>无</td><td>控制与配置</td></tr><tr><td>R</td><td>❌</td><td>✅</td><td>无</td><td>状态反馈</td></tr><tr><td>W</td><td>✅</td><td>❌</td><td>无</td><td>写触发类控制</td></tr><tr><td>RC</td><td>✅</td><td>✅</td><td><strong>读后清零</strong></td><td>标志位&#x2F;事件记录</td></tr><tr><td>W1C</td><td>✅</td><td>✅</td><td><strong>写1清零</strong></td><td>中断清除&#x2F;错误清除</td></tr><tr><td>W0S</td><td>✅</td><td>✅</td><td><strong>写0置位</strong>（不常见）</td><td>启动信号&#x2F;调试</td></tr><tr><td>W1</td><td>✅</td><td>✅</td><td><strong>只允许写1次</strong></td><td>安全配置&#x2F;锁定值</td></tr><tr><td>WRS</td><td>✅</td><td>✅</td><td>强调写驱动行为</td><td>写后确认写入值（DMA配置等）</td></tr></tbody></table><p>下面是一个代码例子</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">/***************************************************MODULE NAME usart**************************************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--------------------------------------------------usart_sr--------------------------------------------------</span><br><span class="hljs-comment">|BIT NAME                 |BIT POSITION   |REG_ACCESS                    |REG_KEY        |SET       |CLEAR     </span><br><span class="hljs-comment">|-------------------------|---------------|------------------------------|---------------|----------|----------</span><br><span class="hljs-comment">|pe                       |[0:0]          |RW                            |None           |0         |0         </span><br><span class="hljs-comment">|fe                       |[1:1]          |W(WriteOnly)                  |None           |0         |0         </span><br><span class="hljs-comment">|ne                       |[2:2]          |R(ReadOnly)                   |None           |0         |0         </span><br><span class="hljs-comment">|ore                      |[3:3]          |RC(readclear)                 |None           |0         |0         </span><br><span class="hljs-comment">|idle                     |[4:4]          |W1C(Write1/auto-clear 0)      |None           |0         |0         </span><br><span class="hljs-comment">|rxne                     |[5:5]          |W0S(Write0/auto-set1)         |None           |0         |0         </span><br><span class="hljs-comment">|tc                       |[6:6]          |W1(WriteOnce)                 |None           |0         |0         </span><br><span class="hljs-comment">|txe                      |[7:7]          |WRS(WR/hardware update)       |None           |0         |0         </span><br><span class="hljs-comment">|lbd                      |[8:8]          |RW                            |None           |0         |0         </span><br><span class="hljs-comment">|cts                      |[9:9]          |RW                            |None           |0         |0         </span><br><span class="hljs-comment">--------------------------------------------------------------------------------------------------------------</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--------------------------------------------------usart_dr--------------------------------------------------</span><br><span class="hljs-comment">|BIT NAME                 |BIT POSITION   |REG_ACCESS                    |REG_KEY        |SET       |CLEAR     </span><br><span class="hljs-comment">|-------------------------|---------------|------------------------------|---------------|----------|----------</span><br><span class="hljs-comment">|dr                       |[7:0]          |RW                            |None           |0         |0         </span><br><span class="hljs-comment">--------------------------------------------------------------------------------------------------------------</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">**************************************************end usart**************************************************/</span><br><br><br><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> USART_MMR_V</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> USART_MMR_V</span><br><br><span class="hljs-keyword">module</span> usart_mmr<br>    #( <br>    <span class="hljs-keyword">parameter</span> ADDR_WIDTH     =    <span class="hljs-number">32</span>,<br>    <span class="hljs-keyword">parameter</span> DATA_WIDTH     =    <span class="hljs-number">32</span>,<br><span class="hljs-comment">//Reg address parameter define </span><br><span class="hljs-keyword">parameter</span> [ADDR_WIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] addr_usart_sr       =  <span class="hljs-number">&#x27;h0</span>,<br><span class="hljs-keyword">parameter</span> [ADDR_WIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] addr_usart_dr       =  <span class="hljs-number">&#x27;h4</span> ) <br><br>( <br><span class="hljs-keyword">input</span>                              userkey   ,<br><span class="hljs-keyword">input</span>                              lckey     ,<br><span class="hljs-keyword">input</span>                              clk       ,<br><span class="hljs-keyword">input</span>                              rstn      ,<br><span class="hljs-keyword">input</span>          [ADDR_WIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>]  p_addr    ,<br><span class="hljs-keyword">input</span>                              p_sel     ,<br><span class="hljs-keyword">input</span>                              p_enable  ,<br><span class="hljs-keyword">input</span>                              p_write   ,<br><span class="hljs-keyword">input</span>          [DATA_WIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>]  p_wdata   ,<br><span class="hljs-keyword">input</span>          [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]               p_strb    ,<br><span class="hljs-keyword">output</span>                             p_ready   ,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>     [DATA_WIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>]  p_rdata   ,<br><span class="hljs-keyword">output</span>                             p_slaverr ,<br><br><span class="hljs-comment">//The signal define of the USART_SR ,type &quot;RW&quot;</span><br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_pe,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_fe,<br><span class="hljs-keyword">input</span>                              I_usart_sr_ne,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_ore,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_idle,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_rxne,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_tc,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_txe,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_lbd,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>                         O_usart_sr_cts,<br><br><span class="hljs-comment">//The signal define of the USART_DR ,type &quot;RW&quot;</span><br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>     [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]               O_usart_dr_dr<br>);<br><br><span class="hljs-comment">//Write and read enable wire define </span><br><span class="hljs-keyword">wire</span>    wr_en; <br><span class="hljs-keyword">wire</span>    rd_en; <br><span class="hljs-keyword">wire</span>    wen_usart_sr; <br><span class="hljs-keyword">wire</span>    wen_usart_dr; <br><br><span class="hljs-comment">//Write enable assign for bus </span><br><span class="hljs-keyword">assign</span>   wr_en                = p_sel &amp; p_enable &amp; p_write; <br><span class="hljs-keyword">assign</span>   rd_en                = p_sel &amp; p_enable &amp; !p_write; <br><span class="hljs-keyword">assign</span>   wen_usart_sr         = wr_en &amp; (p_addr ==  addr_usart_sr); <br><span class="hljs-keyword">assign</span>   wen_usart_dr         = wr_en &amp; (p_addr ==  addr_usart_dr); <br><br><span class="hljs-comment">//define always write for reg usart_sr_pe / type-RW</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_pe &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_pe &lt;= p_wdata[<span class="hljs-number">0</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_fe / type-W(WriteOnly)</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_fe &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_fe &lt;= p_wdata[<span class="hljs-number">1</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_ore / type-RC(readclear)</span><br><span class="hljs-keyword">wire</span>rd_clr_usart_sr_ore;<br><span class="hljs-keyword">assign</span>rd_clr_usart_sr_ore = rd_en &amp; (p_addr == addr_usart_sr);<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_ore &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_ore &lt;= p_wdata[<span class="hljs-number">3</span>]; <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rd_clr_usart_sr_ore) <span class="hljs-keyword">begin</span><br>O_usart_sr_ore &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span> <br><br><span class="hljs-comment">//define always write for reg usart_sr_idle / type-W1C(Write1/auto-clear 0)</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_idle &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_idle &lt;= p_wdata[<span class="hljs-number">4</span>] ? <span class="hljs-number">1&#x27;b0</span> : O_usart_sr_idle;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_rxne / type-W0S(Write0/auto-set1)</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_rxne &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_rxne &lt;= (!p_wdata[<span class="hljs-number">5</span>]) ? <span class="hljs-number">1&#x27;b1</span> : O_usart_sr_rxne; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_tc / type-W1(WriteOnce)</span><br><span class="hljs-keyword">reg</span>    flag_w1_usart_sr_tc;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>flag_w1_usart_sr_tc &lt;= <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span> <br>flag_w1_usart_sr_tc &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span> <br><br><span class="hljs-keyword">wire</span> flag_w1_usart_sr_tc_write;<br><span class="hljs-keyword">assign</span> flag_w1_usart_sr_tc_write = wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>] &amp; flag_w1_usart_sr_tc;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_tc &lt;= <span class="hljs-number">1&#x27;h1</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flag_w1_usart_sr_tc_write) <span class="hljs-keyword">begin</span><br>O_usart_sr_tc &lt;= p_wdata[<span class="hljs-number">6</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_txe / type-WRS(WR/hardware update)</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_txe &lt;= <span class="hljs-number">1&#x27;h1</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_txe &lt;= p_wdata[<span class="hljs-number">7</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_lbd / type-RW</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_lbd &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">1</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_lbd &lt;= p_wdata[<span class="hljs-number">8</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_sr_cts / type-RW</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_sr_cts &lt;= <span class="hljs-number">1&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_sr &amp; p_strb[<span class="hljs-number">1</span>]) <span class="hljs-keyword">begin</span><br>O_usart_sr_cts &lt;= p_wdata[<span class="hljs-number">9</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//define always write for reg usart_dr_dr / type-RW</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn ) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">if</span>(!rstn) <span class="hljs-keyword">begin</span> <br>O_usart_dr_dr[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] &lt;= <span class="hljs-number">8&#x27;h0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wen_usart_dr &amp; p_strb[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>O_usart_dr_dr[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] &lt;= p_wdata[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//For the bus read for module USART</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span> <br>p_rdata = <span class="hljs-number">&#x27;b0</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">case</span>(p_addr)<br>addr_usart_sr : <span class="hljs-keyword">begin</span> <br>p_rdata[<span class="hljs-number">0</span>]           = O_usart_sr_pe;<br>p_rdata[<span class="hljs-number">1</span>]           = <span class="hljs-number">1&#x27;h0</span>;<br>p_rdata[<span class="hljs-number">2</span>]           = I_usart_sr_ne;<br>p_rdata[<span class="hljs-number">3</span>]           = O_usart_sr_ore;<br>p_rdata[<span class="hljs-number">4</span>]           = O_usart_sr_idle;<br>p_rdata[<span class="hljs-number">5</span>]           = O_usart_sr_rxne;<br>p_rdata[<span class="hljs-number">6</span>]           = O_usart_sr_tc;<br>p_rdata[<span class="hljs-number">7</span>]           = O_usart_sr_txe;<br>p_rdata[<span class="hljs-number">8</span>]           = O_usart_sr_lbd;<br>p_rdata[<span class="hljs-number">9</span>]           = O_usart_sr_cts;<br><span class="hljs-keyword">end</span> <br>addr_usart_dr : <span class="hljs-keyword">begin</span> <br>p_rdata[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]         = O_usart_dr_dr[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br><span class="hljs-keyword">end</span> <br><span class="hljs-keyword">default</span>: p_rdata = <span class="hljs-number">&#x27;b0</span>;<br><span class="hljs-keyword">endcase</span> <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <br>p_rdata = <span class="hljs-number">&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">wire</span> reg_map;<br><span class="hljs-keyword">assign</span> reg_map = <br>(p_addr ==  addr_usart_sr       ) |<br>(p_addr ==  addr_usart_dr       )  ;<br><br><span class="hljs-keyword">assign</span> p_slaverr = p_sel &amp; p_enable &amp; reg_map;<br><br><span class="hljs-keyword">assign</span> p_ready = p_enable;<br><br><span class="hljs-keyword">endmodule</span> <br><br></code></pre></td></tr></table></figure><p>其他类型</p><p>RS（读置位） </p><p>WC（写清）</p><p>W1T（写1翻转）</p><p>WRC</p><p>WSRC</p><p>WCRS</p><p>W1S</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="AXI4接口定义"><a href="#AXI4接口定义" class="headerlink" title="AXI4接口定义"></a>AXI4接口定义</h2><h3 id="AXI4-SLAVE"><a href="#AXI4-SLAVE" class="headerlink" title="AXI4-SLAVE"></a>AXI4-SLAVE</h3><p><strong>模块参数</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>C_S_AXI_ID_WIDTH</td><td>ID 信号的宽度</td></tr><tr><td>C_S_AXI_DATA_WIDTH</td><td>数据宽度</td></tr><tr><td>C_S_AXI_ADDR_WIDTH</td><td>地址宽度</td></tr></tbody></table><p><strong>通用</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>S_AXI_ACLK</td><td>时钟</td></tr><tr><td>S_AXI_ARESETN</td><td>复位信号，低电平复位</td></tr></tbody></table><p><strong>写地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_AWID</td><td>写地址ID，示例代码的 Slave 不支持重排序</td></tr><tr><td>input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_AWADDR</td><td>写地址</td></tr><tr><td>input wire [7 : 0] S_AXI_AWLEN</td><td>突发长度（Burst length），给出了突发中传输（Transfer）的数量</td></tr><tr><td>input wire [2 : 0] S_AXI_AWSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>input wire [1 : 0] S_AXI_AWBURST</td><td>突发类型，AWBURST 和 AWSIZE 决定了此处突发中每次传输的地址是如何计算的</td></tr><tr><td>input wire S_AXI_AWVALID</td><td>写地址有效</td></tr><tr><td>output wire S_AXI_AWREADY</td><td>写地址准备</td></tr></tbody></table><p>注：</p><p>S_AXI_AWLEN：实际传输次数为 S_AXI_AWLEN+ 1（AXI4支持最多256次传输）。</p><p>S_AXI_AWSIZE：定义单次传输的字节数（如 <code>0b010</code> 表示4字节，即32位）。</p><p>S_AXI_AWBURST：决定地址变化模式（固定地址、递增或回环）。</p><p><strong>写数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_WDATA</td><td>写数据</td></tr><tr><td>input wire [(C_S_AXI_DATA_WIDTH&#x2F;8)-1 : 0] S_AXI_WSTRB</td><td>写数据选通</td></tr><tr><td>input wire S_AXI_WLAST</td><td>写最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>input wire S_AXI_WVALID</td><td>写数据有效</td></tr><tr><td>output wire S_AXI_WREADY</td><td>写数据准备</td></tr></tbody></table><p><strong>写响应通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_BID</td><td>写响应的ID，由于本 Slave 不支持重排序，必须赋值为 S_AXI_AWID</td></tr><tr><td>output wire [1 : 0] S_AXI_BRESP</td><td>写响应，给出写事务的状态，示例代码中该信号恒为 2’b0</td></tr><tr><td>output wire S_AXI_BVALID</td><td>写响应有效</td></tr><tr><td>input wire S_AXI_BREADY</td><td>写响应准备</td></tr></tbody></table><p><strong>读地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_ARID</td><td>读地址ID，示例代码的 Slave 不支持重排序</td></tr><tr><td>input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_ARADDR</td><td>读地址</td></tr><tr><td>input wire [7 : 0] S_AXI_ARLEN</td><td>突发长度，给出了突发中传输的数量</td></tr><tr><td>input wire [2 : 0] S_AXI_ARSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>input wire [1 : 0] S_AXI_ARBURST</td><td>突发类型</td></tr><tr><td>input wire S_AXI_ARVALID</td><td>读地址有效</td></tr><tr><td>output wire S_AXI_ARREADY</td><td>读地址准备</td></tr></tbody></table><p><strong>读数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_RID</td><td>读ID，由于Slave 不支持重排序，必须赋值为 S_AXI_ARID</td></tr><tr><td>output wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_RDATA</td><td>读数据</td></tr><tr><td>output wire [1 : 0] S_AXI_RRESP</td><td>读响应，示例代码中该信号恒为 2’b0</td></tr><tr><td>output wire S_AXI_RLAST</td><td>读最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>output wire S_AXI_RVALID</td><td>读数据有效</td></tr><tr><td>input wire S_AXI_RREADY</td><td>读数据准备</td></tr></tbody></table><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>在代码设计中，需要修改，存储数据的部分</p><h3 id="AXI4-Master"><a href="#AXI4-Master" class="headerlink" title="AXI4-Master"></a>AXI4-Master</h3><p><strong>模块参数</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>C_M_AXI_ID_WIDTH</td><td>ID 信号的宽度</td></tr><tr><td>C_M_AXI_ADDR_WIDTH</td><td>数据宽度</td></tr><tr><td>C_M_AXI_DATA_WIDTH</td><td>地址宽度</td></tr><tr><td>C_M_AXI_BURST_LEN</td><td>突发长度</td></tr><tr><td>C_M_TARGET_SLAVE_BASE_ADDR</td><td>目的从机的基地址</td></tr></tbody></table><p><strong>通用</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>M_AXI_ACLK</td><td>时钟</td></tr><tr><td>M_AXI_ARESETN</td><td>复位信号，低电平复位</td></tr><tr><td>input wire  INIT_AXI_TXN</td><td>传输开始脉冲</td></tr><tr><td>output wire  TXN_DONE</td><td>传输结束断言</td></tr><tr><td>output reg  ERROR</td><td>错误信号</td></tr></tbody></table><p><strong>写地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_AWID</td><td>写地址ID</td></tr><tr><td>output wire [C_M_AXI_ADDR_WIDTH-1 : 0] M_AXI_AWADDR</td><td>写地址</td></tr><tr><td>output wire [7 : 0] M_AXI_AWLEN</td><td>突发长度（Burst length），给出了突发中传输（Transfer）的数量</td></tr><tr><td>output wire [2 : 0] M_AXI_AWSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>output wire [1 : 0] M_AXI_AWBURST</td><td>突发类型，AWBURST 和 AWSIZE 决定了此处突发中每次传输的地址是如何计算的</td></tr><tr><td>output wire  M_AXI_AWVALID</td><td>写地址有效</td></tr><tr><td>input wire  M_AXI_AWREADY</td><td>写地址准备</td></tr></tbody></table><p><strong>写数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_M_AXI_DATA_WIDTH-1 : 0] M_AXI_WDATA</td><td>写数据</td></tr><tr><td>output wire [C_M_AXI_DATA_WIDTH&#x2F;8-1 : 0] M_AXI_WSTRB</td><td>写数据选通</td></tr><tr><td>output wire  M_AXI_WLAST</td><td>写最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>output wire  M_AXI_WVALID</td><td>写数据有效</td></tr><tr><td>input wire  M_AXI_WREADY</td><td>写数据准备</td></tr></tbody></table><p><strong>写响应通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_BID</td><td>写响应的ID，由于本 Slave 不支持重排序，必须赋值为 S_AXI_AWID</td></tr><tr><td>input wire [1 : 0] M_AXI_BRESP</td><td>写响应，给出写事务的状态，示例代码中该信号恒为 2’b0</td></tr><tr><td>input wire  M_AXI_BVALID</td><td>写响应有效</td></tr><tr><td>output wire  M_AXI_BREADY</td><td>写响应准备</td></tr></tbody></table><p><strong>读地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_ARID</td><td>读地址ID，示例代码的 Slave 不支持重排序</td></tr><tr><td>output wire [C_M_AXI_ADDR_WIDTH-1 : 0] M_AXI_ARADDR</td><td>读地址</td></tr><tr><td>output wire [7 : 0] M_AXI_ARLEN</td><td>突发长度，给出了突发中传输的数量</td></tr><tr><td>output wire [2 : 0] M_AXI_ARSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>output wire [1 : 0] M_AXI_ARBURST</td><td>突发类型</td></tr><tr><td>output wire  M_AXI_ARVALID</td><td>读地址有效</td></tr><tr><td>input wire  M_AXI_ARREADY</td><td>读地址准备</td></tr></tbody></table><p><strong>读数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_RID</td><td>读ID，由于Slave 不支持重排序，必须赋值为 S_AXI_ARID</td></tr><tr><td>input wire [C_M_AXI_DATA_WIDTH-1 : 0] M_AXI_RDATA</td><td>读数据</td></tr><tr><td>input wire [1 : 0] M_AXI_RRESP</td><td>读响应，示例代码中该信号恒为 2’b0</td></tr><tr><td>input wire  M_AXI_RLAST</td><td>读最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>input wire  M_AXI_RVALID</td><td>读数据有效</td></tr><tr><td>output wire  M_AXI_RREADY</td><td>读数据准备</td></tr></tbody></table><p> <strong>参考</strong></p><p><a href="https://blog.csdn.net/moon9999/article/details/131146296#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BA%86%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E8%AF%BB%E5%86%99%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%8C%85%E6%8B%ACread-writeaccess%E3%80%81modifiedWriteValue%E5%92%8CreadAction%EF%BC%8C%E5%B9%B6%E5%88%97%E4%B8%BE%E4%BA%8625%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8%E8%A1%8C%E4%B8%BA%E5%8F%8A%E5%85%B6%E5%9C%A8RAL%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E6%94%AF%E6%8C%81%E6%83%85%E5%86%B5%E3%80%82,%E6%AD%A4%E5%A4%96%EF%BC%8C%E8%BF%98%E6%8F%90%E4%BE%9B%E4%BA%86%E5%85%B3%E9%94%AE%E5%AF%84%E5%AD%98%E5%99%A8%E7%B1%BB%E5%9E%8B%E7%9A%84RTL%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%A6%82RW%E3%80%81WO%E3%80%81RO%E3%80%81W1%E3%80%81W1C%E3%80%81RC%E3%80%81RS%E3%80%81WRC%E3%80%81WRS%E3%80%81WC%E3%80%81WS%E3%80%81WSRC%E5%92%8CWCRS%E7%AD%89%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%A1%AC%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">【前端验证】通关寄存器与ral_model —— 25种常用寄存器类型全览_寄存器属性-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>IC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>低功耗设计知识</title>
    <link href="/2025/08/22/%E6%95%B0%E5%AD%97IC_%E4%BD%8E%E5%8A%9F%E8%80%97%E8%AE%BE%E8%AE%A1/"/>
    <url>/2025/08/22/%E6%95%B0%E5%AD%97IC_%E4%BD%8E%E5%8A%9F%E8%80%97%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>低功耗设计</p><span id="more"></span><h1 id="低功耗设计"><a href="#低功耗设计" class="headerlink" title="低功耗设计"></a>低功耗设计</h1><h2 id="功耗分类"><a href="#功耗分类" class="headerlink" title="功耗分类"></a>功耗分类</h2><p>分为动态功耗和静态功耗</p><h3 id="动态功耗"><a href="#动态功耗" class="headerlink" title="动态功耗"></a>动态功耗</h3><p>（1）switch power ：输出翻转在负载电容上充放电引起的功耗</p><p>​                                                 $ P_{sp} &#x3D; ACV_{DD}^2f $</p><p>（2）short current power ：输入变化导致输出变化，在漏源之间形成短暂通路 </p><p>​                                                 $ P_{su} &#x3D; AI_{su}V_{DD} $</p><h3 id="静态功耗"><a href="#静态功耗" class="headerlink" title="静态功耗"></a>静态功耗</h3><p>电路不工作时，CMOS并未完全关断</p><p>（1）漏源之间的亚阈值电流</p><p>（2）有源衬底之间的反向漏电流</p><p>​                                                  $ P &#x3D; A(I_{bias} + I_{lea})V_{DD} $</p><h2 id="影响功耗的因素"><a href="#影响功耗的因素" class="headerlink" title="影响功耗的因素"></a>影响功耗的因素</h2><table><thead><tr><th>因素</th><th>影响</th><th>解决方法</th></tr></thead><tbody><tr><td>供电电压</td><td>动态功耗，静态功耗</td><td></td></tr><tr><td>工艺</td><td>静态功耗</td><td></td></tr><tr><td>环境（如温度）</td><td>动态功耗，静态功耗</td><td></td></tr><tr><td>工作频率</td><td>动态功耗</td><td></td></tr><tr><td>翻转因子</td><td>动态功耗</td><td></td></tr><tr><td>翻转电容</td><td>动态功耗</td><td></td></tr></tbody></table><h2 id="低功耗技术"><a href="#低功耗技术" class="headerlink" title="低功耗技术"></a>低功耗技术</h2><p>（1）时钟门控 Clock Gate</p><p>（2）电源关断 Power Gate</p><p>​         通过PMU模块控制Power-Switch Cells或者模拟部分的LDO，DC-DC，关断不工作的电源域。</p><p>​         需要Isolation cells做钳位处理，以免下电区的输出影响上电区。插入Retention Register Cells保存下电前的数据，供再次上电使用。</p><p>（3）多电源域 Multi Vdd</p><p>​         对于跨不同电压的信号需要插入Level-Shifer Cells，</p><p>（4）多电压阈值 Multi Vt</p><p>​         Multiple-Vt Library Cells 多阈值cell；对翻转频率要求不高的路径，采用高Vt cell，降低漏电流。如果速度要求很高，这个方法是不可行的。</p><p>（5）动态电压频率&#x2F;自适应电压</p><h2 id="低功耗编码"><a href="#低功耗编码" class="headerlink" title="低功耗编码"></a>低功耗编码</h2><p>（1）自动时钟门控编码</p><p><img src="/../img/article_img/new/image-20250823103958852.png" alt="image-20250823103958852"></p><p>（2）Mem数量与访问次数，mem选型，regfile 和mem选择，mem分块（例如使用高地址片选，低地址寻址，分为多块mem）</p><p><img src="/../img/article_img/new/image-20250823104941187.png" alt="image-20250823104941187"></p><p>（3）操作数隔离，例如运算单元，在不使用时，将输入latch，使得运算单元的输出保持</p><p><img src="/../img/article_img/new/image-20250823105604863.png" alt="image-20250823105604863"></p><p>（4）超前计算，例如比较器，比较最高位，如果高位已经不同了，那么后面的bit不需要再比较</p><p><img src="/../img/article_img/new/image-20250823110852245.png" alt="image-20250823110852245"></p><p>（5）状态机编码，对于需要频繁切换的状态，避免多bit同时翻转，格雷码；状态较少使用独热码</p><p>（6）降低频繁开关信号的逻辑级数，重排if else</p><p>（7）减少Glitch，优化逻辑顺序或者插入pipline</p><p>（8）复位信号不使用，异步复位大于同步复位功耗</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/Holden_Liu/article/details/118250226">低功耗验证 (一) CMOS基础，功耗分类，低功耗方法-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>IC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PCIE知识</title>
    <link href="/2025/07/15/%E6%95%B0%E5%AD%97IC_PCIE/"/>
    <url>/2025/07/15/%E6%95%B0%E5%AD%97IC_PCIE/</url>
    
    <content type="html"><![CDATA[<p>PCIE</p><span id="more"></span><h1 id="PCIE"><a href="#PCIE" class="headerlink" title="PCIE"></a>PCIE</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_43275558/article/details/147570254">深入理解 PCIe 协议中 BDF（Bus&#x2F;Device&#x2F;Function）分配与管理机制_pcie bdf分配-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>IC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UVM知识笔记</title>
    <link href="/2025/05/20/%E6%95%B0%E5%AD%97IC%E2%80%94%E2%80%94UVM_%E8%BF%9B%E9%98%B6/"/>
    <url>/2025/05/20/%E6%95%B0%E5%AD%97IC%E2%80%94%E2%80%94UVM_%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<p>UVM知识笔记</p><span id="more"></span><h1 id="UVM"><a href="#UVM" class="headerlink" title="UVM"></a>UVM</h1><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><p><strong>时钟块</strong></p><p>在 posedge clk 后 1ns 采样 input 信号</p><p>在 posedge clk 后 2ns 驱动 output 信号</p><p>保证：DUT 始终采样到“前一周期”的数据，testbench 始终看到“当前周期”的 DUT 输出</p><p>给 DUT 充足时间生成输出，Testbench 采样稳定值（input delay）</p><p>保证 Testbench 的驱动不会在 DUT 时钟敏感路径上竞争（output delay）</p><p><strong>断言控制</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">default</span> <span class="hljs-keyword">disable</span> <span class="hljs-keyword">iff</span> (!presetn); <span class="hljs-comment">//这里的iff是if and only if的意思</span><br></code></pre></td></tr></table></figure><p><strong>APB VIP的接口</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> SVK_APB_IF__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> SVK_APB_IF__SV</span><br><br><span class="hljs-keyword">interface</span> svk_apb_if();<br>    <span class="hljs-keyword">logic</span>                             pclk;<br>    <span class="hljs-keyword">logic</span>                             presetn;<br><br>    <span class="hljs-keyword">logic</span> [`SVK_APB_ADDR_WIDTH -<span class="hljs-number">1</span> :<span class="hljs-number">0</span>] paddr;<br>    <span class="hljs-keyword">logic</span>                             psel;<br>    <span class="hljs-keyword">logic</span> [`SVK_APB_DATA_WIDTH -<span class="hljs-number">1</span> :<span class="hljs-number">0</span>] pwdata;<br>    <span class="hljs-keyword">logic</span> [`SVK_APB_DATA_WIDTH -<span class="hljs-number">1</span> :<span class="hljs-number">0</span>] prdata;<br>    <span class="hljs-keyword">logic</span>                             penable;<br>    <span class="hljs-keyword">logic</span>                             pwrite;<br>    <span class="hljs-keyword">logic</span>                             pready;<br>    <span class="hljs-keyword">logic</span>                             pslverr;<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">2</span>                  :<span class="hljs-number">0</span>]     pprot;<br>    <span class="hljs-keyword">logic</span> [`SVK_APB_STRB_WIDTH -<span class="hljs-number">1</span> :<span class="hljs-number">0</span>] pstrb;<br>    <span class="hljs-keyword">logic</span> [`SVK_APB_USER_WIDTH -<span class="hljs-number">1</span> :<span class="hljs-number">0</span>] puser;<br><br><br>    <span class="hljs-keyword">clocking</span> mst_cb @(<span class="hljs-keyword">posedge</span> pclk);<br>        <span class="hljs-keyword">default</span> <span class="hljs-keyword">input</span> #<span class="hljs-number">0</span><span class="hljs-variable">.1ns</span> <span class="hljs-keyword">output</span> #<span class="hljs-number">0</span><span class="hljs-variable">.1ns</span>;<br><br>        <span class="hljs-keyword">output</span> paddr;<br>        <span class="hljs-keyword">output</span> psel;<br>        <span class="hljs-keyword">output</span> pwdata;<br>        <span class="hljs-keyword">input</span>  prdata;<br>        <span class="hljs-keyword">output</span> penable;<br>        <span class="hljs-keyword">output</span> pwrite;<br>        <span class="hljs-keyword">input</span>  pready;<br>        <span class="hljs-keyword">input</span>  pslverr;<br>        <span class="hljs-keyword">output</span> pprot;<br>        <span class="hljs-keyword">output</span> pstrb;<br>        <span class="hljs-keyword">output</span> puser;<br><br>    <span class="hljs-keyword">endclocking</span><br><br>    <span class="hljs-keyword">clocking</span> slv_cb @(<span class="hljs-keyword">posedge</span> pclk);<br>        <span class="hljs-keyword">default</span> <span class="hljs-keyword">input</span> #<span class="hljs-number">0</span><span class="hljs-variable">.1ns</span> <span class="hljs-keyword">output</span> #<span class="hljs-number">0</span><span class="hljs-variable">.1ns</span>;<br>        <span class="hljs-keyword">input</span>  paddr;<br>        <span class="hljs-keyword">input</span>  psel;<br>        <span class="hljs-keyword">input</span>  pwdata;<br>        <span class="hljs-keyword">output</span> prdata;<br>        <span class="hljs-keyword">input</span>  penable;<br>        <span class="hljs-keyword">input</span>  pwrite;<br>        <span class="hljs-keyword">output</span> pready;<br>        <span class="hljs-keyword">output</span> pslverr;<br>        <span class="hljs-keyword">input</span>  pprot;<br>        <span class="hljs-keyword">input</span>  pstrb;<br>        <span class="hljs-keyword">input</span>  puser;<br>    <span class="hljs-keyword">endclocking</span><br><br>    <span class="hljs-keyword">clocking</span> mon_cb @(<span class="hljs-keyword">posedge</span> pclk);<br>        <span class="hljs-keyword">default</span> <span class="hljs-keyword">input</span> #<span class="hljs-number">0</span><span class="hljs-variable">.1ns</span> <span class="hljs-keyword">output</span> #<span class="hljs-number">0</span><span class="hljs-variable">.1ns</span>;<br><br>        <span class="hljs-keyword">input</span>  paddr;<br>        <span class="hljs-keyword">input</span>  psel;<br>        <span class="hljs-keyword">input</span>  pwdata;<br>        <span class="hljs-keyword">input</span>  prdata;<br>        <span class="hljs-keyword">input</span>  penable;<br>        <span class="hljs-keyword">input</span>  pwrite;<br>        <span class="hljs-keyword">input</span>  pready;<br>        <span class="hljs-keyword">input</span>  pslverr;<br>        <span class="hljs-keyword">input</span>  pprot;<br>        <span class="hljs-keyword">input</span>  pstrb;<br>        <span class="hljs-keyword">input</span>  puser;<br><br>    <span class="hljs-keyword">endclocking</span><br><br>    <span class="hljs-keyword">modport</span> mst_mp(<span class="hljs-keyword">clocking</span> mst_cb);<br>    <span class="hljs-keyword">modport</span> slv_mp(<span class="hljs-keyword">clocking</span> slv_cb);<br>    <span class="hljs-keyword">modport</span> mon_mp(<span class="hljs-keyword">clocking</span> mon_cb);<br><br><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">disable</span> <span class="hljs-keyword">iff</span>(!presetn);<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">clocking</span> mon_cb;<br><br>    a1:<span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span>((!psel &amp; !penable) |=&gt; !(psel &amp; penable));<br>    a2:<span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span>((psel &amp; !penable) |=&gt; (psel &amp; penable));<br>    a3:<span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span>(!(!psel &amp; penable));<br>    a4:<span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span>((psel &amp; penable &amp; !pready) |=&gt; <span class="hljs-built_in">$stable</span>(&#123;psel,penable,pwdata,pwrite,pprot,pstrb&#125;));<br>    a5:<span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span>((psel &amp; penable &amp; pready) |=&gt; !penable);<br>    a6:<span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span>((psel) |-&gt; !<span class="hljs-built_in">$isunknown</span>(&#123;penable,pwdata,pwrite,pprot,pstrb,pready&#125;));<br>    a7:<span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span>(!<span class="hljs-built_in">$isunknown</span>(&#123;psel,penable&#125;));<br><br><span class="hljs-keyword">endinterface</span><br><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>$stable(signal) 断言专用的系统函数，在当前时钟周期与上一个周期的取值一致（没变），则返回 true，否则返回 false。</p><p>与<code> $rose</code> &#x2F; <code>$fell</code> 区别</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>$stable(signal)</code></td><td>检查信号是否保持不变</td></tr><tr><td><code>$rose(signal)</code></td><td>检查信号是否从 0 跳变为 1（上升沿）</td></tr><tr><td><code>$fell(signal)</code></td><td>检查信号是否从 1 跳变为 0（下降沿）</td></tr></tbody></table><p>$isunknown(signal) 会判断 <code>signal</code> 是否包含 未知值（也就是 <code>&#39;x&#39;</code> 或 <code>&#39;z&#39;</code>），如果是返回1，否则返回0</p><p>!$isunknown(signal) 检查 <code>signal</code> 是否 全是 0&#x2F;1，没有任何未知值</p><p>普通接口 (<code>interface</code>)</p><ul><li>是对一组 相关信号的打包。</li><li>可以用于 DUT（Design Under Test）和 TB（Testbench）之间的数据交互。</li><li>在 module 里直接 <code>import</code> 和 <code>connect</code> 接口即可访问所有信号。</li></ul><p>虚拟接口 (<code>virtual interface</code>)</p><ul><li>是接口的 句柄（指针），不是实际的信号本体。</li><li>声明为 <code>virtual</code> 是为了能在 类中使用接口（如 UVM 的 driver、monitor、sequencer 等类）。</li><li><code>virtual</code> 是必须的关键词，因为 SystemVerilog 中 类不允许直接使用非虚拟接口。</li></ul><h2 id="reg-model"><a href="#reg-model" class="headerlink" title="reg_model"></a>reg_model</h2><p>uvm_reg_field：这是寄存器模型中的最小单位</p><p>uvm_reg：它比uvm_reg_field高一个级别，一个寄存器中至少包含一个uvm_reg_field</p><p>uvm_reg_block：在其中可以加入许多的uvm_reg，也可以加入其他的uvm_reg_block，一个寄存器模 型中至少包含一个uvm_reg_block</p><p>uvm_reg_map：每个寄存器在加入寄存器模型时都有其地址，uvm_reg_map就是存储这些地址，并将其转换成可以访问的物理地址（因为加入寄存器模型中的寄存器地址一般都是偏移地址，而不是绝对地址）。</p><p>当寄存器模型使用前门访问方式来实现读或写操作时，uvm_reg_map就会将地址转换成绝对地址，启动一个读或写的sequence，并将读或写的结果返回。在每个reg_block内部，至少有一个（通常也只有一个）uvm_reg_map</p><p>uvm_reg 定义</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> NN_ACC_ORDER <span class="hljs-keyword">extends</span> uvm_reg;<br>    `uvm_object_utils(NN_ACC_ORDER)<br><br>    <span class="hljs-keyword">rand</span> uvm_reg_field ORDER_;<br><br>    <span class="hljs-comment">//Function : build </span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build();<br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.ORDER_</span> = uvm_reg_field::type_id::create(<span class="hljs-string">&quot;ORDER_&quot;</span>);<br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.ORDER_</span><span class="hljs-variable">.configure</span>(<span class="hljs-keyword">this</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;RW&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">&#x27;d0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//配置宽度，起始位，读写权限，是否易失，默认值，是否有复位，是否可以随机化，是否可以单独存取</span><br>    <span class="hljs-keyword">endfunction</span><br><br>    <span class="hljs-comment">//Function new</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;NN_ACC_ORDER&quot;</span>);<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, <span class="hljs-number">32</span>, build_coverage(UVM_NO_COVERAGE));<br>    <span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>default_map</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> NN_ACC_block <span class="hljs-keyword">extends</span> uvm_reg_block;<br>    `uvm_object_utils(NN_ACC_block)<br><br>    <span class="hljs-keyword">rand</span> NN_ACC_ORDER              ORDER                    ;<br><br>    <span class="hljs-comment">//Function : new</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;NN_ACC_block&quot;</span>);<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, UVM_NO_COVERAGE);<br>    <span class="hljs-keyword">endfunction</span><br><br>    <span class="hljs-comment">//Function : build</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build();<br>        <span class="hljs-comment">//create</span><br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.ORDER</span>                     = NN_ACC_ORDER::type_id::create(<span class="hljs-string">&quot;ORDER&quot;</span>);<br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.ORDER</span><span class="hljs-variable">.configure</span>(<span class="hljs-keyword">this</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//这个函数的主要功能是指定寄存器进行后门访问操作时的路径。其第一个参数是此寄存器所在uvm_reg_block的指针，这里填写this，第二个参数是reg_file的指针（7.4.2节将会介绍reg_file的概念）这里暂时填写null</span><br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.ORDER</span><span class="hljs-variable">.build</span>(); <span class="hljs-comment">//手动调用build函数实例化</span><br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.ORDER</span><span class="hljs-variable">.add_hdl_path_slice</span>(<span class="hljs-string">&quot;O_order_&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">//实现了寄存器模型与DUT各个寄存器的路径映射，用于后门访问</span><br><br>        <span class="hljs-comment">//define default map and add reg/regfiles</span><br>        <span class="hljs-comment">//基地址，多少Byte，大端小端</span><br>        default_map= create_map(<span class="hljs-string">&quot;default_map&quot;</span>, <span class="hljs-number">&#x27;h0</span>, <span class="hljs-number">4</span> UVM_BIG_ENDIAN, <span class="hljs-number">1</span>);<br>        default_map<span class="hljs-variable">.add_reg</span>(ORDER, <span class="hljs-number">&#x27;h0</span>, <span class="hljs-string">&quot;RW&quot;</span>);<br>        <span class="hljs-comment">//uvm_reg_map的作用是存储所有寄存器的地址，因此必须将实例化的寄存器加入default_map中，否则无法进行前门访问操作。</span><br>        lock_model();<br><br>    <span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">endclass</span> : NN_ACC_block<br></code></pre></td></tr></table></figure><h2 id="adapter"><a href="#adapter" class="headerlink" title="adapter"></a>adapter</h2><p>寄存器模型的前门操作</p><p>无论是读或写，寄存器模型都会通过sequence产生一个 uvm_reg_bus_op 的变量，此变量中存储着操作类型（读还是写）和操作的地址，如果是写操作，还会有要写入的数据。此变量中的信息要经过一个转换器（adapter）转换后交给bus_sequencer，随后交给bus_driver，由bus_driver实现最终的前门访问读写操作。因此，必须要定义好一个转换器。</p><p>一个转换器要定义好两个函数，一是reg2bus，其作用为将寄存器模型通过sequence发出的uvm_reg_bus_op型的变量转换成 bus_sequencer能够接受的形式，二是bus2reg，其作用为当监测到总线上有操作时，它将收集来的transaction转换成寄存器模型能够接受的形式，以便寄存器模型能够更新相应的寄存器的值</p><p>集成寄存器模型</p><p>定义两个成员变量，一是reg_model，另外一个就是 reg_sqr_adapter。将所有用到的类在build_phase中实例化。在实例化后reg_model还要做四件事：第一是调用configure函数。第二是调用build函数，将所有的寄存器实例化。第三是调用lock_model函数，调用此函数后，reg_model中就不能再加入新的寄存器了。第四是调用reset函数，如果不调用此函数，那么reg_model中所有寄存器的值都是0，调用此函数后，所有寄存器的值都将变为设置的复位值。 </p><p>寄存器模型的前门访问操作最终都将由uvm_reg_map完成，因此在connect_phase中，需要将转换器和bus_sequencer通过 set_sequencer函数告知reg_model的default_map，并将default_map设置为自动预测状态。</p><p>对于寄存器，寄存器模型提供了两个基本的任务：read和write。</p><p>代码示例</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//aaa</span><br><br></code></pre></td></tr></table></figure><h2 id="predictor"><a href="#predictor" class="headerlink" title="predictor"></a>predictor</h2><p>当 DUT 收到一个寄存器写指令，寄存器模型本身是不知道 DUT 有没有真正完成写入的，而是靠 <code>predictor</code> 来：</p><ol><li>监听 DUT 实际发生的 读写事务（通常是 monitor 捕获到的）。</li><li>根据事务内容 推测寄存器模型中相应寄存器的值变化。</li><li>更新模型的镜像值（mirror），保持模型与 DUT 行为一致。</li></ol><p>举例说明</p><p>你发了一个写寄存器的操作：写 <code>0x55</code> 到 <code>CTRL_REG</code>。<br><code>driver</code> 把这个数据送给 DUT。<br><code>monitor</code> 捕获这个事务，并送给 <code>predictor</code>。<br><code>predictor</code> 调用 <code>reg_model.predict()</code>，告诉寄存器模型：“我刚刚看到你被写入了 <code>0x55</code>。”<br><code>reg_model</code> 的镜像值就更新为 <code>0x55</code>，不会等额外的 read-back 确认。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//简化示意</span><br>uvm_reg_predictor <span class="hljs-variable">#(apb_transaction)</span> predictor;<br><br>predictor = uvm_reg_predictor<span class="hljs-variable">#(apb_transaction)::type_id::create(&quot;predictor&quot;, this)</span>;<br>predictor<span class="hljs-variable">.map</span>     = regmodel<span class="hljs-variable">.default_map</span>;<br>predictor<span class="hljs-variable">.adapter</span> = reg_adapter;<br>monitor<span class="hljs-variable">.ap</span><span class="hljs-variable">.connect</span>(predictor<span class="hljs-variable">.bus_in</span>);  <span class="hljs-comment">// 将monitor输出连接到predictor</span><br><br></code></pre></td></tr></table></figure><p>set_auto_predict(1) 是自动更新模型的镜像值，只是假设成功了，并不是根据DUT的行为更新的</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">rgm<span class="hljs-variable">.set_auto_predict</span>()<br></code></pre></td></tr></table></figure><p>port类型的问题，需要总结一下</p>]]></content>
    
    
    <categories>
      
      <category>UVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AXI4协议</title>
    <link href="/2025/04/06/%E6%95%B0%E5%AD%97IC_AXI4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2025/04/06/%E6%95%B0%E5%AD%97IC_AXI4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>AXI4协议</p><span id="more"></span><h1 id="AXI4协议"><a href="#AXI4协议" class="headerlink" title="AXI4协议"></a>AXI4协议</h1><p>AXI总线作为一种总线，可以挂载若干个主设备（master）和从设备（slave），AXI总线协议定义了主设备和从设备之间如何进行通信。</p><p>主设备可以向从设备发起读事务（Read Transaction）和写事务（Write Transaction），从设备只能被动接受主设备发起的请求并作出响应。</p><p>AXI4总线协议支持以下三种类型的<strong>接口</strong>（Interface）：</p><ol><li>AXI4（有时候也叫AXI4-full）：高性能存储映射接口，数据位宽可以是 32,64,128,256,512,1024bits，最大256突发传输，地址位宽可以是64bits &#x2F; 32bits</li><li>AXI4-Lite：简化版的AXI4接口，用于较少数据量的存储映射通信，数据位宽32bits，地址位宽时32bits</li><li>AXI4-Steam：用于高速数据流传输，非存储映射接口</li></ol><p>（所谓存储映射，就是主设备访问从设备时需要给出访问的地址，即从设备是对应一段内存空间地址的，和IO统一编址类似）</p><p>AXI4-full接口支持突发传输，主要用于处理器访问存储器等需要指定地址的高速数据传输场景。AXI4-Lite接口为外设提供单个数据传输，主要用于访问一些低速外设中的寄存器。而AXI-Steam接口则向FIFO一样，数据传输时不需要地址，在主从设备之间直接连续读写数据，主要用于如视频、高速AD、PCIe、DMA接口等需要高速数据传输的场合。</p><p>AXI4-Full 接口和 Lite 接口的一个不同点在于，前者支持 Transaction Identififiers，也就是给每个读&#x2F;写事务赋予一个 ID，具有相同 ID 的事务的顺序不能打乱，不同 ID 的事务的顺序可以打乱（即重排序），这个东西的作用是即使当前还有事务没有完成，Master 可以发出新事务（新事物的ID和未完成事务的ID要不一样），可以提高系统性能。</p><h2 id="AXI4-full"><a href="#AXI4-full" class="headerlink" title="AXI4-full"></a>AXI4-full</h2><p>详细接口设计见设计文档。</p><p><a href="https://icjj.github.io/icer/post/amba5-axi-%E5%8D%8F%E8%AE%AE%E7%BF%BB%E8%AF%91/">AMBA5 AXI 协议翻译 | 程建军的博客 | ChengJianjun Blog</a></p><p>AXI4接口由五个独立的通道构成：</p><ol><li>读地址</li><li>读数据</li><li>写地址</li><li>写数据</li><li>写响应</li></ol><h2 id="AXI的握手机制"><a href="#AXI的握手机制" class="headerlink" title="AXI的握手机制"></a>AXI的握手机制</h2><p>在AXI协议中，请求的发起方是Master，接受方是Slave。</p><p>在每个通道的数据传输控制都是通过主从间的握手机制实现的，具体由两个关键信号完成。</p><ul><li><p>VALID：由发送方驱动，表示数据、地址或者控制信息已经准备就绪，并且相关信号已经稳定。<strong>VALID信号必须保持高电平，直到数据传输完成</strong>。</p></li><li><p>READY：由接收方驱动，表示接收方可以接收数据。READY信号可以在VALID之前或之后拉高。</p></li></ul><p>当VALID和READY同时为高时，握手成功，数据在这一拍完成传输。</p><p>握手机制有效解决了发送方和接收方速率不一致的问题，确保了数据传输的可靠性。</p><p><strong>注意</strong></p><p>协议中指出，VALID和READY信号的先后顺序，有三种情况，</p><ul><li>VALID先拉高，READY后拉高，这种情况，READY基于VALID条件，握手成功后，READY就拉低</li><li>READY先拉高，VALID后拉高，这种情况，READY不基于VALID条件，只要slave端可以接收请求，READY就拉高，此时当VALID拉高后，只需要一拍，就可以握手成功。</li><li>VALID，READY同时拉高，暂无。</li></ul><h2 id="突发传输"><a href="#突发传输" class="headerlink" title="突发传输"></a>突发传输</h2><p>对于AXI4-Full接口，一次写事务中，Master发出一个地址后，可以连续发出多个数据，Slave可以从该地址开始连续写多个地址处的数据，这便是所谓的突发传输。读事务同理。</p><p><strong>好处</strong></p><ul><li>提高总线利用率：减少请求通路带宽，在等待数据返回期间，也能继续发起新的请求</li><li>符合内存特性，简化硬件设计：如读连续地址直接发INCR，读cacheline直接发WRAP，轮询FIOFO用FIXED</li></ul><p>三种突发类型：</p><ul><li><strong>FIXED（0b00）</strong><br>每次传输的地址保持不变，适用于重复访问同一位置（如写入FIFO）。</li><li><strong>INCR（0b01）</strong> (incrementing)<br>地址线性递增，每次增加值为 <strong>AxSIZE</strong> 定义的字节数（如AxSIZE&#x3D;4字节，地址+4）。此时，给出的地址必须是对齐的。<br>适用于顺序访问数据块（如内存读写）。</li><li><strong>WRAP（0b10）</strong>(wrapping)<br>地址递增，但达到特定边界时回绕到起始地址。<br>常用于缓存行填充（Cache Line Fill），需满足：边界地址 &#x3D; 起始地址 + (传输次数 × 字节数)；传输次数必须是2的幂（如4、8次）。根据起始地址和传输大小，可以计算出一个 lower address 和 upper address，Wrapping Burst 下每次传输地址的计算和 Incrementing Burst 是相似的，除了当地址增加到 upper address 时，下次传输的地址需要回落到 lower address 。</li></ul><p><img src="/../img/article_img/new/image-20250921173010564.png" alt="image-20250921173010564"></p><p>非对齐地址传输，一种方法是master处理，写的时候先产生对齐地址，使用strb完成正确传输。另一种方法就是上述图片中所述，丢掉几个数据。</p><p>在AXI4协议中，一个突发传输（burst transfer）不能跨越这个4KB的边界，这是为了避免一个突发事务访问两个不同的slave设备，因为每个slave设备通常是4KB对齐的。如果一个突发传输跨越了4KB边界，可能会导致数据被错误地写入到另一个slave设备，从而引发传输错误。1K为2的10次方</p><h2 id="交易标识符-ID"><a href="#交易标识符-ID" class="headerlink" title="交易标识符 ID"></a>交易标识符 ID</h2><p>AXI交易标识符ID，主机用这些ID来判别必须按顺序返回的交易。</p><p>同一ID的交易必须按顺序返回，不同ID的交易可以乱序 。</p><p>AXI通过使用ID，主机可以不等待一笔交易完成就发起多笔交易。起到提升系统性能的作用，实现多笔交易的并行处理。</p><p>从机需要返回合适的BID或者RID来响应主机的ID。</p><p>有以下几个ID信号：写地址ID，写数据ID（只有AXI3，AXI4删除），写响应ID，读地址ID，读响应ID</p><h2 id="OutStanding"><a href="#OutStanding" class="headerlink" title="OutStanding"></a>OutStanding</h2><p><strong>不需要等待前一笔传输完成就可以发送下一笔操作</strong>。AXI因为是通道分离的所以master不需要等待前一笔操作A响应完成就可以发送下一笔操作请求B，这样可以有效提升通路利用率，提升系统性能</p><p>outstanding 就是发出去的地址数量，未处理的地址可以先存放在AXI总线的缓存中，等完成一次传输事务之后，无需再握手传输地址，即可进行下一次的数据传输。所以 outstanding 的本质是为了实现数据传输的pipeline，outstanding 能力即AXI4 Master 不需要等到response 就可以持续发写命令的个数。</p><p><img src="/../img/article_img/new/image-20250922141732787.png" alt="image-20250922141732787"></p><p>outstanding提高性能原理参考如下：</p><p><a href="https://zhuanlan.zhihu.com/p/643863702">(49 封私信) 深入理解AMBA总线（十七）AXI是如何提高性能的 - 知乎</a></p><h2 id="乱序-out-of-order传输"><a href="#乱序-out-of-order传输" class="headerlink" title="乱序 out of order传输"></a>乱序 out of order传输</h2><p>乱序传输：表示当有多个事务在传输时，有的事务可能先准备好，因此可以先发送在总线上，通过ID号来区分数据和响应来自哪一个事务，乱序指得是事务乱序，而不是说的master，即多个不同master可以发起多个不同的事务，单个master也可以发起多个不同的事务</p><p>说明：</p><p>不同事务的AxID如果一致，那么这些事务就不能实现out of order，只能进行顺序完成。</p><p>如果不同事务AxID不同，那么这些事务之间可以乱序。那么不同AxID事务的数据，对于AXI读来说，如何判断返回的数据属于哪个事务呢，是通过RID来进行匹配的，也就是说，在完成乱序传输的时候，需要RID和ARID保持一致，以标识不同事务的数据</p><p>那么对于实际情况来说，在实际传输中，可能有的事务AxID是不同的，有的是相同的，这是如何解决的？答：对于ID相同的就顺序完成，对于ID不同的可以乱序。</p><p>特殊的写乱序：在AXI4中取消了WID，所以写地址和写数据的顺序必须一致</p><p>乱序和交织通常都是一起实现的</p><p><img src="/../img/article_img/new/image-20250922141842824.png" alt="image-20250922141842824"></p><p>下图为同ID保序场景</p><p><img src="/../img/article_img/new/image-20250922141925083.png" alt="image-20250922141925083"></p><h2 id="交织interleaving-传输"><a href="#交织interleaving-传输" class="headerlink" title="交织interleaving 传输"></a>交织interleaving 传输</h2><p>交织传输：表示实现不同transaction中的beat的交替传输，但同一transaction的beat是需要按照顺序进行传输的， AXI4不再支持写交织。(依然需要根据ID号来判断数据属于哪个事务)</p><p>例如事务A指令为A，数据是a0，a1，a2,事务B指令是B，数据是b0，b1，b2,</p><p>支持交织数据总线数据顺序就可以是a0，b0，a1，b1，a2，b2(或者其他顺序)</p><p>不支持交织数据总线数据顺序就只能是a0，a1，a2，b0，b1，b2或者b0，b1，b2，a0，a1，a2</p><h2 id="硬件实现思路"><a href="#硬件实现思路" class="headerlink" title="硬件实现思路"></a>硬件实现思路</h2><p>以读数据为例：</p><p>outstanding，乱序&amp;交织，同ID保序的逐步实现</p><img src="../img/article_img/new/image-20250922145337372.png" alt="image-20250922145337372"  /><img src="../img/article_img/new/image-20250922145436202.png" alt="image-20250922145436202"  /><img src="../img/article_img/new/image-20250922145222574.png" alt="image-20250922145222574"  /><h2 id="总线带宽的计算"><a href="#总线带宽的计算" class="headerlink" title="总线带宽的计算"></a>总线带宽的计算</h2><p>不考虑缓存大小的前提下，最佳outstanding能力 &#x3D; latency_cycle &#x2F; burst_length</p><p>不考虑访问延迟和outstanding的情况下，</p><p>一次突发传输，传输的数据量为：总线位宽 × 突发传输个数</p><p>一次突发传输，消耗的时间为：突发传输个数 &#x2F; 时钟频率</p><p>因此带宽为，数据量 &#x2F; 时间 &#x3D; 总线位宽 × 时钟频率</p><p>考虑访问延迟和outstanding</p><p>传输的数据量为：总线位宽 × 突发传输个数 × outstandings</p><p>消耗的时间为：突发传输个数 &#x2F; 时钟频率 × outstandings + 访问延迟</p><p>因此带宽为，数据量 &#x2F; 时间</p><p>例：在一个AXI总线系统中，总线位宽为128bit,频率为500MHz，允许的最大Outstanding为8、最大Burst为16,Slave的访问至时为200ns。 那么该AXI总线最大传输带宽是多少？请给出推理过程，并计算最终结果。</p><p><a href="https://zhuanlan.zhihu.com/p/554026947">AXI outstanding传输带宽计算 - 知乎</a></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="AXI4接口定义"><a href="#AXI4接口定义" class="headerlink" title="AXI4接口定义"></a>AXI4接口定义</h2><h3 id="AXI4-SLAVE"><a href="#AXI4-SLAVE" class="headerlink" title="AXI4-SLAVE"></a>AXI4-SLAVE</h3><p><strong>模块参数</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>C_S_AXI_ID_WIDTH</td><td>ID 信号的宽度</td></tr><tr><td>C_S_AXI_DATA_WIDTH</td><td>数据宽度</td></tr><tr><td>C_S_AXI_ADDR_WIDTH</td><td>地址宽度</td></tr></tbody></table><p><strong>通用</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>S_AXI_ACLK</td><td>时钟</td></tr><tr><td>S_AXI_ARESETN</td><td>复位信号，低电平复位</td></tr></tbody></table><p><strong>写地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_AWID</td><td>写地址ID，示例代码的 Slave 不支持重排序</td></tr><tr><td>input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_AWADDR</td><td>写地址</td></tr><tr><td>input wire [7 : 0] S_AXI_AWLEN</td><td>突发长度（Burst length），给出了突发中传输（Transfer）的数量</td></tr><tr><td>input wire [2 : 0] S_AXI_AWSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>input wire [1 : 0] S_AXI_AWBURST</td><td>突发类型，AWBURST 和 AWSIZE 决定了此处突发中每次传输的地址是如何计算的</td></tr><tr><td>input wire S_AXI_AWVALID</td><td>写地址有效</td></tr><tr><td>output wire S_AXI_AWREADY</td><td>写地址准备</td></tr></tbody></table><p>注：</p><p>S_AXI_AWLEN：实际传输次数为 S_AXI_AWLEN+ 1（AXI4支持最多256次传输）。</p><p>S_AXI_AWSIZE：定义单次传输的字节数（如 <code>0b010</code> 表示4字节，即32位）。（2^S_AXI_AWSIZE）* 8 &#x3D; C_S_AXI_DATA_WIDTH</p><p>S_AXI_AWBURST：决定地址变化模式（固定地址、递增或回环）。</p><p><strong>写数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_WDATA</td><td>写数据</td></tr><tr><td>input wire [(C_S_AXI_DATA_WIDTH&#x2F;8)-1 : 0] S_AXI_WSTRB</td><td>写数据选通</td></tr><tr><td>input wire S_AXI_WLAST</td><td>写最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>input wire S_AXI_WVALID</td><td>写数据有效</td></tr><tr><td>output wire S_AXI_WREADY</td><td>写数据准备</td></tr></tbody></table><p><strong>写响应通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_BID</td><td>写响应的ID，由于本 Slave 不支持重排序，必须赋值为 S_AXI_AWID</td></tr><tr><td>output wire [1 : 0] S_AXI_BRESP</td><td>写响应，给出写事务的状态，示例代码中该信号恒为 2’b0</td></tr><tr><td>output wire S_AXI_BVALID</td><td>写响应有效</td></tr><tr><td>input wire S_AXI_BREADY</td><td>写响应准备</td></tr></tbody></table><p><strong>读地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_ARID</td><td>读地址ID，示例代码的 Slave 不支持重排序</td></tr><tr><td>input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_ARADDR</td><td>读地址</td></tr><tr><td>input wire [7 : 0] S_AXI_ARLEN</td><td>突发长度，给出了突发中传输的数量</td></tr><tr><td>input wire [2 : 0] S_AXI_ARSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>input wire [1 : 0] S_AXI_ARBURST</td><td>突发类型</td></tr><tr><td>input wire S_AXI_ARVALID</td><td>读地址有效</td></tr><tr><td>output wire S_AXI_ARREADY</td><td>读地址准备</td></tr></tbody></table><p><strong>读数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_S_AXI_ID_WIDTH-1 : 0] S_AXI_RID</td><td>读ID，由于Slave 不支持重排序，必须赋值为 S_AXI_ARID</td></tr><tr><td>output wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_RDATA</td><td>读数据</td></tr><tr><td>output wire [1 : 0] S_AXI_RRESP</td><td>读响应，示例代码中该信号恒为 2’b0</td></tr><tr><td>output wire S_AXI_RLAST</td><td>读最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>output wire S_AXI_RVALID</td><td>读数据有效</td></tr><tr><td>input wire S_AXI_RREADY</td><td>读数据准备</td></tr></tbody></table><h3 id="AXI4-Master"><a href="#AXI4-Master" class="headerlink" title="AXI4-Master"></a>AXI4-Master</h3><p><strong>模块参数</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>C_M_AXI_ID_WIDTH</td><td>ID 信号的宽度</td></tr><tr><td>C_M_AXI_ADDR_WIDTH</td><td>数据宽度</td></tr><tr><td>C_M_AXI_DATA_WIDTH</td><td>地址宽度</td></tr><tr><td>C_M_AXI_BURST_LEN</td><td>突发长度</td></tr><tr><td>C_M_TARGET_SLAVE_BASE_ADDR</td><td>目的从机的基地址</td></tr></tbody></table><p><strong>通用</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>M_AXI_ACLK</td><td>时钟</td></tr><tr><td>M_AXI_ARESETN</td><td>复位信号，低电平复位</td></tr><tr><td>input wire  INIT_AXI_TXN</td><td>传输开始脉冲</td></tr><tr><td>output wire  TXN_DONE</td><td>传输结束断言</td></tr><tr><td>output reg  ERROR</td><td>错误信号</td></tr></tbody></table><p><strong>写地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_AWID</td><td>写地址ID</td></tr><tr><td>output wire [C_M_AXI_ADDR_WIDTH-1 : 0] M_AXI_AWADDR</td><td>写地址</td></tr><tr><td>output wire [7 : 0] M_AXI_AWLEN</td><td>突发长度（Burst length），给出了突发中传输（Transfer）的数量</td></tr><tr><td>output wire [2 : 0] M_AXI_AWSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>output wire [1 : 0] M_AXI_AWBURST</td><td>突发类型，AWBURST 和 AWSIZE 决定了此处突发中每次传输的地址是如何计算的</td></tr><tr><td>output wire  M_AXI_AWVALID</td><td>写地址有效</td></tr><tr><td>input wire  M_AXI_AWREADY</td><td>写地址准备</td></tr></tbody></table><p><strong>写数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_M_AXI_DATA_WIDTH-1 : 0] M_AXI_WDATA</td><td>写数据</td></tr><tr><td>output wire [C_M_AXI_DATA_WIDTH&#x2F;8-1 : 0] M_AXI_WSTRB</td><td>写数据选通</td></tr><tr><td>output wire  M_AXI_WLAST</td><td>写最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>output wire  M_AXI_WVALID</td><td>写数据有效</td></tr><tr><td>input wire  M_AXI_WREADY</td><td>写数据准备</td></tr></tbody></table><p><strong>写响应通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_BID</td><td>写响应的ID，由于本 Slave 不支持重排序，必须赋值为 S_AXI_AWID</td></tr><tr><td>input wire [1 : 0] M_AXI_BRESP</td><td>写响应，给出写事务的状态，示例代码中该信号恒为 2’b0</td></tr><tr><td>input wire  M_AXI_BVALID</td><td>写响应有效</td></tr><tr><td>output wire  M_AXI_BREADY</td><td>写响应准备</td></tr></tbody></table><p><strong>读地址通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>output wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_ARID</td><td>读地址ID，示例代码的 Slave 不支持重排序</td></tr><tr><td>output wire [C_M_AXI_ADDR_WIDTH-1 : 0] M_AXI_ARADDR</td><td>读地址</td></tr><tr><td>output wire [7 : 0] M_AXI_ARLEN</td><td>突发长度，给出了突发中传输的数量</td></tr><tr><td>output wire [2 : 0] M_AXI_ARSIZE</td><td>突发大小，给出了突发中每次传输的大小</td></tr><tr><td>output wire [1 : 0] M_AXI_ARBURST</td><td>突发类型</td></tr><tr><td>output wire  M_AXI_ARVALID</td><td>读地址有效</td></tr><tr><td>input wire  M_AXI_ARREADY</td><td>读地址准备</td></tr></tbody></table><p><strong>读数据通道</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>input wire [C_M_AXI_ID_WIDTH-1 : 0] M_AXI_RID</td><td>读ID，由于Slave 不支持重排序，必须赋值为 S_AXI_ARID</td></tr><tr><td>input wire [C_M_AXI_DATA_WIDTH-1 : 0] M_AXI_RDATA</td><td>读数据</td></tr><tr><td>input wire [1 : 0] M_AXI_RRESP</td><td>读响应，示例代码中该信号恒为 2’b0</td></tr><tr><td>input wire  M_AXI_RLAST</td><td>读最后，表示当前传输是突发中的最后一个传输</td></tr><tr><td>input wire  M_AXI_RVALID</td><td>读数据有效</td></tr><tr><td>output wire  M_AXI_RREADY</td><td>读数据准备</td></tr></tbody></table><p> <strong>参考</strong></p><p><a href="https://blog.csdn.net/moon9999/article/details/131146296#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BA%86%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E8%AF%BB%E5%86%99%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%8C%85%E6%8B%ACread-writeaccess%E3%80%81modifiedWriteValue%E5%92%8CreadAction%EF%BC%8C%E5%B9%B6%E5%88%97%E4%B8%BE%E4%BA%8625%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8%E8%A1%8C%E4%B8%BA%E5%8F%8A%E5%85%B6%E5%9C%A8RAL%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E6%94%AF%E6%8C%81%E6%83%85%E5%86%B5%E3%80%82,%E6%AD%A4%E5%A4%96%EF%BC%8C%E8%BF%98%E6%8F%90%E4%BE%9B%E4%BA%86%E5%85%B3%E9%94%AE%E5%AF%84%E5%AD%98%E5%99%A8%E7%B1%BB%E5%9E%8B%E7%9A%84RTL%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%A6%82RW%E3%80%81WO%E3%80%81RO%E3%80%81W1%E3%80%81W1C%E3%80%81RC%E3%80%81RS%E3%80%81WRC%E3%80%81WRS%E3%80%81WC%E3%80%81WS%E3%80%81WSRC%E5%92%8CWCRS%E7%AD%89%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%A1%AC%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">【前端验证】通关寄存器与ral_model —— 25种常用寄存器类型全览_寄存器属性-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>IC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电路模块</title>
    <link href="/2025/04/02/%E6%95%B0%E5%AD%97IC_%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9D%97/"/>
    <url>/2025/04/02/%E6%95%B0%E5%AD%97IC_%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>电路模块</p><span id="more"></span><h1 id="电路模块"><a href="#电路模块" class="headerlink" title="电路模块"></a>电路模块</h1><h2 id="异步复位同步释放"><a href="#异步复位同步释放" class="headerlink" title="异步复位同步释放"></a>异步复位同步释放</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//异步复位同步释放</span><br><span class="hljs-keyword">module</span> rst (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> POR<br>);<br>    <br><span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] rst_reg;<br><span class="hljs-comment">//POR为外部输入复位信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> POR) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!POR)<br>        rst_reg &lt;= <span class="hljs-number">2&#x27;b0</span>;<br>    <span class="hljs-keyword">else</span><br>        rst_reg &lt;= &#123;rst_reg[<span class="hljs-number">1</span>], <span class="hljs-number">1&#x27;b1</span>&#125;;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">assign</span> rst = rst_reg[<span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="同步FIFO"><a href="#同步FIFO" class="headerlink" title="同步FIFO"></a>同步FIFO</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> sync_fifo #(<br>    <span class="hljs-keyword">parameter</span> DEEPWID = <span class="hljs-number">3</span>,<span class="hljs-comment">//存储器地址为位宽</span><br>    <span class="hljs-keyword">parameter</span> DEEP = <span class="hljs-number">8</span>, <span class="hljs-comment">//存储器深度</span><br>    <span class="hljs-keyword">parameter</span> BITWID = <span class="hljs-number">5</span> <span class="hljs-comment">//数据位宽</span><br>) (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> rst_n,<br><br>    <span class="hljs-keyword">input</span> wr,<br>    <span class="hljs-keyword">input</span> [BITWID:<span class="hljs-number">0</span>] wr_dat,<br><br>    <span class="hljs-keyword">input</span> rd,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [BITWID:<span class="hljs-number">0</span>] rd_dat,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> rd_dat_vld,<br><br>    <span class="hljs-keyword">input</span> [DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] cfg_almost_full, <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">input</span> [DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] cfg_almost_empty,<br>    <span class="hljs-keyword">output</span>  almost_full,<br>    <span class="hljs-keyword">output</span>  almost_empty,<br>    <span class="hljs-keyword">output</span>  full,<br>    <span class="hljs-keyword">output</span>  empty,<br>    <span class="hljs-keyword">output</span> [DEEPWID : <span class="hljs-number">0</span>] fifo_num <span class="hljs-comment">//存储器中当前</span><br> <br> <br>);<br><br><br><br><span class="hljs-keyword">wire</span> [DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] ram_wr_ptr; <span class="hljs-comment">//存储器的写地址索引</span><br><span class="hljs-keyword">wire</span> [DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] ram_rd_ptr;  <span class="hljs-comment">//读地址索引</span><br><br>    <span class="hljs-keyword">reg</span> [DEEPWID : <span class="hljs-number">0</span>] ram_wr_ptr_exp; <span class="hljs-comment">//写地址索引扩展，为了记录fifo_num</span><br><span class="hljs-keyword">reg</span> [DEEPWID : <span class="hljs-number">0</span>] ram_rd_ptr_exp;<br><br>    <span class="hljs-keyword">reg</span> [BITWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] my_memory[DEEP-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>]; <span class="hljs-comment">//使用寄存器作为存储介质</span><br><span class="hljs-keyword">integer</span> ii;<br><br><br><span class="hljs-keyword">assign</span> ram_wr_ptr = ram_wr_ptr_exp[DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>];<br><span class="hljs-keyword">assign</span> ram_rd_ptr = ram_rd_ptr_exp[DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>];<br><br><span class="hljs-comment">//状态信号的逻辑</span><br><span class="hljs-keyword">assign</span> fifo_num = ram_wr_ptr_exp - ram_rd_ptr_exp;<br><br><span class="hljs-keyword">assign</span> full = (fifo_num == DEEP) | ((fifo_num == DEEP - <span class="hljs-number">1</span>) &amp; wr &amp; (~rd));<br><span class="hljs-keyword">assign</span> empty = (fifo_num == <span class="hljs-number">0</span>) | ((fifo_num == <span class="hljs-number">1</span>) &amp; rd &amp; (~wr));<br><br><span class="hljs-keyword">assign</span> almost_full = (fifo_num &gt;= cfg_almost_full) | ((fifo_num == cfg_almost_full - <span class="hljs-number">1</span>) &amp; wr &amp; (~rd));<br><span class="hljs-keyword">assign</span> almost_empty = (fifo_num &lt;= cfg_almost_empty) | ((fifo_num == cfg_almost_empty + <span class="hljs-number">1</span>) &amp; rd &amp; (~wr));<br><br><br><span class="hljs-comment">//写地址的跳转</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst_n) <span class="hljs-keyword">begin</span><br>        ram_wr_ptr_exp &lt;= &#123;(DEEPWID+<span class="hljs-number">1</span>)&#123;<span class="hljs-number">1&#x27;b0</span>&#125;&#125;;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wr)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (ram_wr_ptr_exp &lt; DEEP + DEEP - <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            ram_wr_ptr_exp &lt;= ram_wr_ptr_exp + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            ram_wr_ptr_exp &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//读地址的跳转</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst_n) <span class="hljs-keyword">begin</span><br>        ram_rd_ptr_exp &lt;= &#123;(DEEPWID+<span class="hljs-number">1</span>)&#123;<span class="hljs-number">1&#x27;b0</span>&#125;&#125;;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wr)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (ram_rd_ptr_exp &lt; DEEP + DEEP - <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            ram_rd_ptr_exp &lt;= ram_rd_ptr_exp + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            ram_rd_ptr_exp &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><br><br><span class="hljs-comment">//将数据存入存储</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst_n) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; DEEP; ii = ii + <span class="hljs-number">1</span>)<br>            my_memory[ii] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; DEEP; ii = ii + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(wr &amp; (ram_wr_ptr == ii))<br>                my_memory[ii] = wr_dat;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//从存储器读出数据</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst_n) <span class="hljs-keyword">begin</span><br>        rd_dat &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (rd) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; DEEP; ii = ii + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span>(ram_rd_ptr == ii)<br>                    rd_dat &lt;= my_memory[ii];<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//读数据有效信号，表示是否在读取数据</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst_n) <span class="hljs-keyword">begin</span><br>        rd_dat_vld &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rd_dat_vld &lt;= rd;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h2 id="异步FIFO"><a href="#异步FIFO" class="headerlink" title="异步FIFO"></a>异步FIFO</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> afifo #(<br>    <span class="hljs-keyword">parameter</span> DEEPWID = <span class="hljs-number">3</span>,<span class="hljs-comment">//存储器地址为位宽</span><br>    <span class="hljs-keyword">parameter</span> DEEP = <span class="hljs-number">8</span>,<span class="hljs-comment">//存储器深度</span><br>    <span class="hljs-keyword">parameter</span> BITWID = <span class="hljs-number">8</span><span class="hljs-comment">//数据位宽</span><br>) (<br>    <span class="hljs-keyword">input</span> wr_clk,<br>    <span class="hljs-keyword">input</span> wr_rst_n,<br>    <span class="hljs-keyword">input</span> wr,<br>    <span class="hljs-keyword">input</span> [BITWID:<span class="hljs-number">0</span>] wr_dat,<br><br>    <span class="hljs-keyword">input</span> rd_clk,<br>    <span class="hljs-keyword">input</span> rd_rst_n,<br>    <span class="hljs-keyword">input</span> rd,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [BITWID:<span class="hljs-number">0</span>] rd_dat,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> rd_dat_vld,<br><br>    <span class="hljs-keyword">input</span> [DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] cfg_almost_full,<span class="hljs-comment">//设置的警告值</span><br>    <span class="hljs-keyword">input</span> [DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] cfg_almost_empty,<br>    <span class="hljs-keyword">output</span>  almost_full,<br>    <span class="hljs-keyword">output</span>  almost_empty,<br>    <span class="hljs-keyword">output</span>  full,<br>    <span class="hljs-keyword">output</span>  empty,<br>    <span class="hljs-keyword">output</span> [DEEPWID : <span class="hljs-number">0</span>] wr_num, <span class="hljs-comment">//写时钟域中，存储器中当前的数据量</span><br>    <span class="hljs-keyword">output</span> [DEEPWID : <span class="hljs-number">0</span>] rd_num <span class="hljs-comment">//读时钟域中，存储器中当前的数据量</span><br> <br>);<br><br><br><span class="hljs-keyword">reg</span> [DEEPWID : <span class="hljs-number">0</span>] wr_ptr_exp;<span class="hljs-comment">//写地址索引扩展，为了记录fifo_num</span><br><span class="hljs-keyword">reg</span> [DEEPWID : <span class="hljs-number">0</span>] rd_ptr_exp;<br><span class="hljs-keyword">wire</span> [DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] wd_ptr;<span class="hljs-comment">//存储器的写地址索引</span><br><span class="hljs-keyword">wire</span> [DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] rd_ptr;<br><br><br><span class="hljs-comment">//用于进行单电平跨时钟域处理的相关信号</span><br><span class="hljs-keyword">reg</span> [DEEPWID : <span class="hljs-number">0</span>] wr_ptr_exp_r;<br><span class="hljs-keyword">reg</span> [DEEPWID : <span class="hljs-number">0</span>] rd_ptr_exp_r;<br><span class="hljs-keyword">reg</span> [DEEPWID : <span class="hljs-number">0</span>] wr_ptr_exp_cross;<br><span class="hljs-keyword">reg</span> [DEEPWID : <span class="hljs-number">0</span>] rd_ptr_exp_cross;<br><span class="hljs-keyword">reg</span> [DEEPWID : <span class="hljs-number">0</span>] wr_ptr_exp_cross_r;<br><span class="hljs-keyword">reg</span> [DEEPWID : <span class="hljs-number">0</span>] rd_ptr_exp_cross_r;<br><span class="hljs-keyword">wire</span> [DEEPWID : <span class="hljs-number">0</span>] wr_ptr_exp_cross_trans;<br><span class="hljs-keyword">wire</span> [DEEPWID : <span class="hljs-number">0</span>] rd_ptr_exp_cross_trans;<br><br><span class="hljs-keyword">reg</span> [BITWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] my_memory[DEEP-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>]; <span class="hljs-comment">//使用寄存器作为存储介质</span><br><span class="hljs-keyword">integer</span> ii;<br><br><br><span class="hljs-keyword">assign</span> wr_ptr = wr_ptr_exp[DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>];<br><span class="hljs-keyword">assign</span> rd_ptr = rd_ptr_exp[DEEPWID-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>];<br><br><span class="hljs-comment">//各种状态信号的逻辑</span><br><span class="hljs-keyword">assign</span> wr_num = wr_ptr_exp - rd_ptr_exp_cross_trans;<br><span class="hljs-keyword">assign</span> rd_num = wr_ptr_exp_cross_trans - rd_ptr_exp;<br><br><span class="hljs-keyword">assign</span> full = (wr_num == DEEP) | ((wr_num == DEEP - <span class="hljs-number">1</span>) &amp; wr);<br><span class="hljs-keyword">assign</span> empty = (rd_num == <span class="hljs-number">0</span>) | ((rd_num == <span class="hljs-number">1</span>) &amp; rd);<br><br><span class="hljs-keyword">assign</span> almost_full = (wr_num &gt;= cfg_almost_full) | ((wr_num == cfg_almost_full - <span class="hljs-number">1</span>) &amp; wr);<br><span class="hljs-keyword">assign</span> almost_empty = (rd_num &lt;= cfg_almost_empty) | ((rd_num == cfg_almost_empty + <span class="hljs-number">1</span>) &amp; rd);<br><br><br><span class="hljs-comment">//写地址的跳转</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> wr_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> wr_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!wr_rst_n) <span class="hljs-keyword">begin</span><br>        wr_ptr_exp &lt;= &#123;(DEEPWID+<span class="hljs-number">1</span>)&#123;<span class="hljs-number">1&#x27;b0</span>&#125;&#125;;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(wr)<span class="hljs-keyword">begin</span><br>        wr_ptr_exp &lt;= wr_ptr_exp + &#123;&#123;(DEEPWID+<span class="hljs-number">1</span>)&#123;<span class="hljs-number">1&#x27;b0</span>&#125;&#125;, <span class="hljs-number">1&#x27;b1</span>&#125;;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//读地址的跳转</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> rd_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rd_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rd_rst_n) <span class="hljs-keyword">begin</span><br>        rd_ptr_exp &lt;= &#123;(DEEPWID+<span class="hljs-number">1</span>)&#123;<span class="hljs-number">1&#x27;b0</span>&#125;&#125;;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rd)<span class="hljs-keyword">begin</span><br>        rd_ptr_exp &lt;= rd_ptr_exp + &#123;&#123;(DEEPWID+<span class="hljs-number">1</span>)&#123;<span class="hljs-number">1&#x27;b0</span>&#125;&#125;, <span class="hljs-number">1&#x27;b1</span>&#125;;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//在写时钟域，将写地址转换为格雷码，并将读地址信号引入写时钟域（使用背靠背打拍方式）</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> wr_clk <span class="hljs-keyword">or</span> wr_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!wr_rst_n) <span class="hljs-keyword">begin</span><br>        wr_ptr_exp_r &lt;= <span class="hljs-number">0</span>;<br>        rd_ptr_exp_cross &lt;= <span class="hljs-number">0</span>;<br>        rd_ptr_exp_cross_r &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        wr_ptr_exp_r &lt;= graycode(wr_ptr_exp);<br>        rd_ptr_exp_cross &lt;= rd_ptr_exp_r;<br>        rd_ptr_exp_cross_r &lt;= rd_ptr_exp_cross;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//在读时钟域，将读地址转换为格雷码，并将写地址信号引入读时钟域（使用背靠背打拍方式）</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> rd_clk <span class="hljs-keyword">or</span> rd_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rd_rst_n) <span class="hljs-keyword">begin</span><br>        rd_ptr_exp_r &lt;= <span class="hljs-number">0</span>;<br>        wr_ptr_exp_cross &lt;= <span class="hljs-number">0</span>;<br>        wr_ptr_exp_cross_r &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rd_ptr_exp_r &lt;= graycode(rd_ptr_exp);<br>        wr_ptr_exp_cross &lt;= wr_ptr_exp_r;<br>        wr_ptr_exp_cross_r &lt;= wr_ptr_exp_cross;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//将读写地址解格雷码，转换为各自时钟域可用信号</span><br><span class="hljs-keyword">assign</span> wr_ptr_exp_cross_trans = degraycode(wr_ptr_exp_cross_r);<br><span class="hljs-keyword">assign</span> rd_ptr_exp_cross_trans = degraycode(rd_ptr_exp_cross_r);<br><br><span class="hljs-comment">//将数据存入存储器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> wr_clk <span class="hljs-keyword">or</span> wr_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!wr_rst_n) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; DEEP; ii = ii + <span class="hljs-number">1</span>)<br>            my_memory[ii] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; DEEP; ii = ii + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(wr &amp; (wr_ptr == ii))<br>                my_memory[ii] = wr_dat;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//从存储器中读出数据</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> rd_clk <span class="hljs-keyword">or</span> rd_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rd_rst_n) <span class="hljs-keyword">begin</span><br>        rd_dat &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (rd) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; DEEP; ii = ii + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span>(rd_ptr == ii)<br>                    rd_dat &lt;= my_memory[ii];<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//读数据有效信号，表示是否在读取数据</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> rd_clk <span class="hljs-keyword">or</span> rd_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rd_rst_n) <span class="hljs-keyword">begin</span><br>        rd_dat_vld &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rd_dat_vld &lt;= rd;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-comment">//生成格雷码函数</span><br><span class="hljs-keyword">function</span> [DEEPWID : <span class="hljs-number">0</span>] graycode;<br>    <span class="hljs-keyword">input</span> [DEEPWID : <span class="hljs-number">0</span>] val_in;<br>    <span class="hljs-keyword">reg</span> [DEEPWID+<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] val_in_exp;<br>    <span class="hljs-keyword">integer</span> i;<br><br>    <span class="hljs-keyword">begin</span><br>        val_in_exp = &#123;<span class="hljs-number">1&#x27;b0</span>, val_in&#125;;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; DEEPWID + <span class="hljs-number">1</span>; i = i + <span class="hljs-number">1</span>)<br>            graycode[i] = val_in_exp[i]^val_in_exp[i+<span class="hljs-number">1</span>]; <span class="hljs-comment">//异或</span><br>    <span class="hljs-keyword">end</span><br>    <br><span class="hljs-keyword">endfunction</span><br><span class="hljs-comment">//解格雷码  </span><br><span class="hljs-keyword">function</span> [DEEPWID : <span class="hljs-number">0</span>] degraycode;<br>    <span class="hljs-keyword">input</span> [DEEPWID : <span class="hljs-number">0</span>] val_in;<br>    <span class="hljs-keyword">reg</span> [DEEPWID + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>] tmp;<br>    <span class="hljs-keyword">integer</span> i;<br><br>    <span class="hljs-keyword">begin</span><br>        tmp = &#123;(DEEPWID + <span class="hljs-number">2</span>)&#123;<span class="hljs-number">1&#x27;b0</span>&#125;&#125;;<br>        <span class="hljs-keyword">for</span>(i = DEEPWID; i &gt;= <span class="hljs-number">0</span>; i = i - <span class="hljs-number">1</span>)<br>            tmp[i] = val_in[i]^tmp[i+<span class="hljs-number">1</span>];<br>        degraycode = tmp[DEEPWID : <span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">end</span><br>    <br><span class="hljs-keyword">endfunction</span><br><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="SPRAM"><a href="#SPRAM" class="headerlink" title="SPRAM"></a>SPRAM</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> SPRAM #(<br>        <span class="hljs-comment">// SPRAM output mode</span><br>        <span class="hljs-comment">// 0 : Read first</span><br>        <span class="hljs-comment">// 1 : Write first</span><br>        <span class="hljs-keyword">parameter</span> MODE  = <span class="hljs-number">0</span>,<br>        <span class="hljs-comment">// The width parameter for reading and writing data.</span><br>        <span class="hljs-keyword">parameter</span> WIDTH = <span class="hljs-number">16</span>,<br>        <span class="hljs-comment">// The depth parameter of RAM.</span><br>        <span class="hljs-keyword">parameter</span> DEPTH = <span class="hljs-number">1024</span>,<br>        <span class="hljs-comment">// Delay output</span><br>        <span class="hljs-keyword">parameter</span> DELAY = <span class="hljs-number">0</span><br>    )(<br>        <span class="hljs-comment">// Clock input </span><br>        <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  clka,          <br>        <span class="hljs-comment">// Enable input active high</span><br>        <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  ena,      <br>        <span class="hljs-comment">// Write Enable active high </span><br>        <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  wea,     <br><br>        <span class="hljs-comment">// Address Inputs</span><br>        <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  [<span class="hljs-built_in">$clog2</span>(DEPTH)-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]  addra, <br>        <span class="hljs-comment">// Data Inputs</span><br>        <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]          dina,   <br>        <span class="hljs-comment">// Data Outputs</span><br>        <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]          douta  <br>    );<br><br>    <span class="hljs-keyword">reg</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] mem [DEPTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">reg</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] douta_buf;<br>    <span class="hljs-keyword">reg</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] o_rdata_delay_reg[DELAY:<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>    <br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; DEPTH; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            mem[i] &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clka) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (ena) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (wea) <span class="hljs-keyword">begin</span><br>                mem[addra] &lt;= dina;<br>                douta_buf &lt;= MODE ? mem[addra] : dina;<br>            <span class="hljs-keyword">end</span> <br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                douta_buf &lt;= mem[addra];<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">assign</span> douta = douta_buf;<br><br>    <span class="hljs-comment">// delay read data</span><br>    <span class="hljs-keyword">generate</span><br>        <span class="hljs-keyword">if</span> (DELAY == <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">assign</span> douta = douta_buf;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">genvar</span> i = <span class="hljs-number">0</span>; i &lt; DELAY; i = i + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clka) <span class="hljs-keyword">begin</span><br>                        o_rdata_delay_reg[i] &lt;= douta_buf;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clka) <span class="hljs-keyword">begin</span><br>                        o_rdata_delay_reg[i] &lt;= o_rdata_delay_reg[i-<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">assign</span> douta = o_rdata_delay_reg[DELAY-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endgenerate</span><br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h2 id="SDPRAM"><a href="#SDPRAM" class="headerlink" title="SDPRAM"></a>SDPRAM</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> SDPRAM #(<br>        <span class="hljs-comment">// The depth parameter of RAM.</span><br>        <span class="hljs-keyword">parameter</span> DEPTH = <span class="hljs-number">1024</span>,<br>        <span class="hljs-comment">// The width parameter for reading and writing data.</span><br>        <span class="hljs-keyword">parameter</span> WIDTH = <span class="hljs-number">12</span>,<br>        <span class="hljs-comment">// Delay output</span><br>        <span class="hljs-keyword">parameter</span> DELAY = <span class="hljs-number">0</span>,<br>        <span class="hljs-comment">// do not set by user</span><br>        <span class="hljs-keyword">parameter</span> STEP  = (<span class="hljs-built_in">$clog2</span>(DEPTH) == <span class="hljs-number">0</span>) ? <span class="hljs-number">0</span> : (<span class="hljs-built_in">$clog2</span>(DEPTH) - <span class="hljs-number">1</span>)<br>    ) (<br>        <span class="hljs-comment">// Clock input</span><br>        <span class="hljs-keyword">input</span>      clock,<br>        <span class="hljs-comment">// Synchronous reset with active high</span><br>        <span class="hljs-comment">// When DEPTH == 1; asynchronous reset with active high</span><br>        <span class="hljs-keyword">input</span>      reset,<br><br>        <span class="hljs-comment">// Write enable input, active high.</span><br>        <span class="hljs-keyword">input</span>      wen,  <br>        <span class="hljs-comment">// Read enable input, active high.</span><br>        <span class="hljs-keyword">input</span>      ren,<br><br>        <span class="hljs-comment">// Write input address.</span><br>        <span class="hljs-keyword">input</span>  [STEP:<span class="hljs-number">0</span>] waddr,<br>        <span class="hljs-comment">// Read input address.</span><br>        <span class="hljs-keyword">input</span>  [STEP:<span class="hljs-number">0</span>] raddr,<br><br>        <span class="hljs-comment">// Write input data.</span><br>        <span class="hljs-keyword">input</span>  [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] din,<br>        <span class="hljs-comment">// Read output data.</span><br>        <span class="hljs-keyword">output</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] dout<br>    );<br><br>    <span class="hljs-keyword">reg</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] rdout;<br>    <span class="hljs-keyword">reg</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] o_rdata_delay_reg[DELAY:<span class="hljs-number">0</span>];<br><br>    <span class="hljs-comment">// define ram as array or ip</span><br>    <span class="hljs-keyword">reg</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ram [DEPTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;DEPTH; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            ram[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clock) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(reset) <span class="hljs-keyword">begin</span><br>            rdout &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (wen) <span class="hljs-keyword">begin</span><br>                ram[waddr] &lt;= din;<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">if</span> (ren) <span class="hljs-keyword">begin</span><br>                rdout &lt;= ram[raddr];<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br><br>    <span class="hljs-comment">// delay read data</span><br>    <span class="hljs-keyword">generate</span><br>        <span class="hljs-keyword">if</span> (DELAY == <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">assign</span> dout = rdout;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">genvar</span> i = <span class="hljs-number">0</span>; i &lt; DELAY; i = i + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clock) <span class="hljs-keyword">begin</span><br>                        o_rdata_delay_reg[i] &lt;= rdout;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clock) <span class="hljs-keyword">begin</span><br>                        o_rdata_delay_reg[i] &lt;= o_rdata_delay_reg[i-<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">assign</span> dout = o_rdata_delay_reg[DELAY-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endgenerate</span><br><br><span class="hljs-keyword">endmodule</span> <span class="hljs-comment">//</span><br><br></code></pre></td></tr></table></figure><h2 id="DPRAM"><a href="#DPRAM" class="headerlink" title="DPRAM"></a>DPRAM</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> DPRAM #(<br>        <span class="hljs-comment">// The width parameter for reading and writing data.</span><br>        <span class="hljs-keyword">parameter</span> WIDTH = <span class="hljs-number">16</span>,<br>        <span class="hljs-comment">// The depth parameter of RAM.</span><br>        <span class="hljs-keyword">parameter</span> DEPTH = <span class="hljs-number">1024</span><br>    ) (<br>        <span class="hljs-comment">// A Port Clock Input</span><br>        <span class="hljs-keyword">input</span>                       clka,<br>        <span class="hljs-comment">// A Port Enable active high</span><br>        <span class="hljs-keyword">input</span>                       ena,<br>        <span class="hljs-comment">// A Port Write Enable active high</span><br>        <span class="hljs-keyword">input</span>                       wea,<br>        <span class="hljs-comment">// A Port Address Inputs</span><br>        <span class="hljs-keyword">input</span> [<span class="hljs-built_in">$clog2</span>(DEPTH)-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]   addra,<br>        <span class="hljs-comment">// A Port Data Inputs</span><br>        <span class="hljs-keyword">input</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]           dina,<br>        <span class="hljs-comment">// A Port Data Outputs</span><br>        <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]      douta,<br><br>        <span class="hljs-comment">// B Port Clock Input</span><br>        <span class="hljs-keyword">input</span>                       clkb,<br>        <span class="hljs-comment">// B Port Enable active high</span><br>        <span class="hljs-keyword">input</span>                       enb,<br>        <span class="hljs-comment">// B Port Write Enable active high</span><br>        <span class="hljs-keyword">input</span>                       web,<br>        <span class="hljs-comment">// B Port Address Inputs</span><br>        <span class="hljs-keyword">input</span> [<span class="hljs-built_in">$clog2</span>(DEPTH)-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]   addrb,<br>        <span class="hljs-comment">// B Port Data Inputs</span><br>        <span class="hljs-keyword">input</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]           dinb,<br>        <span class="hljs-comment">// B Port Data Outputs</span><br>        <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]      doutb<br>    );<br><br>    <span class="hljs-keyword">reg</span> [WIDTH - <span class="hljs-number">1</span> : <span class="hljs-number">0</span>] ram [DEPTH - <span class="hljs-number">1</span> : <span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;DEPTH;i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            ram[i] &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>        douta &lt;= <span class="hljs-number">0</span>;<br>        doutb &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clka) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (ena) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (wea) <span class="hljs-keyword">begin</span><br>                ram[addra] &lt;= dina;<br>            <span class="hljs-keyword">end</span><br>            douta &lt;= ram[addra];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clkb) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (enb) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (web) <span class="hljs-keyword">begin</span><br>                ram[addrb] &lt;= dinb;<br>            <span class="hljs-keyword">end</span><br>            doutb &lt;= ram[addrb];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h2 id="移位寄存器"><a href="#移位寄存器" class="headerlink" title="移位寄存器"></a>移位寄存器</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> shift_reg #(<br>    <span class="hljs-keyword">parameter</span> DATA_WIDTH = <span class="hljs-number">16</span>,<br>    <span class="hljs-keyword">parameter</span> DELAY = <span class="hljs-number">0</span>  <span class="hljs-comment">// 延迟拍数</span><br>)(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> rst,<br>    <span class="hljs-keyword">input</span>  <span class="hljs-keyword">signed</span> [DATA_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] din,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">signed</span> [DATA_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] dout<br>);<br><br>    <span class="hljs-comment">// 移位寄存器数组</span><br>    <span class="hljs-keyword">reg</span> <span class="hljs-keyword">signed</span> [DATA_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] shift_reg [<span class="hljs-number">0</span>:DELAY-<span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">integer</span> i;<br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> rst) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (rst) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; DELAY; i = i + <span class="hljs-number">1</span>)<br>                shift_reg[i] &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (DELAY &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>                shift_reg[<span class="hljs-number">0</span>] &lt;= din;<br>                <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; DELAY; i = i + <span class="hljs-number">1</span>)<br>                    shift_reg[i] &lt;= shift_reg[i-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">assign</span> dout = (DELAY == <span class="hljs-number">0</span>) ? din : shift_reg[DELAY-<span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a>加法器</h2><p>通过简单基本门电路设计，给出真值表</p><h3 id="半加器"><a href="#半加器" class="headerlink" title="半加器"></a>半加器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> add_half(<br>   <span class="hljs-keyword">input</span>                A   ,<br>   <span class="hljs-keyword">input</span>                B   ,<br> <br>   <span class="hljs-keyword">output</span>   <span class="hljs-keyword">wire</span>        S   ,<br>   <span class="hljs-keyword">output</span>   <span class="hljs-keyword">wire</span>        C   <br>);<br><br><span class="hljs-keyword">assign</span> S = A ^ B;<br><span class="hljs-keyword">assign</span> C = A &amp; B;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="全加器"><a href="#全加器" class="headerlink" title="全加器"></a>全加器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> add_half(<br>   <span class="hljs-keyword">input</span>                A   ,<br>   <span class="hljs-keyword">input</span>                B   ,<br>   <span class="hljs-keyword">input</span>                Cin ,<br> <br>   <span class="hljs-keyword">output</span>   <span class="hljs-keyword">wire</span>        S   ,<br>   <span class="hljs-keyword">output</span>   <span class="hljs-keyword">wire</span>        C   <br>);<br><br><span class="hljs-keyword">assign</span> S = A ^ B ^ Cin;<br><span class="hljs-keyword">assign</span> C = (A ^ B) &amp; Cin | (A &amp; B);<br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-comment">//使用半加器实现</span><br><span class="hljs-keyword">module</span> add_full(<br>   <span class="hljs-keyword">input</span>                A   ,<br>   <span class="hljs-keyword">input</span>                B   ,<br>   <span class="hljs-keyword">input</span>                Ci  , <br><br>   <span class="hljs-keyword">output</span><span class="hljs-keyword">wire</span>        S   ,<br>   <span class="hljs-keyword">output</span>   <span class="hljs-keyword">wire</span>        Co   <br>);<br><br><span class="hljs-keyword">wire</span> S0;<br><span class="hljs-keyword">wire</span> C0;<br><span class="hljs-keyword">wire</span> C1;<br>add_half u_add_half_0(<br>    <span class="hljs-variable">.A</span>(A),<br>    <span class="hljs-variable">.B</span>(B),<br>    <span class="hljs-variable">.S</span>(S0),<br>    <span class="hljs-variable">.C</span>(C0)<br>);<br><br>add_half u_add_half_1(<br>    <span class="hljs-variable">.A</span>(Ci),<br>    <span class="hljs-variable">.B</span>(S0),<br>    <span class="hljs-variable">.S</span>(S),<br>    <span class="hljs-variable">.C</span>(C1)<br>);<br><br><span class="hljs-keyword">assign</span> Co = C0 | C1;<br><br><span class="hljs-keyword">endmodule</span><br><br><br></code></pre></td></tr></table></figure><h3 id="串行进位加法器"><a href="#串行进位加法器" class="headerlink" title="串行进位加法器"></a>串行进位加法器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//串行进位加法器的缺点是，第i位的计算，必须等待第i-1位进位的产生</span><br><span class="hljs-keyword">module</span> add_4(<br>   <span class="hljs-keyword">input</span>         [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]  A   ,<br>   <span class="hljs-keyword">input</span>         [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]  B   ,<br>   <span class="hljs-keyword">input</span>                Ci  , <br><br>   <span class="hljs-keyword">output</span><span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]  S   ,<br>   <span class="hljs-keyword">output</span>   <span class="hljs-keyword">wire</span>        Co   <br>);<br><br><br><span class="hljs-keyword">genvar</span> i;<br><span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] Coreg;<br><br><span class="hljs-keyword">generate</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i = i + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>            add_full u_add_full_0(<br>                <span class="hljs-variable">.A</span>(A[i]),<br>                <span class="hljs-variable">.B</span>(B[i]),<br>                <span class="hljs-variable">.Ci</span>(Ci),<br>                <span class="hljs-variable">.S</span>(S[i]),<br>                <span class="hljs-variable">.Co</span>(Coreg[i])<br>            );<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            add_full u_add_full_1(<br>                <span class="hljs-variable">.A</span>(A[i]),<br>                <span class="hljs-variable">.B</span>(B[i]),<br>                <span class="hljs-variable">.Ci</span>(Coreg[i-<span class="hljs-number">1</span>]),<br>                <span class="hljs-variable">.S</span>(S[i]),<br>                <span class="hljs-variable">.Co</span>(Coreg[i])<br>            );<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endgenerate</span><br><br><span class="hljs-keyword">assign</span> Co = Coreg[<span class="hljs-number">3</span>];<br><br></code></pre></td></tr></table></figure><h3 id="超前进位加法器"><a href="#超前进位加法器" class="headerlink" title="超前进位加法器"></a>超前进位加法器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> huawei8<span class="hljs-comment">//四位超前进位加法器</span><br>(<br><span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]A,<br><span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]B,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>]OUT<br>);<br><br><span class="hljs-comment">//*************code***********//</span><br><br><span class="hljs-keyword">genvar</span> i;<br><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] f_reg;<br><span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] p_reg;<br><span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] g_reg;<br><span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">1</span>] Ci;<br><span class="hljs-keyword">wire</span> Gm;<br><span class="hljs-keyword">wire</span> Pm;<br><br><span class="hljs-keyword">assign</span> OUT = &#123;Ci[<span class="hljs-number">4</span>], f_reg&#125;;<br><br><span class="hljs-keyword">generate</span>  <br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i = i + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)<br>Add1 u_Add1_0(<br><span class="hljs-variable">.a</span>(A[i]),<br><span class="hljs-variable">.b</span>(B[i]),<br><span class="hljs-variable">.C_in</span>(<span class="hljs-number">1&#x27;b0</span>),<br><span class="hljs-variable">.f</span>(f_reg[i]),<br><span class="hljs-variable">.p</span>(p_reg[i]),<br><span class="hljs-variable">.g</span>(g_reg[i])<br>);<br><span class="hljs-keyword">else</span><br>Add1 u_Add1_0(<br><span class="hljs-variable">.a</span>(A[i]),<br><span class="hljs-variable">.b</span>(B[i]),<br><span class="hljs-variable">.C_in</span>(Ci[i]),<br><span class="hljs-variable">.f</span>(f_reg[i]),<br><span class="hljs-variable">.p</span>(p_reg[i]),<br><span class="hljs-variable">.g</span>(g_reg[i])<br>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endgenerate</span><br><br>CLA_4 u_CLA_4(<br><span class="hljs-variable">.P</span>(p_reg),<br><span class="hljs-variable">.G</span>(g_reg),<br><span class="hljs-variable">.C_in</span>(<span class="hljs-number">1&#x27;b0</span>),<br><span class="hljs-variable">.Ci</span>(Ci),<br><span class="hljs-variable">.Gm</span>(Gm),<br><span class="hljs-variable">.Pm</span>(Pm)<br>);<br><br><span class="hljs-comment">//*************code***********//</span><br><span class="hljs-keyword">endmodule</span><br><br><br><br><span class="hljs-comment">//////////////下面是两个子模块////////</span><br><span class="hljs-comment">//半加器</span><br><span class="hljs-keyword">module</span> Add1<br>(<br><span class="hljs-keyword">input</span> a,<br><span class="hljs-keyword">input</span> b,<br><span class="hljs-keyword">input</span> C_in,<br><span class="hljs-keyword">output</span> f,<br><span class="hljs-keyword">output</span> g,<br><span class="hljs-keyword">output</span> p<br>);<br><br><span class="hljs-keyword">assign</span> p = a ^ b;<br><span class="hljs-keyword">assign</span> g = a &amp; b;<br><span class="hljs-keyword">assign</span> f = p ^ C_in;<br><br><br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> CLA_4(<br><span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]P,<br><span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]G,<br><span class="hljs-keyword">input</span> C_in,<br><span class="hljs-keyword">output</span> [<span class="hljs-number">4</span>:<span class="hljs-number">1</span>]Ci,<br><span class="hljs-keyword">output</span> Gm,<br><span class="hljs-keyword">output</span> Pm<br>);<br><br><span class="hljs-keyword">genvar</span> i;<br><br><span class="hljs-keyword">generate</span>  <br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i = i + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br><br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>) <br><span class="hljs-keyword">assign</span> Ci[i] = G[i-<span class="hljs-number">1</span>] | (C_in &amp; P[i-<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">assign</span> Ci[i] = G[i-<span class="hljs-number">1</span>] | (Ci[i-<span class="hljs-number">1</span>] &amp; P[i-<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endgenerate</span><br><br><span class="hljs-keyword">assign</span> Gm = Ci[<span class="hljs-number">4</span>];<br><span class="hljs-keyword">assign</span> Pm = Ci[<span class="hljs-number">4</span>];<br><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/vivid117/article/details/91980665">数字电路基础知识(四) 加法器-半加器、全加器与超前进位加法器-CSDN博客</a></p><h2 id="并转串电路"><a href="#并转串电路" class="headerlink" title="并转串电路"></a>并转串电路</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> huawei5(<br><span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> clk  ,<br><span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> rst  ,<br><span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]d ,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> valid_in ,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> dout<br>);<br><br><span class="hljs-comment">//*************code***********//</span><br><span class="hljs-comment">//valid_in 表示输入有效, d 信号输入, dout 信号输出</span><br><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cnt;<br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst) <span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(!rst) <span class="hljs-keyword">begin</span> <br>cnt &lt;= <span class="hljs-number">2&#x27;b00</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">begin</span><br>cnt &lt;= cnt + <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>cnt &lt;= <span class="hljs-number">2&#x27;b00</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] tmp;<br><span class="hljs-keyword">reg</span> valid_in_reg;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst) <span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(!rst) <span class="hljs-keyword">begin</span> <br>tmp &lt;= <span class="hljs-number">4&#x27;b0</span>;<br>valid_in_reg &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">3</span>)<span class="hljs-keyword">begin</span><br>tmp &lt;= d;<br>valid_in_reg &lt;= <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>tmp &lt;= tmp &lt;&lt; <span class="hljs-number">1</span>;<br>valid_in_reg &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">assign</span> dout = tmp[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">assign</span> valid_in = valid_in_reg;<br><span class="hljs-comment">//*************code***********//</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="串转并电路"><a href="#串转并电路" class="headerlink" title="串转并电路"></a>串转并电路</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//带有握手信号，需要验证</span><br><span class="hljs-keyword">module</span> chuanzhuanbing  (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> rst_n,<br>    <span class="hljs-keyword">input</span> data_a,<br>    <span class="hljs-keyword">input</span> valid_a,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> ready_a,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> valid_b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] data_b<br>); <br><br><span class="hljs-comment">//ready握手准备信号一直准备</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst_n) <span class="hljs-keyword">begin</span><br>        ready_a &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        ready_a &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cnt;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst_n) <span class="hljs-keyword">begin</span><br>        cnt &lt;= <span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (valid_a &amp; ready_a) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (cnt &lt; <span class="hljs-number">2&#x27;b11</span>) <span class="hljs-keyword">begin</span><br>            cnt &lt;= cnt + <span class="hljs-number">2&#x27;b01</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            cnt &lt;= <span class="hljs-number">2&#x27;b00</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] data_b_reg;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst_n) <span class="hljs-keyword">begin</span><br>        data_b_reg &lt;= <span class="hljs-number">4&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (valid_a &amp; ready_a &amp; (cnt &lt;= <span class="hljs-number">2&#x27;b11</span>)) <span class="hljs-keyword">begin</span><br>        data_b_reg &lt;= &#123;data_b_reg[<span class="hljs-number">3</span>:<span class="hljs-number">1</span>], data_a&#125;;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst_n) <span class="hljs-keyword">begin</span><br>        data_b &lt;= <span class="hljs-number">4&#x27;b0</span>;<br>        valid_b &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (valid_a &amp; ready_a &amp; (cnt == <span class="hljs-number">2&#x27;b11</span>)) <span class="hljs-keyword">begin</span><br>        data_b &lt;= data_b_reg;<br>        valid_b &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        valid_b &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="无毛刺时钟切换电路"><a href="#无毛刺时钟切换电路" class="headerlink" title="无毛刺时钟切换电路"></a>无毛刺时钟切换电路</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//详细见书</span><br><span class="hljs-comment">//本题中两个时钟属于同频时钟，因此没有跨时钟同步的操作，完整的电路，应该对sel信号进行同步</span><br><span class="hljs-keyword">module</span> huawei6(<br><span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> clk0  ,<br><span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> clk1  ,<br><span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> rst  ,<br><span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sel ,<br><span class="hljs-keyword">output</span>  clk_out<br>);<br><span class="hljs-comment">//*************code***********//</span><br><br><br><span class="hljs-keyword">wire</span> a1o;<br><span class="hljs-keyword">wire</span> a2o;<br><span class="hljs-keyword">reg</span> a1o_sync;<br><br><span class="hljs-keyword">assign</span> a1o = (~sel) &amp; (~a3o_sync);<br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">negedge</span> clk0 <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst) <span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(!rst) <span class="hljs-keyword">begin</span> <br>a1o_sync &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>a1o_sync &lt;= a1o;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">assign</span> a2o = a1o_sync &amp; clk0;<br><br><br><span class="hljs-keyword">wire</span> a3o;<br><span class="hljs-keyword">wire</span> a4o;<br><span class="hljs-keyword">reg</span> a3o_sync;<br><br><span class="hljs-keyword">assign</span> a3o = sel &amp; (~a1o_sync);<br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">negedge</span> clk1 <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst) <span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(!rst) <span class="hljs-keyword">begin</span> <br>a3o_sync &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br><br>a3o_sync &lt;= a3o;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">assign</span> a4o = a3o_sync &amp; clk1;<br><br><span class="hljs-keyword">assign</span> clk_out = a2o | a4o;<br><br><span class="hljs-comment">//*************code***********//</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="4bit乘法器"><a href="#4bit乘法器" class="headerlink" title="4bit乘法器"></a>4bit乘法器</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//使用的方法是，先求部分积，然后累加的方法</span><br><span class="hljs-keyword">module</span> calculation(<br><span class="hljs-keyword">input</span> clk,<br><span class="hljs-keyword">input</span> rst_n,<br><span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a,<br><span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] b,<br><span class="hljs-keyword">output</span> [<span class="hljs-number">8</span>:<span class="hljs-number">0</span>] c<br>);<br><span class="hljs-keyword">wire</span>    [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]   pro0,pro1;<br> <br>mult_4  u0<br>(<br>    <span class="hljs-variable">.clk</span>    (clk),<br>    <span class="hljs-variable">.rst_n</span>  (rst_n),<br>    <span class="hljs-variable">.data_a</span> (<span class="hljs-number">4&#x27;d12</span>),<br>    <span class="hljs-variable">.data_b</span> (a),<br> <br>    <span class="hljs-variable">.prod</span>   (pro0)<br>);<br> <br> <br>mult_4  u1<br>(<br>    <span class="hljs-variable">.clk</span>    (clk),<br>    <span class="hljs-variable">.rst_n</span>  (rst_n),<br>    <span class="hljs-variable">.data_a</span> (<span class="hljs-number">4&#x27;d5</span>),<br>    <span class="hljs-variable">.data_b</span> (b),<br> <br>    <span class="hljs-variable">.prod</span>   (pro1)<br>);<br> <br><span class="hljs-keyword">assign</span>  c = pro0 + pro1;<br> <br><span class="hljs-keyword">endmodule</span><br> <br> <br> <br><span class="hljs-keyword">module</span>  mult_4<br>(<br><span class="hljs-keyword">input</span>   <span class="hljs-keyword">wire</span>    clk ,<br><span class="hljs-keyword">input</span>   <span class="hljs-keyword">wire</span>    rst_n,<br><span class="hljs-keyword">input</span>   <span class="hljs-keyword">wire</span>    [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]   data_a,<br><span class="hljs-keyword">input</span>   <span class="hljs-keyword">wire</span>    [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]   data_b,<br> <br><span class="hljs-keyword">output</span>  <span class="hljs-keyword">reg</span>     [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]   prod<br>);<br><span class="hljs-keyword">reg</span>     [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]   mul0,mul1,mul2,mul3;<br> <br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n)<br>    <span class="hljs-keyword">if</span>(!rst_n)<br>        <span class="hljs-keyword">begin</span><br>            mul0    &lt;=  <span class="hljs-number">4&#x27;d0</span>;<br>            mul1    &lt;=  <span class="hljs-number">4&#x27;d0</span>;<br>            mul2    &lt;=  <span class="hljs-number">4&#x27;d0</span>;<br>            mul3    &lt;=  <span class="hljs-number">4&#x27;d0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">begin</span><br>            mul0    &lt;=   data_b[<span class="hljs-number">0</span>]?  data_a:<span class="hljs-number">0</span>;<br>            mul1    &lt;=   data_b[<span class="hljs-number">1</span>]?  data_a:<span class="hljs-number">0</span>;<br>            mul2    &lt;=   data_b[<span class="hljs-number">2</span>]?  data_a:<span class="hljs-number">0</span>;<br>            mul3    &lt;=   data_b[<span class="hljs-number">3</span>]?  data_a:<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n)<br>    <span class="hljs-keyword">if</span>(!rst_n)<br>        prod    &lt;=   <span class="hljs-number">8&#x27;d0</span>;<br>    <span class="hljs-keyword">else</span><br>        prod    &lt;=   mul0 + (mul1 &lt;&lt;<span class="hljs-number">1</span>) + (mul2 &lt;&lt;<span class="hljs-number">2</span>) + (mul3 &lt;&lt;<span class="hljs-number">3</span>);<br> <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="浮点乘法器"><a href="#浮点乘法器" class="headerlink" title="浮点乘法器"></a>浮点乘法器</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><br><span class="hljs-keyword">module</span> Mul #(<br>    <span class="hljs-keyword">parameter</span> N = <span class="hljs-number">32</span><br>) (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> rst,<br>    <span class="hljs-keyword">input</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] float_x,<br>    <span class="hljs-keyword">input</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] float_y,<br>    <span class="hljs-keyword">input</span> round_cfg,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] result,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> overflow_flag,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> underflow_flag<br>);<br><br><span class="hljs-comment">//Unpack</span><br><span class="hljs-keyword">reg</span> sign_x, sign_y;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">8</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] exponent_x, exponent_y;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">24</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] significand_x, significand_y;<br><br><br><span class="hljs-comment">//First-order</span><br><span class="hljs-keyword">wire</span> ff_sign;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">10</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ff_exponent;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">48</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ff_significand;<br><br><span class="hljs-keyword">reg</span> ff_sign_reg;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">10</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ff_exponent_reg;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">48</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ff_significand_reg;<br><br><span class="hljs-comment">//Second-order</span><br><span class="hljs-keyword">wire</span> sf_sign;<br><span class="hljs-keyword">wire</span> [<span class="hljs-number">8</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sf_exponent;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">23</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sf_significand;<br><br><span class="hljs-keyword">reg</span> sf_sign_reg;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">8</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sf_exponent_reg;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">23</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sf_significand_reg;<br><br><br><span class="hljs-comment">//Unpack</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        sign_x &lt;= float_x[<span class="hljs-number">31</span>];<br>        exponent_x &lt;= float_x[<span class="hljs-number">30</span>:<span class="hljs-number">23</span>];<br>        significand_x &lt;= &#123;<span class="hljs-number">1&#x27;b1</span>, float_x[<span class="hljs-number">22</span>:<span class="hljs-number">0</span>]&#125;;<br>        sign_y &lt;= float_y[<span class="hljs-number">31</span>];<br>        exponent_y &lt;= float_y[<span class="hljs-number">30</span>:<span class="hljs-number">23</span>];<br>        significand_y &lt;= &#123;<span class="hljs-number">1&#x27;b1</span>, float_y[<span class="hljs-number">22</span>:<span class="hljs-number">0</span>]&#125;;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">wire</span> Zero_flag;<br><span class="hljs-comment">//X=0 or Y=0 ?</span><br><span class="hljs-keyword">assign</span> Zero_flag = float_x[<span class="hljs-number">30</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">0</span> | float_y[<span class="hljs-number">30</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">10</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] biasComplement = <span class="hljs-number">10&#x27;b11_1000_0001</span>;<span class="hljs-comment">//-127</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">10</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] biasSource = <span class="hljs-number">10&#x27;b00_0111_1111</span>;<span class="hljs-comment">//127</span><br><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">10</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] temp_x;<br><span class="hljs-keyword">wire</span> [<span class="hljs-number">10</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] temp_y;<br><br><span class="hljs-comment">//sign bit extension</span><br><span class="hljs-keyword">assign</span> temp_x = &#123;<span class="hljs-number">2&#x27;b00</span>, exponent_x&#125; + biasComplement; <br><span class="hljs-keyword">assign</span> temp_y = &#123;<span class="hljs-number">2&#x27;b00</span>, exponent_y&#125; + biasComplement; <br><br><span class="hljs-comment">//assign ff_exponent = temp_x + temp_y;</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!Zero_flag) <span class="hljs-keyword">begin</span><br>        ff_exponent = temp_x + temp_y;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        ff_exponent = <span class="hljs-number">10&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!Zero_flag) <span class="hljs-keyword">begin</span><br>        ff_significand = significand_x * significand_y;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        ff_significand = <span class="hljs-number">48&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">assign</span> ff_sign = sign_x ^ sign_y;<br><br><span class="hljs-comment">//First-order flow</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst) <span class="hljs-keyword">begin</span><br>        ff_sign_reg &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        ff_exponent_reg &lt;= <span class="hljs-number">10&#x27;b0</span>;<br>        ff_significand_reg &lt;= <span class="hljs-number">48&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        ff_sign_reg &lt;= ff_sign;<br>        ff_exponent_reg &lt;= ff_exponent;<br>        ff_significand_reg &lt;= ff_significand;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">48</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] Norm;<br><span class="hljs-keyword">reg</span> shift_flag;<br><span class="hljs-comment">//Normalize</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (ff_significand_reg != <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (ff_significand_reg[<span class="hljs-number">47</span>] == <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            shift_flag = <span class="hljs-number">1</span>;<br>            Norm = ff_significand_reg &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            shift_flag = <span class="hljs-number">0</span>;<br>            Norm = ff_significand_reg;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        Norm = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//Round</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (Norm != <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (round_cfg) <span class="hljs-keyword">begin</span><br>            sf_significand = Norm[<span class="hljs-number">45</span>:<span class="hljs-number">23</span>] + Norm[<span class="hljs-number">22</span>] * <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            sf_significand = Norm[<span class="hljs-number">45</span>:<span class="hljs-number">23</span>];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        sf_significand = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">10</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] temp_result;<br><span class="hljs-comment">//Adjust exponent</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (ff_exponent_reg != <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (shift_flag) <span class="hljs-keyword">begin</span><br>            temp_result = ff_exponent_reg + <span class="hljs-number">1</span> + biasSource;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            temp_result = ff_exponent_reg + biasSource;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        temp_result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//Overflow or Underflow judgment</span><br><span class="hljs-keyword">reg</span> overflow_flag_reg;<br><span class="hljs-keyword">reg</span> underflow_flag_reg;<br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (temp_result != <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (temp_result[<span class="hljs-number">9</span>] == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>            overflow_flag_reg = <span class="hljs-number">0</span>;<br>            underflow_flag_reg = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp_result[<span class="hljs-number">9</span>:<span class="hljs-number">8</span>] == <span class="hljs-number">2&#x27;b01</span>)<span class="hljs-keyword">begin</span><br>            overflow_flag_reg = <span class="hljs-number">1</span>;<br>            underflow_flag_reg = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            overflow_flag_reg = <span class="hljs-number">0</span>;<br>            underflow_flag_reg = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        overflow_flag_reg = <span class="hljs-number">0</span>;<br>        underflow_flag_reg = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">assign</span> sf_exponent = temp_result[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br><br><span class="hljs-keyword">assign</span> sf_sign = ff_sign_reg;<br><br><span class="hljs-comment">////Second-order flow</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst) <span class="hljs-keyword">begin</span><br>        sf_sign_reg &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        sf_exponent_reg &lt;= <span class="hljs-number">8&#x27;b0</span>;<br>        sf_significand_reg &lt;= <span class="hljs-number">23&#x27;b0</span>;<br>        overflow_flag &lt;= <span class="hljs-number">0</span>;<br>        underflow_flag &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        sf_sign_reg = sf_sign;<br>        sf_exponent_reg = sf_exponent;<br>        sf_significand_reg = sf_significand;  <br>        overflow_flag &lt;= overflow_flag_reg;<br>        underflow_flag &lt;= underflow_flag_reg;      <br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">//Pack</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(overflow_flag) <span class="hljs-keyword">begin</span><br>        result = &#123;sf_sign_reg, <span class="hljs-number">8&#x27;b1111_1111</span>, <span class="hljs-number">23&#x27;b0</span>&#125;;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(underflow_flag) <span class="hljs-keyword">begin</span><br>        result = &#123;sf_sign_reg, <span class="hljs-number">8&#x27;b1111_1111</span>, <span class="hljs-number">23&#x27;b0</span>&#125;;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        result = &#123;sf_sign_reg, sf_exponent_reg, sf_significand_reg&#125;;        <br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h2 id="浮点加法器"><a href="#浮点加法器" class="headerlink" title="浮点加法器"></a>浮点加法器</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> FP_Add #(<br>    <span class="hljs-keyword">parameter</span> DATA_WIDTH = <span class="hljs-number">32</span>,<br>    <span class="hljs-keyword">parameter</span> EXP_WIDTH = <span class="hljs-number">8</span>,<br>    <span class="hljs-keyword">parameter</span> SIGN_WIDTH = <span class="hljs-number">23</span><br>) (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> rst,<br>    <span class="hljs-keyword">input</span> [DATA_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] float_x,<br>    <span class="hljs-keyword">input</span> [DATA_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] float_y,<br>    <span class="hljs-keyword">input</span> round_cfg,<br>    <span class="hljs-keyword">input</span> valid_in,<br>    <span class="hljs-keyword">output</span> valid_out,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [DATA_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] result,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> overflow_flag,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> underflow_flag<br>);<br><br><span class="hljs-comment">//reg [8-1:0] biasComplement = 8&#x27;b1000_0001;//-127</span><br><span class="hljs-comment">//reg [8-1:0] biasSource = 8&#x27;b0111_1111;//127</span><br><br><span class="hljs-comment">// Unpack stage</span><br><span class="hljs-keyword">reg</span> sign_x, sign_y;<br><span class="hljs-keyword">reg</span> [EXP_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] exponent_x, exponent_y;<br><span class="hljs-keyword">reg</span> [SIGN_WIDTH+<span class="hljs-number">1</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] significand_x, significand_y;<br><br><span class="hljs-comment">// First-stage outputs</span><br><span class="hljs-keyword">wire</span> ff_sign;<br><span class="hljs-keyword">wire</span> [EXP_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ff_larger_exp;<br><span class="hljs-keyword">wire</span> [SIGN_WIDTH+<span class="hljs-number">1</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ff_aligned_sig_smaller, ff_original_sig_larger;<br><span class="hljs-keyword">wire</span> ff_swap;<br><br><span class="hljs-comment">// First-stage outputs</span><br><span class="hljs-keyword">reg</span> ff_sign_reg;<br><span class="hljs-keyword">reg</span> [EXP_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ff_exponent_reg;<br><span class="hljs-keyword">reg</span> [SIGN_WIDTH+<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ff_significand_reg;<br><span class="hljs-keyword">reg</span> ff_valid_out;<br><br><span class="hljs-comment">// Second-stage inputs</span><br><span class="hljs-keyword">reg</span> sf_sign_reg;<br><span class="hljs-keyword">reg</span> [EXP_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sf_exponent_reg;<br><span class="hljs-keyword">reg</span> [SIGN_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sf_significand_reg;<br><br><span class="hljs-comment">// Second-stage outputs</span><br><span class="hljs-keyword">wire</span> sf_sign;<br><span class="hljs-keyword">wire</span> [EXP_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sf_exponent;<br><span class="hljs-keyword">reg</span> [SIGN_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sf_significand;<br><span class="hljs-keyword">reg</span> sf_valid_out;<br><br><span class="hljs-comment">// Unpack</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    sign_x &lt;= float_x[DATA_WIDTH-<span class="hljs-number">1</span>];<br>    exponent_x &lt;= float_x[DATA_WIDTH-<span class="hljs-number">2</span>-:EXP_WIDTH];<br>    significand_x &lt;= &#123;<span class="hljs-number">1&#x27;b1</span>, float_x[SIGN_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]&#125;;<br>    <br>    sign_y &lt;= float_y[DATA_WIDTH-<span class="hljs-number">1</span>];<br>    exponent_y &lt;= float_y[DATA_WIDTH-<span class="hljs-number">2</span>-:EXP_WIDTH];<br>    significand_y &lt;= &#123;<span class="hljs-number">1&#x27;b1</span>, float_y[SIGN_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]&#125;;<br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-comment">// Special cases detection</span><br><span class="hljs-keyword">wire</span> Zero_flag_x, Zero_flag_y;<br><span class="hljs-keyword">assign</span> Zero_flag_x = float_x[DATA_WIDTH-<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>;<br><span class="hljs-keyword">assign</span> Zero_flag_y = float_y[DATA_WIDTH-<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// First stage: Exponent comparison and significand alignment</span><br><span class="hljs-comment">//x绝对值是否小于y</span><br><span class="hljs-keyword">assign</span> ff_swap = (exponent_x &lt; exponent_y) || <br>                 ((exponent_x == exponent_y) &amp;&amp; (significand_x &lt; significand_y));<br><br><span class="hljs-comment">//选出较大的指数</span><br><span class="hljs-keyword">assign</span> ff_larger_exp = ff_swap ? exponent_y : exponent_x;<br><span class="hljs-comment">//如果x绝对值小于y，那么计算完成的符号位就是y</span><br><span class="hljs-keyword">assign</span> ff_sign = ff_swap ? sign_y : sign_x;<br><br><span class="hljs-keyword">wire</span> [EXP_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] exp_diff;<br><span class="hljs-comment">//计算阶码的差</span><br><span class="hljs-keyword">assign</span> exp_diff = ff_swap ? (exponent_y - exponent_x) : (exponent_x - exponent_y);<br><span class="hljs-comment">//分配较小的尾数和较大的尾数</span><br><span class="hljs-keyword">wire</span> [SIGN_WIDTH+<span class="hljs-number">1</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sig_smaller;<br><span class="hljs-keyword">assign</span> sig_smaller = ff_swap ? significand_x : significand_y;<br><span class="hljs-keyword">wire</span> [SIGN_WIDTH+<span class="hljs-number">1</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sig_larger;<br><span class="hljs-keyword">assign</span> sig_larger = ff_swap ? significand_y : significand_x;<br><br><br><span class="hljs-comment">// Align smaller significand</span><br><span class="hljs-comment">//对阶，较小的尾数右移，较大的尾数保持不变</span><br><span class="hljs-comment">//此处有一定的精度损失，因为右移之后，有效位全部损失</span><br><span class="hljs-keyword">assign</span> ff_aligned_sig_smaller = sig_smaller &gt;&gt; (exp_diff &gt; SIGN_WIDTH+<span class="hljs-number">1</span> ? SIGN_WIDTH+<span class="hljs-number">1</span> : exp_diff);<br><span class="hljs-keyword">assign</span> ff_original_sig_larger = sig_larger;<br><br><br><span class="hljs-comment">// Second stage: Addition and normalization</span><br><span class="hljs-keyword">reg</span> [SIGN_WIDTH+<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ff_add_result;<br><span class="hljs-keyword">reg</span> ff_sign_a, ff_sign_b;<br><span class="hljs-keyword">reg</span> [SIGN_WIDTH+<span class="hljs-number">1</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ff_sig_a, ff_sig_b;<br><br><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-comment">// Determine operation (add or subtract based on signs)</span><br>    ff_sign_a = ff_sign; <span class="hljs-comment">//绝对值较大的符号位</span><br>    ff_sign_b = ff_swap ? sign_x : sign_y; <span class="hljs-comment">//绝对值较小的符号位</span><br>    <br>    ff_sig_a = ff_original_sig_larger; <span class="hljs-comment">//较大的尾数</span><br>    ff_sig_b = ff_aligned_sig_smaller; <span class="hljs-comment">//较小的尾数</span><br>    <br>    <span class="hljs-keyword">if</span> (ff_sign_a == ff_sign_b) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// Same sign - add</span><br>        ff_add_result = ff_sig_a + ff_sig_b;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// Different signs - subtract //如果a的尾数大于b的尾数，那么结果就是a的符号，且尾数=a-b</span><br>        ff_add_result = ff_sig_a - ff_sig_b;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-comment">// First-stage pipeline registers</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst) <span class="hljs-keyword">begin</span><br>        ff_sign_reg &lt;= <span class="hljs-number">0</span>;<br>        ff_exponent_reg &lt;= <span class="hljs-number">0</span>;<br>        ff_significand_reg &lt;= <span class="hljs-number">0</span>;<br>        ff_valid_out &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        ff_sign_reg &lt;= ff_sign_a; <span class="hljs-comment">//绝对值较大的符号位</span><br>        ff_exponent_reg &lt;= ff_larger_exp; <span class="hljs-comment">//较大的阶数</span><br>        ff_significand_reg &lt;= ff_add_result; <span class="hljs-comment">//相加或者相减的结果</span><br>        ff_valid_out &lt;= valid_in;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">/******************************************************************************************************/</span><br><span class="hljs-comment">//第二级流水</span><br><br><span class="hljs-comment">// Normalization</span><br><span class="hljs-keyword">reg</span> [SIGN_WIDTH+<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] Norm;<br><br><span class="hljs-comment">// 前导零预测（简化版，实际需LZD模块）</span><br><span class="hljs-keyword">function</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] leading_zero_count;<br>    <span class="hljs-keyword">input</span> [SIGN_WIDTH+<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] data;<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">reg</span> found_one;<br>    <span class="hljs-keyword">begin</span><br>        leading_zero_count = <span class="hljs-number">0</span>;<br>        found_one = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (data[SIGN_WIDTH+<span class="hljs-number">1</span>] == <span class="hljs-number">1&#x27;b0</span>) <span class="hljs-keyword">begin</span>  <span class="hljs-comment">// 仅在最高位是0时计数</span><br>            <span class="hljs-keyword">for</span> (i = SIGN_WIDTH; i &gt;= <span class="hljs-number">0</span>; i = i - <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span> (!found_one) <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span> (data[i] == <span class="hljs-number">1&#x27;b0</span>)<br>                        leading_zero_count = leading_zero_count + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">else</span><br>                        found_one = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            leading_zero_count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endfunction</span><br><br><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] lzc;<br><span class="hljs-keyword">assign</span> lzc = leading_zero_count(ff_significand_reg);<br><span class="hljs-keyword">reg</span> [EXP_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] temp_exponent;<br><span class="hljs-comment">//规格化</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (ff_significand_reg != <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (ff_significand_reg[SIGN_WIDTH+<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            temp_exponent = ff_exponent_reg + <span class="hljs-number">1</span>;<br>            Norm = ff_significand_reg &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lzc &gt; <span class="hljs-number">0</span>)<span class="hljs-keyword">begin</span><br>            temp_exponent = ff_exponent_reg - lzc;<br>            Norm = ff_significand_reg &lt;&lt; lzc;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            temp_exponent = ff_exponent_reg;<br>            Norm = ff_significand_reg;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        temp_exponent = <span class="hljs-number">0</span>;<br>        Norm = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// Rounding</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (Norm != <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (round_cfg) <span class="hljs-keyword">begin</span> <span class="hljs-comment">//就近舍入</span><br>            sf_significand = Norm[SIGN_WIDTH-<span class="hljs-number">1</span>-:SIGN_WIDTH] + Norm[<span class="hljs-number">0</span>] * <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span> <span class="hljs-comment">//直接截取</span><br>            sf_significand = Norm[SIGN_WIDTH-<span class="hljs-number">1</span>-:SIGN_WIDTH];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        sf_significand = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><br><span class="hljs-comment">//Overflow or Underflow judgment</span><br><span class="hljs-keyword">reg</span> overflow_flag_reg;<br><span class="hljs-keyword">reg</span> underflow_flag_reg;<br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (temp_exponent != <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (&amp;temp_exponent[EXP_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span> <span class="hljs-comment">//如果结果是全1，即指数等于255，实际指数128，则发生了上溢，是由于指数进位导致的</span><br>            overflow_flag_reg = <span class="hljs-number">1</span>;<br>            underflow_flag_reg = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span> <span class="hljs-comment">//浮点数相加，对阶的过程是向大的阶数对阶，而负指数即使进位，也是加1，不会发生下溢</span><br>            overflow_flag_reg = <span class="hljs-number">0</span>;<br>            underflow_flag_reg = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        overflow_flag_reg = <span class="hljs-number">0</span>;<br>        underflow_flag_reg = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">assign</span> sf_exponent = temp_exponent[EXP_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>];<br><span class="hljs-keyword">assign</span> sf_sign = ff_sign_reg;<br><br><br><br><span class="hljs-comment">// Second-stage pipeline registers</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst) <span class="hljs-keyword">begin</span><br>        sf_sign_reg &lt;= <span class="hljs-number">0</span>;<br>        sf_exponent_reg &lt;= <span class="hljs-number">0</span>;<br>        sf_significand_reg &lt;= <span class="hljs-number">0</span>;<br>        sf_valid_out &lt;= <span class="hljs-number">0</span>;<br>        overflow_flag &lt;= <span class="hljs-number">0</span>;<br>        underflow_flag &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        sf_sign_reg &lt;= sf_sign;<br>        sf_exponent_reg &lt;= sf_exponent;<br>        sf_significand_reg &lt;= sf_significand;<br>        sf_valid_out &lt;= ff_valid_out;<br>        overflow_flag &lt;= overflow_flag_reg;<br>        underflow_flag &lt;= underflow_flag_reg;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-comment">// Pack final result</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst) <span class="hljs-keyword">begin</span><br>        result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sf_valid_out) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (overflow_flag) <span class="hljs-keyword">begin</span><br>            result = &#123;sf_sign_reg, &#123;EXP_WIDTH&#123;<span class="hljs-number">1&#x27;b1</span>&#125;&#125;, &#123;SIGN_WIDTH&#123;<span class="hljs-number">1&#x27;b0</span>&#125;&#125; &#125;; <span class="hljs-comment">// Infinity</span><br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (underflow_flag) <span class="hljs-keyword">begin</span><br>            result = &#123;sf_sign_reg, &#123;EXP_WIDTH&#123;<span class="hljs-number">1&#x27;b1</span>&#125;&#125;, &#123;SIGN_WIDTH&#123;<span class="hljs-number">1&#x27;b0</span>&#125;&#125; &#125;; <span class="hljs-comment">// Infinity</span><br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            result = &#123;sf_sign_reg, sf_exponent_reg, sf_significand_reg&#125;;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">assign</span> valid_out = sf_valid_out;<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="序列检测器"><a href="#序列检测器" class="headerlink" title="序列检测器"></a>序列检测器</h2><p>使用移位寄存器实现</p><p>使用状态机实现，几位就几个状态，画出状态转移图</p><h2 id="分频器"><a href="#分频器" class="headerlink" title="分频器"></a>分频器</h2><p>任意偶数分频，任意奇数分频，任意小数分频</p><p>偶数的简单，是几分频，计数几次就行，占空比也通过计数值决定</p><p>奇数分频，是几分频，计数几次，然后分别使用上升沿和下降沿，产生两个分频，根据占空比决定，每个分频的占空比，两个分频相差0.5个周期，取与的话，就是各个占空比加0.5，取或就是各个占空比-0.5，这样就可以产生任意奇数分频，非常规占空比的分配器</p><p>小数分频</p><p>例如 17&#x2F;3</p><p>除数 5，余数 2，17个周期内，进行3次分频，5分频和7分频</p><h2 id="边沿检测"><a href="#边沿检测" class="headerlink" title="边沿检测"></a>边沿检测</h2><p>上升沿，下降沿，双边沿（异或），都是采用打两拍的方式</p><h2 id="握手信号"><a href="#握手信号" class="headerlink" title="握手信号"></a>握手信号</h2><p>上游下游的握手</p><h2 id="流水线握手断流与反压"><a href="#流水线握手断流与反压" class="headerlink" title="流水线握手断流与反压"></a>流水线握手断流与反压</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> pipeline_handshake(<br>  <span class="hljs-keyword">input</span>                 clk                     ,<br>  <span class="hljs-keyword">input</span>                 rstn                    ,<br>  <span class="hljs-keyword">input</span>         [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]   a2,a3,a4,b2,b3,b4       ,<br>  <span class="hljs-keyword">input</span>         [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]   c1,c2,c3,c4             ,<br>  <span class="hljs-keyword">output</span>  <span class="hljs-keyword">reg</span>   [<span class="hljs-number">19</span>:<span class="hljs-number">0</span>]  result                  ,<br> <br>  <span class="hljs-keyword">input</span>                 ready_i                 ,<br>  <span class="hljs-keyword">input</span>                 valid_i                 ,<br>  <span class="hljs-keyword">output</span>                ready_o                 ,<br>  <span class="hljs-keyword">output</span>                valid_o                 <br>);<br> <br><span class="hljs-keyword">wire</span> ready_r1,ready_r2;<br><span class="hljs-keyword">reg</span> valid_r1,valid_r2,valid_r3;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] a1,b1;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] a2_r1,a3_r1,a4_r1,b2_r1,b3_r1,b4_r1;<br> <br><span class="hljs-keyword">reg</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] temp1,temp2,temp3,temp4;<br> <br><span class="hljs-comment">//pipeline stage 1</span><br><span class="hljs-keyword">assign</span> ready_o = ~valid_r1 || ready_r1;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(!rstn)<span class="hljs-keyword">begin</span><br>    valid_r1 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ready_o)<span class="hljs-keyword">begin</span>    <span class="hljs-comment">//如果本级准备好了，则将上一级的valid信号传递过来</span><br>    valid_r1 &lt;= valid_i;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(ready_o &amp;&amp; valid_i)<span class="hljs-keyword">begin</span> <span class="hljs-comment">//输入数据ready_valid信号同时拉高时，数据有效并传入</span><br>    a1 &lt;= c1 + c2;<br>    b1 &lt;= c3 + c4;<br>    a2_r1 &lt;= a2; a3_r1 &lt;= a3; a4_r1 &lt;= a4; <span class="hljs-comment">//数据进来打一拍到第二级流水</span><br>    b2_r1 &lt;= b2; b3_r1 &lt;= b3; b4_r1 &lt;= b4;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//pipeline stage 2</span><br><span class="hljs-keyword">assign</span> ready_r1 = ~valid_r2 || ready_r2;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(!rstn)<span class="hljs-keyword">begin</span><br>    valid_r2 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ready_r1)<span class="hljs-keyword">begin</span>   <span class="hljs-comment">//如果本级准备好了，则将上一级的valid信号传递过来</span><br>    valid_r2 &lt;= valid_r1;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(ready_r1 &amp;&amp; valid_r1)<span class="hljs-keyword">begin</span><br>    temp1 &lt;= a1    * b1;<br>    temp2 &lt;= a2_r1 * b2_r1;<br>    temp3 &lt;= a3_r1 * b3_r1;<br>    temp4 &lt;= a4_r1 * b4_r1;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br> <br><span class="hljs-comment">//pipeline stage 3</span><br><span class="hljs-keyword">assign</span> ready_r2 = ~valid_r3 || ready_i;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(!rstn)<span class="hljs-keyword">begin</span><br>    valid_r3 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ready_r2)<span class="hljs-keyword">begin</span><br>    valid_r3 &lt;= valid_r2;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(ready_r2 &amp;&amp; valid_r2)<span class="hljs-keyword">begin</span><br>    result &lt;= temp1 + temp2 + temp3 + temp4;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">assign</span> valid_o = valid_r3;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="状态机饮料机"><a href="#状态机饮料机" class="headerlink" title="状态机饮料机"></a>状态机饮料机</h2><h2 id="数据位宽转换器"><a href="#数据位宽转换器" class="headerlink" title="数据位宽转换器"></a>数据位宽转换器</h2><p><strong>宽-窄，</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> wide_to_narrow(<br>    <span class="hljs-keyword">input</span>           rstn      ,<br>    <span class="hljs-keyword">input</span>           clk1      ,<br>    <span class="hljs-keyword">input</span>   [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>]  data_in   ,<br>    <span class="hljs-keyword">output</span>  [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]  data_out  <br>);<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] data_sync;<br><span class="hljs-keyword">reg</span> clk2;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk1)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(!rstn)<span class="hljs-keyword">begin</span><br>    clk2 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>    clk2 &lt;= ~clk2; <span class="hljs-comment">//div_2</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk2)<span class="hljs-keyword">begin</span><br>  data_sync &lt;= data_in;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">assign</span> data_out = clk2 ? data_sync[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>] : data_sync[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p><strong>窄-宽</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> narrow_to_wide(<br>    <span class="hljs-keyword">input</span>              rstn      ,<br>    <span class="hljs-keyword">input</span>              clk1      ,<br>    <span class="hljs-keyword">input</span>      [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]  data_in   ,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>]  data_out  <br>);<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>]  data_sync;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]  data_temp;<br><span class="hljs-keyword">reg</span> clk2;<br> <br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk1)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(!rstn)<span class="hljs-keyword">begin</span><br>    clk2 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>    clk2 &lt;= ~clk2; <span class="hljs-comment">//div_2</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk1)<span class="hljs-keyword">begin</span><br>  data_temp &lt;= data_in;<br>  data_sync &lt;= &#123;data_temp,data_in&#125;;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk2)<span class="hljs-keyword">begin</span><br>  data_out &lt;= data_sync;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="倍频"><a href="#倍频" class="headerlink" title="倍频"></a>倍频</h2><p><strong>二倍频</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> double_f(<br>    <span class="hljs-keyword">input</span>   clk     ,<br>    <span class="hljs-keyword">input</span>   rstn    ,<br>    <span class="hljs-keyword">output</span>  clk_out<br>);<br> <br><span class="hljs-keyword">reg</span> Q;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] count;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_out <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn)<span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!rstn)<span class="hljs-keyword">begin</span><br>        Q &lt;= <span class="hljs-number">0</span>;<br>        count &lt;= <span class="hljs-number">1&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        Q &lt;= ~Q;<br>        count &lt;= count + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br> <br><span class="hljs-keyword">assign</span> clk_out = Q ^ clk;<br> <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p><strong>四倍频</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> four_f(<br><span class="hljs-keyword">input</span> clk     ,<br><span class="hljs-keyword">input</span> rstn    ,<br><span class="hljs-keyword">output</span> clk_out <br>);<br> <br><span class="hljs-keyword">wire</span> clk_out_temp1,clk_out_temp2;<br><span class="hljs-keyword">reg</span> Q,Q1;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] count;<br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk_out_temp1 <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(!rstn)<span class="hljs-keyword">begin</span><br>    Q &lt;= <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">end</span> <br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>    Q &lt;= ~Q;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br> <br><span class="hljs-keyword">assign</span> clk_out_temp1 = Q^clk;<br> <br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk_out_temp2 <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(!rstn)<span class="hljs-keyword">begin</span><br>    Q1 &lt;= <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">end</span> <br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>    Q1 &lt;= ~Q1;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br> <br><span class="hljs-keyword">assign</span> clk_out_temp2 = Q1^clk_out_temp1;<br><span class="hljs-keyword">assign</span> clk_out = clk_out_temp1 ^ clk_out_temp2;<br> <br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_out <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn)<span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">if</span>(!rstn)<span class="hljs-keyword">begin</span><br>    count &lt;= <span class="hljs-number">1&#x27;d0</span>;<br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>    count &lt;= count + <span class="hljs-number">1&#x27;b1</span>;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br> <br><span class="hljs-keyword">endmodule</span><br> <br></code></pre></td></tr></table></figure><h2 id="仲裁器"><a href="#仲裁器" class="headerlink" title="仲裁器"></a>仲裁器</h2><h3 id="固定优先级仲裁器"><a href="#固定优先级仲裁器" class="headerlink" title="固定优先级仲裁器"></a>固定优先级仲裁器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 以三个优先级为例</span><br><span class="hljs-keyword">module</span> fixed_pri_arb(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] req;<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] grant<br>);<br>    <span class="hljs-keyword">always</span>@(*)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span>(<span class="hljs-number">1&#x27;b1</span>)<br>            req[<span class="hljs-number">0</span>]:grant = <span class="hljs-number">3&#x27;b001</span>;<br>            req[<span class="hljs-number">1</span>]:grant = <span class="hljs-number">3&#x27;b010</span>;<br>            req[<span class="hljs-number">2</span>]:grant = <span class="hljs-number">3&#x27;b100</span>;<br>            <span class="hljs-keyword">default</span>: grant = <span class="hljs-number">3&#x27;b000</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-comment">// 参数化设计</span><br><span class="hljs-keyword">module</span> fixed_pri_arb#(<br>    <span class="hljs-keyword">parameter</span> REQ_WIDTH = <span class="hljs-number">16</span>)<br>    (<br>        <span class="hljs-keyword">input</span> [ REQ_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] req;<br>        <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [ REQ_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] grant<br>    );<br><br>    <span class="hljs-keyword">reg</span> [REQ_WIDTH-<span class="hljs-number">1</span>] pre_req;<span class="hljs-comment">//为了记录低位是否已经有了request。</span><br><br>    <span class="hljs-keyword">always</span>@(*)<span class="hljs-keyword">begin</span><br>        pre_req[<span class="hljs-number">0</span>] = req[<span class="hljs-number">0</span>];<br>        grant = req[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;REQ_WIDTH;i = i+<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span><br>            grant[i] = req[i]&amp;!pre_req[i-<span class="hljs-number">1</span>];<br>            pre_req[i] = req[i] | pre_req[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-comment">//就是如果第i位的req为第一个1，那么pre_req从i+1位开始每一位都是1，而第0位到第i位都是0。这其实就是我们要找的mask! 只需要把req和上一个周期的pre_req AND起来，那么我们自然就得到了一个新的request</span><br><span class="hljs-keyword">module</span> fixed_pri_arb#(<br>    <span class="hljs-keyword">parameter</span> REQ_WIDTH = <span class="hljs-number">16</span>)<br>    (<br>        <span class="hljs-keyword">input</span> [REQ_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] req;<br>        <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [REQ_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] grant<br>    );<br><br>    <span class="hljs-keyword">reg</span> [REQ_WIDTH-<span class="hljs-number">1</span>] pre_req;<span class="hljs-comment">//为了记录低位是否已经有了request。</span><br><br>    <span class="hljs-keyword">assign</span> pre_req[<span class="hljs-number">0</span>] = <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">assign</span> pre_req[REQ_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>] = req[REQ_WIDTH-<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]|pre_req[REQ_WIDTH-<span class="hljs-number">2</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> grant = req &amp; ~pre_req;<br><br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-comment">// request和它的2的补码按位与</span><br><span class="hljs-keyword">module</span> fixed_pri_arb#(<br>    <span class="hljs-keyword">parameter</span> REQ_WIDTH = <span class="hljs-number">16</span>)<br>    (<br>        <span class="hljs-keyword">input</span> [ REQ_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] req;<br>        <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [ REQ_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] grant<br>    );<br>    <span class="hljs-keyword">assign</span> grant = req &amp; (~(req-<span class="hljs-number">1</span>));<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="轮询仲裁器"><a href="#轮询仲裁器" class="headerlink" title="轮询仲裁器"></a>轮询仲裁器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 优先级变化，request不变</span><br><span class="hljs-keyword">module</span> fixed_pri_arb_0 #(<br>    <span class="hljs-keyword">parameter</span> NUM_REQ = <span class="hljs-number">16</span>)<br>    (<br>        <span class="hljs-keyword">input</span> [NUM_REQ-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] req;<br>        <span class="hljs-keyword">input</span> [NUM_REQ-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] base; <br><span class="hljs-comment">// 是一个独热码，它为1的那一位表示这一位的优先级最高，然后其次是它的高位即左边的位，直到最高位后回到第0位绕回来，优先级依次降低，直到为1那一位右边的这位为最低。</span><br>        <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [NUM_REQ-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] grant<br>    );<br>    <br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>*NUM_REQ-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] double_req <br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>*NUM_REQ-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] double_gnt;<br>    <span class="hljs-keyword">assign</span> double_req = &#123;req,req&#125;;<br><br>    <span class="hljs-keyword">assign</span> double_gnt = double_req &amp; ~(double_req-base);<br>    <span class="hljs-keyword">assign</span> grant = double_gnt[NUM_REQ-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] | double_gnt[<span class="hljs-number">2</span>*NUM_REQ-<span class="hljs-number">1</span>:NUM_REQ];<br><br><span class="hljs-keyword">endmodule</span><br><br><br><span class="hljs-keyword">module</span> round_robin_arbiter_0 #(<br>    <span class="hljs-keyword">parameter</span> NUM_REQ = <span class="hljs-number">16</span>)<br>    (<br>        <span class="hljs-keyword">input</span> clk,<br>        <span class="hljs-keyword">input</span> rstn,<br>        <span class="hljs-keyword">input</span> [NUM_REQ-<span class="hljs-number">1</span>] <span class="hljs-keyword">reg</span>,<br>        <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [ NUM_REQ-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] gnt<br>    );<br><br>    <span class="hljs-keyword">wire</span> [NUM_REQ-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] hist_q,hist_d; <br>    <span class="hljs-comment">// 每个周期更新优先级</span><br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rstn) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(!rstn)<br>            hist_q &lt;= &#123;&#123;NUM_REQ-<span class="hljs-number">1</span>&#123;<span class="hljs-number">1&#x27;b0</span>&#125;&#125;,<span class="hljs-number">1&#x27;b1</span>&#125;;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">if</span>(|req)<br>                hist_q&lt;= &#123;gnt[NUM_REQ-<span class="hljs-number">2</span>:<span class="hljs-number">0</span>],gnt[NUM_REQ-<span class="hljs-number">1</span>]&#125;;<br>    <span class="hljs-keyword">end</span><br><br><br>fixed_pri_arb_0 #(<br>    <span class="hljs-variable">.NUM_REQ</span>(NUM_REQ)<br>) u_fixed_pri_arb_0(<br>    <span class="hljs-variable">.req</span>(req),<br>    <span class="hljs-variable">.gnt</span>(gnt),<br>    <span class="hljs-variable">.base</span>(hist_q)<br>);<br><br><span class="hljs-keyword">endmodule</span><br><br><br><span class="hljs-comment">// 优先级不变，但是我们从request入手：当某一路request已经grant之后，我们人为地把进入fixed priority arbiter的这一路req给屏蔽掉，这样相当于只允许之前没有grant的那些路去参与仲裁，grant一路之后就屏蔽一路，等到剩余的request都依次处理完了再把屏蔽放开，重新来过。这就是利用屏蔽mask的办法来实现round robin的思路。</span><br><span class="hljs-keyword">module</span> round_robin_arbiter_1 #(<br>    <span class="hljs-keyword">parameter</span> N = <span class="hljs-number">16</span><br>)(<br>    <span class="hljs-keyword">input</span>         clk,<br>    <span class="hljs-keyword">input</span>         rst,<br>    <span class="hljs-keyword">input</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] req,<br>    <span class="hljs-keyword">output</span>[N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] grant<br>);<br><br><span class="hljs-keyword">logic</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] req_masked;<br><span class="hljs-keyword">logic</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] mask_higher_pri_reqs;<br><span class="hljs-keyword">logic</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] grant_masked;<br><span class="hljs-keyword">logic</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] unmask_higher_pri_reqs;<br><span class="hljs-keyword">logic</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] grant_unmasked;<br><span class="hljs-keyword">logic</span> no_req_masked;<br><span class="hljs-keyword">logic</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] pointer_reg;<br><br><span class="hljs-comment">// Simple priority arbitration for masked portion</span><br><span class="hljs-keyword">assign</span> req_masked = req &amp; pointer_reg;<br><span class="hljs-keyword">assign</span> mask_higher_pri_reqs[N-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>] = mask_higher_pri_reqs[N-<span class="hljs-number">2</span>: <span class="hljs-number">0</span>] | req_masked[N-<span class="hljs-number">2</span>:<span class="hljs-number">0</span>];<br><span class="hljs-keyword">assign</span> mask_higher_pri_reqs[<span class="hljs-number">0</span>] = <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">assign</span> grant_masked[N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] = req_masked[N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] &amp; ~mask_higher_pri_reqs[N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>];<br><br><span class="hljs-comment">// Simple priority arbitration for unmasked portion</span><br><span class="hljs-keyword">assign</span> unmask_higher_pri_reqs[N-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>] = unmask_higher_pri_reqs[N-<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] | req[N-<span class="hljs-number">2</span>:<span class="hljs-number">0</span>];<br><span class="hljs-keyword">assign</span> unmask_higher_pri_reqs[<span class="hljs-number">0</span>] = <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">assign</span> grant_unmasked[N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] = req[N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] &amp; ~unmask_higher_pri_reqs[N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>];<br><br><span class="hljs-comment">// Use grant_masked if there is any there, otherwise use grant_unmasked. </span><br><br><span class="hljs-keyword">assign</span> no_req_masked = ~(|req_masked);<br><span class="hljs-keyword">assign</span> grant = (&#123;N&#123;no_req_masked&#125;&#125; &amp; grant_unmasked) | grant_masked;<br><br><span class="hljs-comment">// Pointer update</span><br><span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (rst) <span class="hljs-keyword">begin</span><br>        pointer_reg &lt;= &#123;N&#123;<span class="hljs-number">1&#x27;b1</span>&#125;&#125;;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (|req_masked) <span class="hljs-keyword">begin</span> <span class="hljs-comment">// Which arbiter was used?</span><br>        pointer_reg &lt;= mask_higher_pri_reqs;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (|req) <span class="hljs-keyword">begin</span> <span class="hljs-comment">// Only update if there&#x27;s a req </span><br>        pointer_reg &lt;= unmask_higher_pri_reqs;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/spx1164376416/article/details/124377534">verilog仲裁器设计-CSDN博客</a></p><h2 id="独热码转二进制"><a href="#独热码转二进制" class="headerlink" title="独热码转二进制"></a>独热码转二进制</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">function</span> <span class="hljs-keyword">integer</span> clogb2 (<span class="hljs-keyword">input</span> <span class="hljs-keyword">integer</span> bit_depth) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">for</span> (clogb2=<span class="hljs-number">0</span>; bit_depth&gt;<span class="hljs-number">0</span>; clogb2=clogb2+<span class="hljs-number">1</span>)<br>        bit_depth = bit_depth &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_57502075/article/details/127147485">数字IC手撕代码-乐鑫科技笔试真题（4倍频）_乐鑫科技ic验证工程师 笔试-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>IC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SystemVerilog语法</title>
    <link href="/2025/03/29/%E6%95%B0%E5%AD%97IC_SystemVerilog/"/>
    <url>/2025/03/29/%E6%95%B0%E5%AD%97IC_SystemVerilog/</url>
    
    <content type="html"><![CDATA[<h1 id="SystemVerilog语法总结"><a href="#SystemVerilog语法总结" class="headerlink" title="SystemVerilog语法总结"></a>SystemVerilog语法总结</h1><span id="more"></span><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>四状态类型</strong>（0，1，X，Z）</p><table><thead><tr><th align="left">类型</th><th></th></tr></thead><tbody><tr><td align="left">reg</td><td>单比特或多比特无符号数</td></tr><tr><td align="left">wire</td><td>线网</td></tr><tr><td align="left">integer</td><td>32比特有符号数</td></tr><tr><td align="left">time</td><td>64比特无符号数</td></tr><tr><td align="left">logic</td><td>对reg类型的改进，可以被连续赋值，门单元和模块驱动，只能有一个驱动</td></tr></tbody></table><p>四状态类型的默认值是X，线网类型默认输出Z，即高阻状态。</p><p><strong>二状态类型</strong>（0，1）</p><table><thead><tr><th>类型</th><th></th></tr></thead><tbody><tr><td>bit</td><td>单比特</td></tr><tr><td>bit [31:0] b32</td><td>32比特无符号整数</td></tr><tr><td>int unsigned  ui</td><td>32比特无符号整数</td></tr><tr><td>int i</td><td>32比特有符号整数</td></tr><tr><td>byte b8</td><td>8比特有符号整数</td></tr><tr><td>shortint s</td><td>16比特有符号整数</td></tr><tr><td>longint</td><td>64比特有符号整数</td></tr><tr><td>real</td><td>双精度浮点数</td></tr></tbody></table><p>二状态类型的默认值是0。</p><p><strong>动态数组</strong> (Dynamic arrays)</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">int</span> dyn[];<br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    dyn = <span class="hljs-keyword">new</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">foreach</span>(dyn[j]) dyn[j] = j;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><strong>队列</strong> (Queues)</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>, q[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;, q2[] = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    q<span class="hljs-variable">.insert</span>(<span class="hljs-number">1</span>,j);   <span class="hljs-comment">//&#123;0,1,2,5&#125;, 在元素序号1之前插入j</span><br>    q<span class="hljs-variable">.insert</span>(<span class="hljs-number">3</span>, q2); <span class="hljs-comment">//&#123;0,1,2,3,4,5&#125;, 在元素序号3之前插入q2</span><br>    q<span class="hljs-variable">.delete</span>(<span class="hljs-number">1</span>);     <span class="hljs-comment">//&#123;0,2,3,4,5&#125;</span><br>    q<span class="hljs-variable">.push_front</span>(<span class="hljs-number">6</span>); <span class="hljs-comment">//&#123;6,0,2,3,4,5&#125;, 在队列前面插入</span><br>    j = q<span class="hljs-variable">.pop_back</span>;  <span class="hljs-comment">//&#123;6,0,2,3,4&#125;, j = 5, 从队列末尾弹出一个元素，并返回</span><br>    q<span class="hljs-variable">.push_back</span>(<span class="hljs-number">8</span>);  <span class="hljs-comment">//&#123;6,0,2,3,4,8&#125;, 在队列末尾插入</span><br>    j = q<span class="hljs-variable">.pop_front</span>; <span class="hljs-comment">//&#123;0,2,3,4,8&#125;, j = 8, 从队列开头弹出一个元素，并返回</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><strong>关联数组</strong></p><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 interface</h2><p>interface + modport</p><p>interface 便于设计复用，特别是使用特定协议的情况；避免了反复的信号声明和连接</p><p>使用 modport 将信号分组并指定方向</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//接口定义</span><br><span class="hljs-keyword">interface</span> arb_if(<span class="hljs-keyword">input</span> <span class="hljs-keyword">bit</span> clk);<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] grant, request;<br>    <span class="hljs-keyword">logic</span> reset;<br>    <span class="hljs-keyword">modport</span> DUT (<span class="hljs-keyword">input</span> request, clk, reset, <span class="hljs-keyword">output</span> grant);<br>    <span class="hljs-keyword">modport</span> MONITOR (<span class="hljs-keyword">input</span> request, clk, reset, grant);<br><span class="hljs-keyword">endinterface</span> <br><br><span class="hljs-keyword">module</span> top_tb();<br><span class="hljs-keyword">bit</span> clk;<br>arb_if arbif(clk);<br>arb arb_1(arbif<span class="hljs-variable">.DUT</span>);<br><span class="hljs-keyword">endmodule</span>:top_tb<br><br><span class="hljs-keyword">module</span> arb (arb_if<span class="hljs-variable">.DUT</span> arbif);<br><span class="hljs-comment">//modport是在接口内部定义的，在信号名称中不能出现</span><br><span class="hljs-comment">//arb_if.DUT.clk是不对的</span><br><span class="hljs-keyword">logic</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] next_grant;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> arbif<span class="hljs-variable">.clk</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> arbif<span class="hljs-variable">.reset</span> ) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (arbif<span class="hljs-variable">.reset</span>) <span class="hljs-keyword">begin</span><br>        arbif<span class="hljs-variable">.grant</span> &lt;= <span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        arbif<span class="hljs-variable">.grant</span> &lt;= next_grant;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">case</span>(arbif<span class="hljs-variable">.grant</span>)<br>        <span class="hljs-number">2&#x27;b00</span>: next_grant &lt;= <span class="hljs-number">2&#x27;b01</span>;<br>        <span class="hljs-number">2&#x27;b01</span>: next_grant &lt;= <span class="hljs-number">2&#x27;b10</span>;<br>        <span class="hljs-number">2&#x27;b10</span>: next_grant &lt;= <span class="hljs-number">2&#x27;b11</span>;<br>        <span class="hljs-number">2&#x27;b11</span>: next_grant &lt;= <span class="hljs-number">2&#x27;b00</span>;<br>        <span class="hljs-keyword">default</span>: next_grant &lt;= <span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span>:arb<br><br></code></pre></td></tr></table></figure><h2 id="program"><a href="#program" class="headerlink" title="program"></a>program</h2><p>提供一个 testbench 执行的入口； </p><p>建立一个域来封装 test 使用的数据、任务和函数；</p><p>提供一个属于 test 的语法环境，在仿真调度时区别于 design；</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> counter(<span class="hljs-keyword">input</span> clk);<br><span class="hljs-keyword">bit</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] cnt;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    cnt &lt;= cnt + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;@%0t DUT cnt = %0d&quot;</span>, <span class="hljs-built_in">$time</span>, cnt);<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">program</span> dsample(<span class="hljs-keyword">input</span> clk);<br> <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>     @(<span class="hljs-keyword">posedge</span> clk); <br>     <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;@%0t TB cnt = %0d&quot;</span>, <span class="hljs-built_in">$time</span>, dut<span class="hljs-variable">.cnt</span>);<br>   <span class="hljs-keyword">end</span><br> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endprogram</span><br><br><span class="hljs-comment">//与直接在testbench中执行不同，program中采样在当前时间片已更新后的值。</span><br><span class="hljs-comment">//而设计模块和测试文件中，采样值均是更新之间的值，即上一个周期的值。</span><br><span class="hljs-keyword">module</span> tb;<br><span class="hljs-keyword">bit</span> clk1;<br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">forever</span> #<span class="hljs-number">5</span>ns clk1 &lt;= !clk1;<br><span class="hljs-keyword">end</span><br>counter dut(clk1);<br>dsample spl(clk1);<br><span class="hljs-comment">// always @(posedge clk1) begin</span><br><span class="hljs-comment">//     $display(&quot;@%0t TB cnt = %0d&quot;, $time, dut.cnt);</span><br><span class="hljs-comment">// end</span><br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-comment">//当program中的所有initial块都结束后，仿真结束，可以使用系统函数 $exit(); 可以显式结束。</span><br><br><br></code></pre></td></tr></table></figure><h2 id="module与class"><a href="#module与class" class="headerlink" title="module与class"></a>module与class</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">interface</span> regs_ini_if( <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> clk,rstn);<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cmd;<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] cmd_addr;<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] cmd_data_w;<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] cmd_data_r;<br><span class="hljs-keyword">endinterface</span>:regs_ini_if<br><br><span class="hljs-keyword">class</span> stm_ini;<br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">interface</span> regs_ini_if vif;<br>    <span class="hljs-keyword">localparam</span> IDLE=<span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">localparam</span> RD=<span class="hljs-number">2&#x27;b01</span>;<br>    <span class="hljs-keyword">localparam</span> WR=<span class="hljs-number">2&#x27;b10</span>;<br>    <span class="hljs-comment">//结构体定义</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cmd;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] cmd_addr;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] cmd_data_w;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] cmd_data_r;<br>    &#125;trans;<br>        <br>    trans ts[];<span class="hljs-comment">//动态数组</span><br>    <span class="hljs-keyword">task</span> op_rd(trans t);<br>        @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>         vif<span class="hljs-variable">.cmd</span> &lt;= t<span class="hljs-variable">.cmd</span>;<br>         vif<span class="hljs-variable">.cmd_addr</span> &lt;= t<span class="hljs-variable">.cmd_addr</span>;<br>    <span class="hljs-keyword">endtask</span><br>    <span class="hljs-keyword">task</span> op_idle();<br>        @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>        vif<span class="hljs-variable">.cmd</span> &lt;= IDLE;<br>        vif<span class="hljs-variable">.cmd_addr</span> &lt;= <span class="hljs-number">0</span>;<br>        vif<span class="hljs-variable">.cmd_data_w</span> &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">endtask</span><br>    <span class="hljs-keyword">task</span> op_wr(trans t);<br>        @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>        vif<span class="hljs-variable">.cmd</span> &lt;= t<span class="hljs-variable">.cmd</span>;<br>        vif<span class="hljs-variable">.cmd_addr</span> &lt;= t<span class="hljs-variable">.cmd_addr</span>;<br>        vif<span class="hljs-variable">.cmd_data_w</span> &lt;= t<span class="hljs-variable">.cmd_data_w</span>;<br>    <span class="hljs-keyword">endtask</span><br>    <span class="hljs-keyword">task</span> op_parse(trans t);<br>        <span class="hljs-keyword">case</span>(t<span class="hljs-variable">.cmd</span>)<br>            WR:op_wr(t);<br>            RD:op_rd(t);<br>            IDLE:op_idle();<br>            <span class="hljs-keyword">default</span>:<span class="hljs-built_in">$error</span>(<span class="hljs-string">&quot;invalid CMD!&quot;</span>);<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">endtask</span><br>    <span class="hljs-keyword">task</span> stmgen();<br>        <span class="hljs-keyword">wait</span>(vif!=<span class="hljs-literal">null</span>);<br>        @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.rstn</span>)<br>        <span class="hljs-keyword">foreach</span>(ts[i]) <span class="hljs-keyword">begin</span><br>            op_parse(ts[i]);<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">class</span> basic_test;<br>    <span class="hljs-keyword">int</span> def=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">int</span> fin;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">int</span> val);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;basic_test::new&quot;</span>);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;basic_test::def=%0d&quot;</span>,def);<br>        fin=val;<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;basic_test::fin=%0d&quot;</span>,fin);<br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> test(stm_ini ini);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;basic_test::test&quot;</span>);<br>    <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">class</span> test_wr <span class="hljs-keyword">extends</span> basic_test;<br>    <span class="hljs-keyword">localparam</span> IDLE=<span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">localparam</span> RD=<span class="hljs-number">2&#x27;b01</span>;<br>    <span class="hljs-keyword">localparam</span> WR=<span class="hljs-number">2&#x27;b10</span>;<br>    <span class="hljs-keyword">int</span> def=<span class="hljs-number">200</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(def);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;test_wr::new&quot;</span>);<br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">task</span> test(stm_ini ini);<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.test</span>(ini);<span class="hljs-comment">//调用父类的方法</span><br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;test_wr::test&quot;</span>);<br>        ini<span class="hljs-variable">.ts</span>=<span class="hljs-keyword">new</span>[<span class="hljs-number">2</span>];<br>        ini<span class="hljs-variable">.ts</span>[<span class="hljs-number">0</span>]<span class="hljs-variable">.cmd</span> = WR;<br>        ini<span class="hljs-variable">.ts</span>[<span class="hljs-number">0</span>]<span class="hljs-variable">.cmd_addr</span>=<span class="hljs-number">8&#x27;h08</span>;<br>        ini<span class="hljs-variable">.ts</span>[<span class="hljs-number">0</span>]<span class="hljs-variable">.cmd_data_w</span>=<span class="hljs-number">32&#x27;h0000_FFFF</span>;<br>        ini<span class="hljs-variable">.ts</span>[<span class="hljs-number">1</span>]<span class="hljs-variable">.cmd</span>=RD;<br>        ini<span class="hljs-variable">.ts</span>[<span class="hljs-number">1</span>]<span class="hljs-variable">.cmd_addr</span>=<span class="hljs-number">8&#x27;h16</span>;<br>        ini<span class="hljs-variable">.stmgen</span>();<br>        fin=<span class="hljs-number">150</span>;<br>     <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><span class="hljs-keyword">class</span> test_rd <span class="hljs-keyword">extends</span> basic_test;<br>    <span class="hljs-keyword">localparam</span> IDLE=<span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">localparam</span> RD=<span class="hljs-number">2&#x27;b01</span>;<br>    <span class="hljs-keyword">localparam</span> WR=<span class="hljs-number">2&#x27;b10</span>;<br>    <span class="hljs-keyword">int</span> def=<span class="hljs-number">150</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(def);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;test_rd::new&quot;</span>);<br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">task</span> test(stm_ini ini);<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.test</span>(ini);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;test_wr::test&quot;</span>);<br>        ini<span class="hljs-variable">.ts</span>=<span class="hljs-keyword">new</span>[<span class="hljs-number">2</span>];<br>        ini<span class="hljs-variable">.ts</span>[<span class="hljs-number">0</span>]<span class="hljs-variable">.cmd</span> = RD;<br>        ini<span class="hljs-variable">.ts</span>[<span class="hljs-number">0</span>]<span class="hljs-variable">.cmd_addr</span>=<span class="hljs-number">&#x27;h10</span>;<br>        ini<span class="hljs-variable">.ts</span>[<span class="hljs-number">1</span>]<span class="hljs-variable">.cmd</span>=RD;<br>        ini<span class="hljs-variable">.ts</span>[<span class="hljs-number">1</span>]<span class="hljs-variable">.cmd_addr</span>=<span class="hljs-number">&#x27;h14</span>;<br>        ini<span class="hljs-variable">.stmgen</span>();<br>        fin=<span class="hljs-number">200</span>;<br>     <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><span class="hljs-keyword">module</span> top;<br>    <span class="hljs-keyword">bit</span> clk,rstn;<br>    basic_test t = <span class="hljs-keyword">new</span>(<span class="hljs-number">500</span>);<br>    test_wr wr = <span class="hljs-keyword">new</span>();<br>    test_rd rd = <span class="hljs-keyword">new</span>();<br>    stm_ini ini = <span class="hljs-keyword">new</span>();<br>    regs_ini_if arbif(clk,rstn);<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        rstn = <span class="hljs-number">0</span>;<br>        clk = <span class="hljs-number">0</span>;<br>        arbif<span class="hljs-variable">.cmd</span> = <span class="hljs-number">0</span>;<br>        arbif<span class="hljs-variable">.cmd_addr</span> = <span class="hljs-number">0</span>;<br>        arbif<span class="hljs-variable">.cmd_data_w</span> = <span class="hljs-number">0</span>;<br>        arbif<span class="hljs-variable">.cmd_data_r</span> = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">200</span><br>        rstn = <span class="hljs-number">1</span>;<br>        ini<span class="hljs-variable">.vif</span> = arbif;<br>        t<span class="hljs-variable">.test</span>(ini);<br>        wr<span class="hljs-variable">.test</span>(ini);<br>        rd<span class="hljs-variable">.test</span>(ini);<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> #<span class="hljs-number">50</span> clk=~clk;<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><p>派生类中定义一个跟基类名字相同的变量或方法，</p><p>父类的变量并没有被覆盖掉</p><p>在子类中可以使用super.xx访问父类的变量，如：super.def，但是只能访 问到上一级，super.super.def是不可以的</p><p>function和task也是同样道理</p><p>子类例化时，会首先构造父类，即首先调用父类的new()，然后调用子类的new()</p><p>子类的new()可以显示的调用父类的super.new()，特别是当new(type var)有参数时</p><p>子类类型可以直接赋值给父类类型的句柄，反过来，父类给子类赋值是会报错的</p><p>对象的复制：句柄赋值，相当于指针赋值，空间上并没有增多一份</p><h2 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h2><p><strong>随机变量的声明</strong></p><p>rand和randc</p><p>使用rand&#x2F;randc修饰的变量， 在每次调用randomize()之后，会产生一个新的随机值</p><p>randc （random cyclic）每次 randomize 之后，都会产生一个与之前不重复的值，直到所有取值遍历一遍，然后才进行下一个循环。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> Packet;<br>    <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] src, dst, data[<span class="hljs-number">8</span>];<br>    <span class="hljs-keyword">randc</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] kind;<br><span class="hljs-keyword">endclass</span><br><br>Packet p;<br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    p = <span class="hljs-keyword">new</span>;<br>    <span class="hljs-keyword">assert</span>(p<span class="hljs-variable">.randomize</span>());<br>    transmit(p);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><strong>约束块</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> Stim；<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] SRC_CONGEST_ADDR = <span class="hljs-number">42</span>; <span class="hljs-comment">//常量</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123;READ, WRITE, CONTROL&#125; stim_t; <br>    <span class="hljs-comment">//枚举类型，通常是相同类型的整数，可以自动分配值，通过枚举名访问，成员固定且有限</span><br>    <span class="hljs-comment">//结构体，成员是不同类型的数据，通过结构体变量名和成员名访问，可以添加成员</span><br>    <span class="hljs-keyword">randc</span> stimt_t aa;<br>    <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] len, src, dst;<br>    <span class="hljs-keyword">bit</span> congestion_test;<br>    <br>    <span class="hljs-comment">//约束块的表达式</span><br>    <span class="hljs-comment">//一个表达式一个关系操作符，约束块内不能赋值</span><br>    <span class="hljs-keyword">constraint</span> c_stim&#123;<br>        len &lt; <span class="hljs-number">100</span>;<br>        len &gt; <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-comment">//权重设置，权重可以是变量</span><br>        src <span class="hljs-keyword">dist</span> &#123;<span class="hljs-number">0</span>:=<span class="hljs-number">40</span>, [<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]:=<span class="hljs-number">60</span>&#125;;<span class="hljs-comment">//取值范围中每个取值都是a, // 0 weight = 40/220</span><br>        src <span class="hljs-keyword">dist</span> &#123;<span class="hljs-number">0</span>:=<span class="hljs-number">40</span>, [<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]:/<span class="hljs-number">60</span>&#125;;<span class="hljs-comment">//取值范围中每个取值平分b, // 0 weight = 40/100</span><br>        <span class="hljs-comment">//可以使用变量作为上限和下限</span><br>        src <span class="hljs-keyword">inside</span> &#123;<span class="hljs-number">0</span>, [<span class="hljs-number">2</span>:<span class="hljs-number">10</span>], [<span class="hljs-number">100</span>:<span class="hljs-number">107</span>]&#125;;<br>        b <span class="hljs-keyword">inside</span> &#123;[$:<span class="hljs-number">4</span>], [<span class="hljs-number">20</span>:$]&#125;; <span class="hljs-comment">//可以使用“$”符号指代上下限,即该变量可能取值的最大和最小</span><br>        ! c <span class="hljs-keyword">inside</span> &#123;[lo:li]&#125;; <span class="hljs-comment">//取反，则为该集合的补集</span><br>        c <span class="hljs-keyword">inside</span> &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//数组内inside,如果数组内有重复元素，只相当于出现一次</span><br>        <span class="hljs-comment">//数组内的条件约束， 两种方式表述条件约束，1）if-else；2）-&gt; </span><br>        <span class="hljs-keyword">if</span>(congestion_test)&#123;<br>            dst <span class="hljs-keyword">inside</span> &#123;[SRC_CONGEST_ADDR-<span class="hljs-number">100</span>:SRC_CONGEST_ADDR+<span class="hljs-number">100</span>]&#125;;<br>        &#125;<br>    &#125;<br>    <br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p><strong>随机解的概率求解</strong></p><p>略</p><p>使用solve…before指向解约束的顺序</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">constraint</span> c_stim&#123;<br>    (x==<span class="hljs-number">0</span>) -&gt; (y==<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">solve</span> x <span class="hljs-keyword">before</span> y;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制约束块</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> Packet;<br>    <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] src, dst, data[<span class="hljs-number">8</span>];<br>    <span class="hljs-keyword">randc</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] kind;<br>    <span class="hljs-keyword">constraint</span> c4 &#123;<span class="hljs-keyword">foreach</span>(arr[i]) arr[i]<span class="hljs-variable">.cmd_data_r</span> == <span class="hljs-number">0</span>;&#125;;<br>    <span class="hljs-keyword">constraint</span> c5 &#123;arr<span class="hljs-variable">.size</span>() &gt;= <span class="hljs-number">5</span> &amp;&amp; arr<span class="hljs-variable">.size</span>() &lt;= <span class="hljs-number">6</span>;&#125;;<br><span class="hljs-keyword">endclass</span><br><br>p<span class="hljs-variable">.c4</span><span class="hljs-variable">.constraint_mode</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//关闭c4</span><br>p<span class="hljs-variable">.constraint_mode</span>(<span class="hljs-number">0</span>);  <span class="hljs-comment">//关闭所有</span><br>p<span class="hljs-variable">.c5</span><span class="hljs-variable">.constraint_mode</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//关闭c5</span><br><span class="hljs-keyword">assert</span> (p<span class="hljs-variable">.randomize</span>());<br><span class="hljs-comment">//使用randomize() with内嵌约束</span><br><span class="hljs-keyword">assert</span> (p<span class="hljs-variable">.randomize</span>() <span class="hljs-keyword">with</span> &#123;src &lt; <span class="hljs-number">10</span>； src &gt; <span class="hljs-number">2</span>&#125;);<span class="hljs-comment">//某些局部的、临时的约束，可简便使用该内嵌约束方法</span><br></code></pre></td></tr></table></figure><p><strong>常用的随机函数</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-built_in">$dist_exponential</span> — 指数分布；<br><span class="hljs-built_in">$dist_normal</span> — 正态分布；<br><span class="hljs-built_in">$dist_poisson</span>— 泊松分布；<br><span class="hljs-built_in">$dist_uniform</span> —均匀分布；<br><span class="hljs-built_in">$random</span> —均匀分布，返回一个<span class="hljs-number">32</span>位有符号数；<br>$urandom —均匀分布，返回一个<span class="hljs-number">32</span>位无符号数；<br>$urandom_range —均匀分布，从指定范围中随机选一个数；<br></code></pre></td></tr></table></figure><p><strong>随机种子seed</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">addr[<span class="hljs-number">32</span>:<span class="hljs-number">1</span>] = $urandom( <span class="hljs-number">254</span> );<br>addr2[<span class="hljs-number">32</span>:<span class="hljs-number">0</span>] = <span class="hljs-built_in">$random</span>( <span class="hljs-number">100</span> );<br></code></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">interface</span> regs_ini_if( <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> clk,rstn);<br>    <span class="hljs-comment">// logic rstn;</span><br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cmd;<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] cmd_addr;<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] cmd_data_w;<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] cmd_data_r;<br><span class="hljs-keyword">endinterface</span>:regs_ini_if<br><br><span class="hljs-keyword">class</span> incacc;<br>    <span class="hljs-keyword">localparam</span> IDLE=<span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">localparam</span> RD=<span class="hljs-number">2&#x27;b01</span>;<br>    <span class="hljs-keyword">localparam</span> WR=<span class="hljs-number">2&#x27;b10</span>;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-keyword">packed</span>&#123;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cmd;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] cmd_addr;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] cmd_data_w;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] cmd_data_r;<br>    &#125; trans;<br>    <span class="hljs-keyword">randc</span> trans arr[];<br>    <span class="hljs-keyword">constraint</span> c1 &#123;<span class="hljs-keyword">foreach</span>(arr[i]) arr[i]<span class="hljs-variable">.cmd</span> <span class="hljs-keyword">inside</span> &#123;IDLE, RD, WR&#125;;&#125;;<br>    <span class="hljs-keyword">constraint</span> c2 &#123;<span class="hljs-keyword">foreach</span>(arr[i]) arr[i]<span class="hljs-variable">.cmd_addr</span> <span class="hljs-keyword">inside</span> &#123;<span class="hljs-number">&#x27;h01</span>, <span class="hljs-number">&#x27;h4</span>, <span class="hljs-number">&#x27;h8</span>, <span class="hljs-number">&#x27;h10</span>, <span class="hljs-number">&#x27;h14</span>, <span class="hljs-number">&#x27;h18</span>&#125;;&#125;;<br>    <span class="hljs-keyword">constraint</span> c3 &#123;<span class="hljs-keyword">foreach</span>(arr[i]) arr[i]<span class="hljs-variable">.cmd_data_w</span> <span class="hljs-keyword">inside</span> &#123;[<span class="hljs-number">&#x27;h02</span> : <span class="hljs-number">&#x27;h10</span>]&#125;;&#125;;<br>    <span class="hljs-keyword">constraint</span> c4 &#123;<span class="hljs-keyword">foreach</span>(arr[i]) arr[i]<span class="hljs-variable">.cmd_data_r</span> == <span class="hljs-number">0</span>;&#125;;<br>    <span class="hljs-keyword">constraint</span> c5 &#123;arr<span class="hljs-variable">.size</span>() &gt;= <span class="hljs-number">5</span> &amp;&amp; arr<span class="hljs-variable">.size</span>() &lt;= <span class="hljs-number">6</span>;&#125;;<br>    <span class="hljs-keyword">constraint</span> c6 &#123;<span class="hljs-keyword">foreach</span>(arr[i]) (i &lt; arr<span class="hljs-variable">.size</span>()-<span class="hljs-number">1</span>) -&gt; arr[i]<span class="hljs-variable">.cmd_addr</span> &lt; arr[i+<span class="hljs-number">1</span>]<span class="hljs-variable">.cmd_addr</span>;&#125;;<br>    <span class="hljs-keyword">constraint</span> c7 &#123;arr[<span class="hljs-number">0</span>]<span class="hljs-variable">.cmd_addr</span> &lt; <span class="hljs-number">&#x27;h14</span>;&#125;;<br> <span class="hljs-keyword">endclass</span><br><br><br><br><span class="hljs-keyword">class</span> stm_ini;<br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">interface</span> regs_ini_if vif;<br>    <span class="hljs-keyword">localparam</span> IDLE=<span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">localparam</span> RD=<span class="hljs-number">2&#x27;b01</span>;<br>    <span class="hljs-keyword">localparam</span> WR=<span class="hljs-number">2&#x27;b10</span>;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-keyword">packed</span>&#123;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cmd;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] cmd_addr;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] cmd_data_w;<br>        <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] cmd_data_r;<br>    &#125;trans;<br>    trans ts[];<br>    <span class="hljs-keyword">task</span> op_rd(trans t);<br>        @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>         vif<span class="hljs-variable">.cmd</span> &lt;= t<span class="hljs-variable">.cmd</span>;<br>         vif<span class="hljs-variable">.cmd_addr</span> &lt;= t<span class="hljs-variable">.cmd_addr</span>;<br>    <span class="hljs-keyword">endtask</span><br>    <span class="hljs-keyword">task</span> op_idle(trans t);<br>        @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>        vif<span class="hljs-variable">.cmd</span> &lt;= t<span class="hljs-variable">.cmd</span>;<br>        vif<span class="hljs-variable">.cmd_addr</span> &lt;= <span class="hljs-number">0</span>;<br>        vif<span class="hljs-variable">.cmd_data_w</span> &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">endtask</span><br>    <span class="hljs-keyword">task</span> op_wr(trans t);<br>        @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>        vif<span class="hljs-variable">.cmd</span> &lt;= t<span class="hljs-variable">.cmd</span>;<br>        vif<span class="hljs-variable">.cmd_addr</span> &lt;= t<span class="hljs-variable">.cmd_addr</span>;<br>        vif<span class="hljs-variable">.cmd_data_w</span> &lt;= t<span class="hljs-variable">.cmd_data_w</span>;<br>    <span class="hljs-keyword">endtask</span><br>    <span class="hljs-keyword">task</span> op_parse(trans t);<br>        <span class="hljs-keyword">case</span>(t<span class="hljs-variable">.cmd</span>)<br>            WR:op_wr(t);<br>            RD:op_rd(t);<br>            IDLE:op_idle(t);<br>            <span class="hljs-keyword">default</span>:<span class="hljs-built_in">$error</span>(<span class="hljs-string">&quot;invalid CMD!&quot;</span>);<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">endtask</span><br>    <span class="hljs-keyword">task</span> stmgen();<br>        <span class="hljs-keyword">wait</span>(vif!=<span class="hljs-literal">null</span>);<br>        @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.rstn</span>);<br>            <span class="hljs-keyword">foreach</span>(ts[i]) <span class="hljs-keyword">begin</span><br>                op_parse(ts[i]);<br>            <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><span class="hljs-keyword">class</span> basic_test;<br>    <span class="hljs-keyword">int</span> def=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">int</span> fin;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">int</span> val);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;basic_test::new&quot;</span>);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;basic_test::def=%0d&quot;</span>,def);<br>        fin=val;<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;basic_test::fin=%0d&quot;</span>,fin);<br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> test(stm_ini ini);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;basic_test::test&quot;</span>);<br>    <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><span class="hljs-keyword">class</span> test_wr <span class="hljs-keyword">extends</span> basic_test;<br>    <span class="hljs-keyword">localparam</span> IDLE=<span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">localparam</span> RD=<span class="hljs-number">2&#x27;b01</span>;<br>    <span class="hljs-keyword">localparam</span> WR=<span class="hljs-number">2&#x27;b10</span>;<br>    <span class="hljs-keyword">int</span> def=<span class="hljs-number">200</span>;<br>    incacc acc = <span class="hljs-keyword">new</span>();<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(def);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;test_wr::new&quot;</span>);<br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">task</span> test(stm_ini ini);<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.test</span>(ini);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;test_wr::test&quot;</span>);<br>        <span class="hljs-keyword">assert</span>(acc<span class="hljs-variable">.randomize</span>());<br>        ini<span class="hljs-variable">.ts</span> = <span class="hljs-keyword">new</span>[acc<span class="hljs-variable">.arr</span><span class="hljs-variable">.size</span>()];<br>        ini<span class="hljs-variable">.ts</span> = acc<span class="hljs-variable">.arr</span>;<br>        ini<span class="hljs-variable">.stmgen</span>();<br>     <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><span class="hljs-keyword">class</span> test_rd <span class="hljs-keyword">extends</span> basic_test;<br>    <span class="hljs-keyword">localparam</span> IDLE=<span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">localparam</span> RD=<span class="hljs-number">2&#x27;b01</span>;<br>    <span class="hljs-keyword">localparam</span> WR=<span class="hljs-number">2&#x27;b10</span>;<br>    <span class="hljs-keyword">int</span> def=<span class="hljs-number">150</span>;<br>    incacc acc = <span class="hljs-keyword">new</span>();<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(def);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;test_rd::new&quot;</span>);<br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">task</span> test(stm_ini ini);<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.test</span>(ini);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;test_rd::test&quot;</span>);<br>        <span class="hljs-keyword">assert</span>(acc<span class="hljs-variable">.randomize</span>());<br>        ini<span class="hljs-variable">.ts</span> = <span class="hljs-keyword">new</span>[acc<span class="hljs-variable">.arr</span><span class="hljs-variable">.size</span>()];<br>        ini<span class="hljs-variable">.ts</span> = acc<span class="hljs-variable">.arr</span>;<br>        ini<span class="hljs-variable">.stmgen</span>();<br>        fin=<span class="hljs-number">200</span>;<br>     <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><span class="hljs-keyword">module</span> top;<br>    <span class="hljs-keyword">bit</span> clk,rstn;<br>    basic_test t = <span class="hljs-keyword">new</span>(<span class="hljs-number">500</span>);<br>    test_wr wr = <span class="hljs-keyword">new</span>();<br>    test_rd rd = <span class="hljs-keyword">new</span>();<br>    stm_ini ini = <span class="hljs-keyword">new</span>();<br>    regs_ini_if arbif(clk,rstn);<br>    <span class="hljs-keyword">always</span> #<span class="hljs-number">50</span> clk=~clk;<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        ini<span class="hljs-variable">.vif</span> = arbif;<br>        rstn = <span class="hljs-number">0</span>;<br>        clk = <span class="hljs-number">0</span>;<br>        arbif<span class="hljs-variable">.cmd</span> = <span class="hljs-number">0</span>;<br>        arbif<span class="hljs-variable">.cmd_addr</span> = <span class="hljs-number">0</span>;<br>        arbif<span class="hljs-variable">.cmd_data_w</span> = <span class="hljs-number">0</span>;<br>        arbif<span class="hljs-variable">.cmd_data_r</span> = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">200</span><br>        rstn = <span class="hljs-number">1</span>;<br>        t<span class="hljs-variable">.test</span>(ini);<br>        wr<span class="hljs-variable">.test</span>(ini);<br>        rd<span class="hljs-variable">.test</span>(ini);<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><strong>fork join &#x2F; fork join_any &#x2F; fork join_none 的区别</strong></p><p>块中的线程并行执行，</p><p>fork join 等待所有线程执行完才会执行后面程序</p><p>fork join_any 只要有一个线程结束，就可以执行后面的程序，其余线程自己执行结束即可</p><p>fork join_none 不需要任何线程结束，就可以执行后面的程序，仅仅将这些线程挂起，自己执行结束即可</p><p>begin end 包裹的为顺序块</p><p>fork join 包裹的为并行块</p><p><strong>wait fork</strong></p><p><strong>disable fork</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">task</span><br>    <span class="hljs-keyword">fork</span> <br>        check_trans(tr0);<br>        check_trans(tr1);<br>        check_trans(tr2);<br>    <span class="hljs-keyword">join_none</span><br><span class="hljs-keyword">wait</span> <span class="hljs-keyword">fork</span>;<br><span class="hljs-comment">//仿真时，当所有inital块都结束时， 仿真就结束了。但有些线程执行时间长，可以使用 wait fork 等待所有线程的结束    </span><br><span class="hljs-keyword">endtask</span><br>    <br><span class="hljs-keyword">task</span><br>    <span class="hljs-keyword">fork</span> : timeout_block<br>        check_trans(tr0);<br>        check_trans(tr1);<br>    <span class="hljs-keyword">join_any</span><br>    <span class="hljs-keyword">disable</span> timeout_block<br>    <span class="hljs-comment">//使用 disable停止一个线程</span><br>    check_trans(tr2);<br><span class="hljs-keyword">endtask</span><br>    <br><span class="hljs-keyword">task</span><br>    check_trans(tr0);<br>    <span class="hljs-keyword">fork</span> <br>        <span class="hljs-keyword">begin</span> <br>            check_trans(tr1);<br>            <span class="hljs-keyword">fork</span> <br>                check_trans(tr2);<br>            <span class="hljs-keyword">join</span><br>            <span class="hljs-keyword">disable</span> <span class="hljs-keyword">fork</span><br>            <span class="hljs-comment">//使用 disable fork 停止从当前线程中衍生出的所有子线程</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">join</span><br><br><span class="hljs-keyword">endtask</span>    <br><br></code></pre></td></tr></table></figure><p><strong>event</strong></p><p>将变量声明为event类型</p><p>使用 “-&gt;” 符号来触发一个事件</p><p>两种方式来等待 event 的 触发：使用“@”，以及使用 triggered 函数</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">event</span> done, blast;<br><span class="hljs-keyword">task</span> trigger (<span class="hljs-keyword">event</span> ev)<br>    -&gt;ev;<br><span class="hljs-keyword">endtask</span><br><br><span class="hljs-comment">//“@”是边沿触发，而：triggered的函数可以捕捉当前时间片已触发过的event</span><br><span class="hljs-keyword">fork</span> <br>    @ blast;<br>    #<span class="hljs-number">1</span> trigger(ev);<br><span class="hljs-keyword">join</span><br><br><span class="hljs-keyword">fork</span> <br>    <span class="hljs-keyword">wait</span>(blast<span class="hljs-variable">.triggered</span>());<br>    -&gt; done;<br><span class="hljs-keyword">join</span><br><br></code></pre></td></tr></table></figure><p><strong>旗语 semaphore</strong></p><p>使用旗语可以实现对同一资源的访问控制。相当于钥匙</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">program</span> <span class="hljs-keyword">automatic</span> test(bus_ifc<span class="hljs-variable">.TB</span> bus);<br>    semaphore sem;<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        sem = <span class="hljs-keyword">new</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">fork</span> <br>            sequencer();<br>            sequencer();<br>        <span class="hljs-keyword">join</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">task</span> sequencer();<br>        <span class="hljs-keyword">repeat</span>($urandom()%<span class="hljs-number">10</span>)<br>            @ bus<span class="hljs-variable">.cb</span>;<br>        sendTrans();<br>    <span class="hljs-keyword">endtask</span><br>    <br>    <span class="hljs-keyword">task</span> sendTrans();<br>        sem<span class="hljs-variable">.get</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//使用阻塞任务get得到一个或者多个钥匙</span><br>        @ bus<span class="hljs-variable">.cb</span>;<br>        bus<span class="hljs-variable">.cb</span><span class="hljs-variable">.addr</span> &lt;= t<span class="hljs-variable">.addr</span>;<br>        sem<span class="hljs-variable">.put</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//使用put可以归还一个或者多个钥匙</span><br>    <span class="hljs-keyword">endtask</span><br>    <br><span class="hljs-keyword">endprogram</span><br></code></pre></td></tr></table></figure><p><strong>信箱 mailbox</strong></p><p>用于线程间的信息交换；数据从一个线程产生，并传递给使用它的线程</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> Generator;<br>    Transcation tr;<br>    mailbox mbx;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (mailbox mbx);<br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.mbx</span> = mbx;<br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">task</span> run;<br>        <span class="hljs-keyword">repeat</span> (<span class="hljs-number">10</span>) <span class="hljs-keyword">begin</span><br>            tr = <span class="hljs-keyword">new</span>();<br>            <span class="hljs-keyword">assert</span>(tr<span class="hljs-variable">.randomize</span>());<br>            mbx<span class="hljs-variable">.put</span>(tr); <span class="hljs-comment">//产生10个随机事务，并放入信箱</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">class</span> Diver;<br>    Transcation tr;<br>    mailbox mbx;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (mailbox mbx);<br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.mbx</span> = mbx;<br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">task</span> run;<br>        <span class="hljs-keyword">repeat</span> (<span class="hljs-number">10</span>) <span class="hljs-keyword">begin</span><br>            mbx<span class="hljs-variable">.get</span>(tr); <span class="hljs-comment">//从mailbox接收10个随机事务</span><br>            @(<span class="hljs-keyword">posedge</span> bus_if<span class="hljs-variable">.cb</span><span class="hljs-variable">.clk</span>)<br>            bus<span class="hljs-variable">.cb</span><span class="hljs-variable">.kind</span> &lt;= tr<span class="hljs-variable">.kind</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><br>mailbox mbx;<br>Generator gen;<br>Driver drv;<br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    mbx = <span class="hljs-keyword">new</span>(); <span class="hljs-comment">//默认不设置size</span><br>    gen = <span class="hljs-keyword">new</span>(mbx);<br>    drv = <span class="hljs-keyword">new</span>(mbx);<br>        <span class="hljs-keyword">fork</span><br>            gen<span class="hljs-variable">.run</span>(); <br>            drv<span class="hljs-variable">.run</span>(); <br>        <span class="hljs-keyword">join</span><br> <span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><p>定容信箱</p><p>mailbox 构造函数 new 的缺省值是0，表示没有限值；非0正值表示其容量， 负值会引发错误</p><p>mailbox 中事务达到 size 限值后，put 操作将被 阻塞，直到 get 取走事务， 使得 mailbox 容量低于限值</p><p>使用 mailbox 实现线程同步</p><p>producer 产生一个事务，等待 consumer 执行完 成该事务后， producer 再产生下 一个事务</p><p>（1）使用 event </p><p>（2）使用 mailbox 的 peek()，peek 不取走事务， 只偷窥一下，完成之后，再 get 取走事务</p><p>（3）使用 2个 mailbox</p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>定义：断言又被称为监视器或者检验器，用于描述设计的属性 (property)，用于描述设计期望的行为，从而检验设计实际行为是否与设计意图相符</p><p>行为：如果允许的设计属性不符合我们的期望，则断言失败；如果被禁止的设计属性发生，则断言失败</p><p>用途：检查特定条件或事件序列的发生；提供功能覆盖点</p><p>分类：立即断言和并发断言</p><p><strong>立即断言</strong></p><p>对当前仿真时刻的条件判断，是非时序的，立即断言需要在过程块中定义的；当断言判断表达式中的任何信号发生变化，该检查都会被立即执行。</p><p>可以处于组合逻辑块，也可以处于时序逻辑块</p><p>在时序逻辑块中的立即断言，在每个时钟的上升沿都会去执行断言， 但立即断言的采样与赋值并<strong>不是采的时钟上升沿前</strong>的a、b值，而是<strong>当前仿真时间</strong>的值</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//立即断言</span><br><span class="hljs-comment">//立即断言放在时序逻辑块中</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    check1_a_and_b : <span class="hljs-keyword">assert</span> (a&amp;&amp;b) <span class="hljs-comment">//断言的标签：断言表达式一般为布尔表达式</span><br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;a&amp;&amp;b is true,Sequential logic&quot;</span>); <span class="hljs-comment">//执行块</span><br>    <span class="hljs-keyword">else</span>   <br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;a&amp;&amp;b is false,Sequential logic&quot;</span>);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//立即断言放在组合逻辑块中</span><br><span class="hljs-keyword">always_comb</span> <span class="hljs-keyword">begin</span><br>    check2_a_and_b : <span class="hljs-keyword">assert</span> (a&amp;&amp;b) <br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;a&amp;&amp;b is true,Combinatorial logic&quot;</span>); <br>    <span class="hljs-keyword">else</span>   <br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;a&amp;&amp;b is false,Combinatorial logic&quot;</span>);<br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><p>四个系统函数用于不同断言错误的严重等级，均用于打印信息。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-built_in">$fatal</span> <span class="hljs-comment">//a run-time fatal</span><br><span class="hljs-built_in">$error</span> <span class="hljs-comment">//a run-time error //默认情况下，断言失败的严重程度是一个error.</span><br><span class="hljs-built_in">$warning</span> <span class="hljs-comment">//a run-time warning.</span><br><span class="hljs-built_in">$info</span> <span class="hljs-comment">//nformation.</span><br></code></pre></td></tr></table></figure><p><strong>并发断言</strong></p><p>并发断言检查跨越多个时钟周期的事件序列，并发断言是一个连续运行的模块，对整个仿真过程检查信号的变化，所以需要在并发断言内指定一个采样时钟，是时序性的</p><p>并发断言只有在时钟边沿才会执行； 可以在过程块、module、interface和program块内定义并发断言；区别并发断言和立即断言的关键字是property</p><p>立即断言是当前时刻更新后的值，并发断言是更新前的值</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//并发断言</span><br>check3_a_and_b : <span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span>(@(<span class="hljs-keyword">posedge</span> clk) (a&amp;&amp;b));<br>    <br></code></pre></td></tr></table></figure><p>简单的同一个时钟边沿被求值的布尔表达式，或者是连续 多个时钟周期的求值的事件都叫序列</p><p>sequence是布尔表达式更高一层的单元，一个sequence 中可以包含若干个布尔表达式，同时在sequence中可以使用一些新的操作符</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//并发断言</span><br><span class="hljs-keyword">sequence</span> seq_a_and_b；<br>    @(<span class="hljs-keyword">posedge</span> clk) a&amp;&amp;b;<br><span class="hljs-keyword">endsequence</span><br>check3_a_and_b : <span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span>(seq_a_and_b);<br><br><span class="hljs-comment">//多周期序列</span><br><span class="hljs-keyword">sequence</span> seq_a_and_b;<br>    @(<span class="hljs-keyword">posedge</span> clk) a ##<span class="hljs-number">1</span> b ##<span class="hljs-number">1</span> c;<span class="hljs-comment">//##1延时一个周期</span><br><span class="hljs-keyword">endsequence</span><br><span class="hljs-keyword">sequence</span> s2(data,en); <span class="hljs-comment">//带参数</span><br>        @(<span class="hljs-keyword">posedge</span> clk) (a &amp;&amp; (data == data_bus));<span class="hljs-comment">//##1延时一个周期</span><br><span class="hljs-keyword">endsequence</span><br></code></pre></td></tr></table></figure><p><strong>属性 property</strong></p><p>property是比sequence更高一层的单元，也是构成断言最常 用的模块，其中最重要的性质是可以在property中使用蕴含操作符(|-&gt; ，|&#x3D;&gt;)</p><p>交叠蕴含操作符a|-&gt;b：表示的含义是如果a事件发生，那么就从当拍(##0)开始，检查b事件是否会有效(匹配)，如果b不能匹配则断言失败如果能匹配则成功，注意是有先后顺序的 ，a先b后，只是在同一拍，同一个时钟沿去检查条件</p><p>非交叠蕴含a|&#x3D;&gt;b：如果a满足，则在下一个周期##1检查条件b，等同于a |-&gt; ##1 b</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><br><span class="hljs-keyword">sequence</span> seq_a_and_c;<br>    <span class="hljs-comment">// @(posedge) a ##2 b;</span><br>    (~a &amp; c) ##<span class="hljs-number">1</span> (~a &amp; ~c);<br><span class="hljs-keyword">endsequence</span><br><span class="hljs-keyword">property</span> a_prop;<br>    @(<span class="hljs-keyword">posedge</span> clk)<br>        a |-&gt; seq_a_and_c;<br><span class="hljs-keyword">endproperty</span><br>abc_check : <span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span> (a_prop);<br><br></code></pre></td></tr></table></figure><p><strong>cover property</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//描述功能覆盖点</span><br><span class="hljs-keyword">property</span> p3;<br>    b ##<span class="hljs-number">1</span> c;<br><span class="hljs-keyword">endproperty</span><br>c1 : <span class="hljs-keyword">cover</span> <span class="hljs-keyword">property</span> (p3);<br>a1 : <span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span> (p3);<br></code></pre></td></tr></table></figure><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p><strong>特殊检查</strong></p><p>对复位操作的检查</p><p><strong>常规检查</strong></p><p>拆分检查：1）属于白盒验证；2）用于单元级验证</p><p>整体检查：1）属于黑盒验证；2）用于集成验证</p><p>拆分检查 &amp; 整体检查的区别 </p><p>1）单元级验证+ 拆分检查，相比之下能够更大程度的保证验证的完备性，所能覆盖的输入空间更大，但是工作量大； </p><p>2）拆分检查，能够更快、更精准的发现出现bug的时间和地点，但是工作量大； </p><p>3）集成验证+ 整体检查，在工作量小的情况下获得不错的整体覆盖率，但达到更高的覆盖率比较困难； </p><p>4）不考虑工作量问题，是不是只做单元级验证 + 拆分检查就够了？ 不是的，虽然单元级验证能覆盖更多空间，但全空间覆盖是做不到的， 必须通过集成验证来确定并覆盖单元之间的交互场景</p><p><strong>时序检查</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//同一时钟内的信号值检查</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>: chk_val_ack<br>    <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>        @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">iff</span> rstn &amp;&amp; en_chk_prot);<br>        <span class="hljs-keyword">if</span>(mon<span class="hljs-variable">.f2a_ack</span> === <span class="hljs-number">1</span> &amp;&amp; mon<span class="hljs-variable">.a2f_val</span> === <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">$error</span>(<span class="hljs-string">&quot;fmt_ini_mon::[protocol error] valid is not 1 when ack is 1!&quot;</span>);<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//检查信号的时序周期数</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>: chk_req_grant<br>    <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>      @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">iff</span> rstn &amp;&amp; en_chk_prot);<br>        <span class="hljs-comment">//使用系统函数$rose捕捉grant信号的上升沿</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">$rose</span>(mon<span class="hljs-variable">.fmt_grant</span>, @(<span class="hljs-keyword">posedge</span> clk))) <span class="hljs-keyword">begin</span><br>        @(<span class="hljs-keyword">posedge</span> clk);<br>        <span class="hljs-keyword">if</span>(mon<span class="hljs-variable">.fmt_req</span> !== <span class="hljs-number">0</span>)<br>          <span class="hljs-built_in">$error</span>(<span class="hljs-string">&quot;fmt_rsp_mon::[protocol error] req should be 0 after 1 cyle when grant rose to 1&quot;</span>);<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//检查信号在一段时间内保持</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>: chk_stable_id_length<br>    <span class="hljs-keyword">int</span> id, len;<br>    <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>    @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">iff</span> rstn &amp;&amp; en_chk_prot);<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">$rose</span>(mon<span class="hljs-variable">.fmt_req</span>, @(<span class="hljs-keyword">posedge</span> clk))) <span class="hljs-keyword">begin</span><br>        id = mon<span class="hljs-variable">.fmt_chid</span>;<br>        len = mon<span class="hljs-variable">.fmt_length</span>;<br>        @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">iff</span> <span class="hljs-built_in">$rose</span>(mon<span class="hljs-variable">.fmt_end</span>, @(<span class="hljs-keyword">posedge</span> clk)));<br>        <span class="hljs-keyword">if</span>(id != mon<span class="hljs-variable">.fmt_chid</span> || len != mon<span class="hljs-variable">.fmt_length</span>)<br>          <span class="hljs-built_in">$error</span>(<span class="hljs-string">&quot;fmt_rsp_mon::[protocol error] id and length is not valud within a packet transaction&quot;</span>);<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//检查事务处理所需周期数</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>: chk_packet_len<br>    <span class="hljs-keyword">int</span> len;<br>    <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>    @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">iff</span> rstn &amp;&amp; en_chk_prot);<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">$rose</span>(mon<span class="hljs-variable">.fmt_start</span>, @(<span class="hljs-keyword">posedge</span> clk))) <span class="hljs-keyword">begin</span><br>        len = mon<span class="hljs-variable">.fmt_length</span>;<br>        <span class="hljs-keyword">repeat</span>(len - <span class="hljs-number">1</span>) @(<span class="hljs-keyword">posedge</span> clk);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">$rose</span>(mon<span class="hljs-variable">.fmt_end</span>, @(<span class="hljs-keyword">posedge</span> clk)))<br>          <span class="hljs-built_in">$error</span>(<span class="hljs-string">&quot;fmt_rsp_mon::[protocol error] number of transferred data not equals to length &quot;</span>);<br>      <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>IC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UVM基础知识笔记</title>
    <link href="/2025/03/22/%E6%95%B0%E5%AD%97IC%E2%80%94%E2%80%94UVM/"/>
    <url>/2025/03/22/%E6%95%B0%E5%AD%97IC%E2%80%94%E2%80%94UVM/</url>
    
    <content type="html"><![CDATA[<p>UVM基础知识笔记</p><span id="more"></span><h1 id="UVM"><a href="#UVM" class="headerlink" title="UVM"></a>UVM</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>parent 的作用</strong></p><p>(1) 构建 UVM 组件树（Hierarchy）<br>        UVM 环境是一个 树形结构，根节点是 uvm_top（全局顶级节点），所有组件（如 driver、monitor、agent）必须有一个父节点。</p><p>​parent 参数指定当前组件的父组件，确保它被正确挂载到 UVM 树中。</p><p>(2) 支持 get_parent() 和路径访问<br>        通过 parent，可以使用 get_parent() 向上遍历组件树。</p><p>​调试时，get_full_name() 会生成完整路径（如 top.env.agent.driver）。</p><p>(3) 自动化的 Phase 执行<br>        UVM 的 Phase 机制（如 build_phase、connect_phase）依赖父子关系决定执行顺序。</p><p>​父组件的 build_phase 先于子组件执行。</p><p>​子组件的 connect_phase 在父组件的 connect_phase 之前执行。</p><p>(4) 配置机制（Config DB）<br>        父组件可以通过 uvm_config_db 向子组件传递配置参数。</p><p>​子组件通过 parent 继承或覆盖配置。</p><p> <strong>示例代码分析</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_driver <span class="hljs-keyword">extends</span> uvm_driver;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_driver&quot;</span>, uvm_component parent);<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);  <span class="hljs-comment">// 必须传递 parent</span><br>    <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><ul><li>**<code>super.new(name, parent)</code>**：调用父类（<code>uvm_driver</code>）的构造函数，将当前组件注册到 UVM 树中。</li><li>**如果不传递 <code>parent</code>**：<ul><li>组件无法挂载到 UVM 树中，导致 Phase 无法执行。</li><li>无法通过 <code>get_parent()</code> 或 <code>get_full_name()</code> 调试。</li><li>配置数据库（Config DB）可能失效。</li></ul></li></ul><hr><p> <strong>3. 特殊情况处理</strong></p><p> <strong>(1) 顶级组件（如 <code>uvm_test</code>）的 <code>parent</code></strong></p><p>顶级组件（如 <code>uvm_test</code>）的 <code>parent</code> 是 <code>null</code>，因为它本身就是根节点：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_test <span class="hljs-keyword">extends</span> uvm_test;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_test&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);  <span class="hljs-comment">// parent 为 null</span><br>    <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p> <strong>(2) 动态创建组件</strong></p><p>如果通过 <code>create_component</code> 动态创建组件，UVM 会自动传递 <code>parent</code>：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">my_driver drv;<br>drv = my_driver::type_id::create(<span class="hljs-string">&quot;drv&quot;</span>, <span class="hljs-keyword">this</span>);  <span class="hljs-comment">// &quot;this&quot; 是父组件</span><br></code></pre></td></tr></table></figure><p><strong>uvm_config_db</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">uvm_config_db<span class="hljs-variable">#(svk_axi_sys_env_cfg)::set(this, &quot;axi_sys_env&quot;, &quot;cfg&quot;, axi_sys_env_cfg)</span>;<br></code></pre></td></tr></table></figure><ul><li><p><strong><code>uvm_config_db#(svk_axi_sys_env_cfg)</code></strong><br>指定配置数据库中存储的数据类型为 <code>svk_axi_sys_env_cfg</code>（一个自定义的配置类）。</p></li><li><p><strong><code>::set()</code></strong><br>静态方法，用于将配置对象存入数据库。</p></li><li><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>this</code></td><td align="left">调用者的上下文（通常是当前组件，用于确定路径）。</td></tr><tr><td align="left"><code>&quot;axi_sys_env&quot;</code></td><td align="left">目标组件的路径（相对或绝对路径）。</td></tr><tr><td align="left"><code>&quot;cfg&quot;</code></td><td align="left">配置对象的键名（Key），用于后续查找。</td></tr><tr><td align="left"><code>axi_sys_env_cfg</code></td><td align="left">要存储的实际配置对象（类型为 <code>svk_axi_sys_env_cfg</code>）。</td></tr></tbody></table></li></ul><p>这行代码的目的是：<br>将一个名为 <code>axi_sys_env_cfg</code> 的配置对象（类型为 <code>svk_axi_sys_env_cfg</code>）存入 UVM 配置数据库，并关联到路径 <code>axi_sys_env</code> 的组件，键名为 <code>&quot;cfg&quot;</code></p><p>之后，目标组件（如 <code>axi_sys_env</code>）可以通过 <code>uvm_config_db::get()</code> 获取该配置对象。</p><p><code>this</code></p><ul><li>表示当前组件的上下文（通常是 <code>uvm_component</code> 的 <code>this</code>）。</li><li>用于生成目标的 绝对路径（如 <code>uvm_test_top.env.axi_sys_env</code>）。</li></ul><p><code>&quot;axi_sys_env&quot;</code></p><ul><li>目标组件的 路径名，可以是：<ul><li>相对路径（如 <code>&quot;axi_sys_env&quot;</code>）：相对于 <code>this</code> 的路径。</li><li>绝对路径（如 <code>&quot;uvm_test_top.env.axi_sys_env&quot;</code>）：从根节点开始。</li></ul></li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">axi_sys_env = svk_axi_sys_env::type_id::create(<span class="hljs-string">&quot;axi_sys_env&quot;</span>, <span class="hljs-keyword">this</span>);<br></code></pre></td></tr></table></figure><p><code>svk_axi_sys_env</code><br>这是一个自定义的 UVM 组件类（通常继承自 <code>uvm_env</code> 或 <code>uvm_component</code>），用于构建 AXI 系统级验证环境。<br><code>::type_id::create()</code><br><code>type_id</code> 是 UVM 工厂（Factory）为每个注册的类自动生成的代理类。<br><code>create()</code> 是 UVM 工厂的动态实例化方法，替代直接调用 <code>new()</code>，支持后续的 对象覆盖（Override）机制。</p><h2 id="driver"><a href="#driver" class="headerlink" title="driver"></a>driver</h2><p><strong>my_dtiver.sv</strong></p><p>function与task的区别</p><p>function通常用于计算并返回一个值，而task更像是执行一系列操作，可能包含时间控制语句。</p><p>function不能包含延迟、事件或阻塞语句，因为它们需要立即返回值。而task可以包含这些时间控制的语句，比如#延迟，@事件，或者wait语句。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_DRIVER__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_DRIVER__SV</span><br><span class="hljs-keyword">class</span> my_driver <span class="hljs-keyword">extends</span> uvm_driver;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_driver&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);  <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase); <span class="hljs-comment">//允许在类的外部进行定义</span><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">task</span> my_driver::main_phase(uvm_phase phase);<br>    top_tb<span class="hljs-variable">.rxd</span> &lt;= <span class="hljs-number">8&#x27;b0</span>; <br>    top_tb<span class="hljs-variable">.rx_dv</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">while</span>(!top_tb<span class="hljs-variable">.rst_n</span>)<br>       @(<span class="hljs-keyword">posedge</span> top_tb<span class="hljs-variable">.clk</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<span class="hljs-keyword">begin</span><br>       @(<span class="hljs-keyword">posedge</span> top_tb<span class="hljs-variable">.clk</span>);<br>       top_tb<span class="hljs-variable">.rxd</span> &lt;= $urandom_range(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>);<br>       top_tb<span class="hljs-variable">.rx_dv</span> &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>       `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;data is drived&quot;</span>, UVM_LOW)<br>       <span class="hljs-comment">//uvm_info宏打印信息</span><br>   <span class="hljs-keyword">end</span><br>   @(<span class="hljs-keyword">posedge</span> top_tb<span class="hljs-variable">.clk</span>);<br>   top_tb<span class="hljs-variable">.rx_dv</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">endtask</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p><strong>dut</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> dut(clk,<br>           rst_n, <br>           rxd,<br>           rx_dv,<br>           txd,<br>           tx_en);<br><span class="hljs-keyword">input</span> clk;<br><span class="hljs-keyword">input</span> rst_n;<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] rxd;<br><span class="hljs-keyword">input</span> rx_dv;<br><span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] txd;<br><span class="hljs-keyword">output</span> tx_en;<br><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] txd;<br><span class="hljs-keyword">reg</span> tx_en;<br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>   <span class="hljs-keyword">if</span>(!rst_n) <span class="hljs-keyword">begin</span><br>      txd &lt;= <span class="hljs-number">8&#x27;b0</span>;<br>      tx_en &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      txd &lt;= rxd;<br>      tx_en &lt;= rx_dv;<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><p><strong>top_tb.sv</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns/1ps</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;uvm_macros.svh&quot;</span><br><br><span class="hljs-keyword">import</span> uvm_pkg::*;<br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_driver.sv&quot;</span><br><br><span class="hljs-keyword">module</span> top_tb;<br><br><span class="hljs-keyword">reg</span> clk;<br><span class="hljs-keyword">reg</span> rst_n;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] rxd;<br><span class="hljs-keyword">reg</span> rx_dv;<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] txd;<br><span class="hljs-keyword">wire</span> tx_en;<br><br>dut my_dut(<span class="hljs-variable">.clk</span>(clk),<br>           <span class="hljs-variable">.rst_n</span>(rst_n),<br>           <span class="hljs-variable">.rxd</span>(rxd),<br>           <span class="hljs-variable">.rx_dv</span>(rx_dv),<br>           <span class="hljs-variable">.txd</span>(txd),<br>           <span class="hljs-variable">.tx_en</span>(tx_en));<br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    my_driver drv;   <span class="hljs-comment">//声明一个类</span><br>    drv = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;drv&quot;</span>, <span class="hljs-literal">null</span>);  <span class="hljs-comment">//调用构造函数</span><br>    drv<span class="hljs-variable">.main_phase</span>(<span class="hljs-literal">null</span>);  <span class="hljs-comment">//调用类方法</span><br>    <span class="hljs-built_in">$finish</span>(); <br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   clk = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>      #<span class="hljs-number">100</span> clk = ~clk;<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   rst_n = <span class="hljs-number">1&#x27;b0</span>;<br>   #<span class="hljs-number">1000</span>;<br>   rst_n = <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="factory机制，工厂模式，objection机制"><a href="#factory机制，工厂模式，objection机制" class="headerlink" title="factory机制，工厂模式，objection机制"></a>factory机制，工厂模式，objection机制</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_DRIVER__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_DRIVER__SV</span><br><span class="hljs-keyword">class</span> my_driver <span class="hljs-keyword">extends</span> uvm_driver;<br>    `uvm_component_utils(my_driver) <span class="hljs-comment">//使用这个宏注册这个类，只有注册过的类才能使用工厂模式</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_driver&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>      `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;new is called&quot;</span>, UVM_LOW);<br>   <span class="hljs-keyword">endfunction</span><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase);<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">task</span> my_driver::main_phase(uvm_phase phase);<br>    phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//检查到提起objection，才会开启当前phase，这个语句必须在第一个消耗仿真时间的语句前</span><br>   `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;main_phase is called&quot;</span>, UVM_LOW);<br>   top_tb<span class="hljs-variable">.rxd</span> &lt;= <span class="hljs-number">8&#x27;b0</span>; <br>   top_tb<span class="hljs-variable">.rx_dv</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>   <span class="hljs-keyword">while</span>(!top_tb<span class="hljs-variable">.rst_n</span>)<br>      @(<span class="hljs-keyword">posedge</span> top_tb<span class="hljs-variable">.clk</span>);<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<span class="hljs-keyword">begin</span><br>      @(<span class="hljs-keyword">posedge</span> top_tb<span class="hljs-variable">.clk</span>);<br>      top_tb<span class="hljs-variable">.rxd</span> &lt;= $urandom_range(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>);<br>      top_tb<span class="hljs-variable">.rx_dv</span> &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>      `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;data is drived&quot;</span>, UVM_LOW);<br>   <span class="hljs-keyword">end</span><br>   @(<span class="hljs-keyword">posedge</span> top_tb<span class="hljs-variable">.clk</span>);<br>   top_tb<span class="hljs-variable">.rx_dv</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//撤销objection，终止当前phase</span><br><span class="hljs-keyword">endtask</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>创建实例并调用其main_phase</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    run_test(<span class="hljs-string">&quot;my_driver&quot;</span>); <span class="hljs-comment">//传递的参数是字符串，创建这个类代表的一个实例</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>run_phase和12个细分phase；12个phase分为4个组：reset、 configure、main、shutdown；（run-time phase）</p><p>reset_phase对DUT进行复位、初始化等操作； </p><p>configure_phase则进行DUT的配置； </p><p>main_phase完成DUT的运行； </p><p>shutdown_phase做一些与DUT断电 相关的操作。</p><p>以下内容省略，查阅PPT</p><ul><li>phase的执行顺序</li><li>run_phase与run-time phase的区别</li></ul><h3 id="virtual-interface，config-db机制"><a href="#virtual-interface，config-db机制" class="headerlink" title="virtual interface，config_db机制"></a>virtual interface，config_db机制</h3><p>使用 virtual interface 尽量消除在验证平台中的绝对路径。增加验证平台的可移植性。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_IF__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_IF__SV</span><br><br><span class="hljs-keyword">interface</span> my_if(<span class="hljs-keyword">input</span> clk, <span class="hljs-keyword">input</span> rst_n);<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data; <br>   <span class="hljs-keyword">logic</span> valid; <br><span class="hljs-keyword">endinterface</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p><strong>top_tb.sv</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns/1ps</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;uvm_macros.svh&quot;</span><br><br><span class="hljs-keyword">import</span> uvm_pkg::*;<br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_if.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_driver.sv&quot;</span><br><br><span class="hljs-keyword">module</span> top_tb;<br><br><span class="hljs-keyword">reg</span> clk;<br><span class="hljs-keyword">reg</span> rst_n;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] rxd;<br><span class="hljs-keyword">reg</span> rx_dv;<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] txd;<br><span class="hljs-keyword">wire</span> tx_en;<br><br>my_if input_if(clk, rst_n);<br>my_if output_if(clk, rst_n);<br><br>dut my_dut(<span class="hljs-variable">.clk</span>(clk),<br>           <span class="hljs-variable">.rst_n</span>(rst_n),<br>           <span class="hljs-variable">.rxd</span>(input_if<span class="hljs-variable">.data</span>),<br>           <span class="hljs-variable">.rx_dv</span>(input_if<span class="hljs-variable">.valid</span>),<br>           <span class="hljs-variable">.txd</span>(output_if<span class="hljs-variable">.data</span>),<br>           <span class="hljs-variable">.tx_en</span>(output_if<span class="hljs-variable">.valid</span>));<br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   clk = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>      #<span class="hljs-number">100</span> clk = ~clk; <br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   rst_n = <span class="hljs-number">1&#x27;b0</span>; <br>   #<span class="hljs-number">1000</span>;<br>   rst_n = <span class="hljs-number">1&#x27;b1</span>; <br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   run_test(<span class="hljs-string">&quot;my_driver&quot;</span>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-comment">//对my_if接口传递参数类型，虚接口名称为vif，将input_if连接到vif</span><br>    <span class="hljs-comment">//set的四个参数，</span><br>    <span class="hljs-comment">//UVM通过run_test语句创建一个名字为uvm_test_top的实例，</span><br>    <span class="hljs-comment">//无论传递给run_test的参数是什么，创建的实例的名字都为uvm_test_top</span><br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top&quot;, &quot;vif&quot;, input_if)</span>;<br>    uvm_config_db<span class="hljs-variable">#(int)::set(null, &quot;uvm_test_top&quot;, &quot;var1&quot;, 100)</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_DRIVER__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_DRIVER__SV</span><br><span class="hljs-keyword">class</span> my_driver <span class="hljs-keyword">extends</span> uvm_driver;<br>    <br><br>   <span class="hljs-keyword">virtual</span> my_if vif; <span class="hljs-comment">//在driver类中声明virtual interface</span><br>    <span class="hljs-keyword">int</span> var1;<br><br>   `uvm_component_utils(my_driver)<br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_driver&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>      `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;new is called&quot;</span>, UVM_LOW);<br>   <span class="hljs-keyword">endfunction</span><br><span class="hljs-comment">//bulid是一个函数pahse，不消耗仿真时间</span><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;build_phase is called&quot;</span>, UVM_LOW);<br>      <span class="hljs-keyword">if</span>(!uvm_config_db<span class="hljs-variable">#(virtual my_if)::get(this, &quot;&quot;, &quot;vif&quot;, vif))</span><br>            <span class="hljs-comment">//与uvm_info宏不同的是，当uvm_fatal打印第二个参数所示的信息后，会直接调用Verilog的finish函数来结束仿真</span><br>            <span class="hljs-comment">//uvm_fatal的出现表示验证平台出现了重大问题而无法继续下去</span><br>         `uvm_fatal(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;virtual interface must be set for vif!!!&quot;</span>)<br>        <span class="hljs-keyword">if</span>(!uvm_config_db<span class="hljs-variable">#(int)::get(this, &quot;&quot;, &quot;var1, var1)</span><br>            `uvm_fatal(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;var must be set!!!&quot;</span>)<br>   <span class="hljs-keyword">endfunction</span><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase);<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">task</span> my_driver::main_phase(uvm_phase phase);<br>   phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>   `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;main_phase is called&quot;</span>, UVM_LOW);<br>   vif<span class="hljs-variable">.data</span> &lt;= <span class="hljs-number">8&#x27;b0</span>;  <span class="hljs-comment">//在task中直接使用接口驱动信号</span><br>   vif<span class="hljs-variable">.valid</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>   <span class="hljs-keyword">while</span>(!vif<span class="hljs-variable">.rst_n</span>)<br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<span class="hljs-keyword">begin</span><br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>      vif<span class="hljs-variable">.data</span> &lt;= $urandom_range(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>);<br>      vif<span class="hljs-variable">.valid</span> &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>      `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;data is drived&quot;</span>, UVM_LOW);<br>   <span class="hljs-keyword">end</span><br>   @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   vif<span class="hljs-variable">.valid</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>   phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endtask</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>uvm_config_db #（virtual my_if）则是一个参数化的类， 其参数就是要传递参数的类型，这里是 virtual my_if</p><p>config_db 的 set 和 get 函数都有四个参数，这两个函数的第三个参数必须完全一致</p><p>第四个参数表示要传递的变量，set 处是 top 中例化的 input_if，get 处是 my_driver 中声明的 vif</p><p>第一个和第二个参数联合起来组成目标路径</p><h2 id="Transcation"><a href="#Transcation" class="headerlink" title="Transcation"></a>Transcation</h2><p>在UVM平台，各个组件之间信息的传递是 基于 transaction 的</p><p>transcation</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_TRANSACTION__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_TRANSACTION__SV</span><br><br><span class="hljs-keyword">class</span> my_transaction <span class="hljs-keyword">extends</span> uvm_sequence_item;<br><br>    <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">47</span>:<span class="hljs-number">0</span>] dmac; <span class="hljs-comment">//使用rand/randc修饰的变量，在每次调用randomize()之后，会产生一个新的随机值</span><br>   <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">47</span>:<span class="hljs-number">0</span>] smac;<br>   <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] ether_type;<br>   <span class="hljs-keyword">rand</span> <span class="hljs-keyword">byte</span>      pload[];<br>   <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] crc;<br><br>    <span class="hljs-keyword">constraint</span> pload_cons&#123; <span class="hljs-comment">//约束块内，一个表达式一个关系操作符</span><br>      pload<span class="hljs-variable">.size</span> &gt;= <span class="hljs-number">46</span>;<br>      pload<span class="hljs-variable">.size</span> &lt;= <span class="hljs-number">1500</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] calc_crc();<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">32&#x27;h0</span>;<br>   <span class="hljs-keyword">endfunction</span><br>   <span class="hljs-comment">// 实例的randomize函数被调用后，post_randomize会紧随其后无条件地被调用</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> post_randomize();<br>      crc = calc_crc;<br>   <span class="hljs-keyword">endfunction</span><br><br>    `uvm_object_utils(my_transaction) <span class="hljs-comment">//使用了uvm_object_utils实现factory机制</span><br><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_transaction&quot;</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>();<br>   <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>在my_driver中实现基于transaction的驱动</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_DRIVER__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_DRIVER__SV</span><br><span class="hljs-keyword">class</span> my_driver <span class="hljs-keyword">extends</span> uvm_driver;<br>   <span class="hljs-keyword">virtual</span> my_if vif;<br><br>   `uvm_component_utils(my_driver)<br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_driver&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      <span class="hljs-keyword">if</span>(!uvm_config_db<span class="hljs-variable">#(virtual my_if)::get(this, &quot;&quot;, &quot;vif&quot;, vif))</span><br>         `uvm_fatal(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;virtual interface must be set for vif!!!&quot;</span>)<br>   <span class="hljs-keyword">endfunction</span><br><br>    <span class="hljs-keyword">extern</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase); <span class="hljs-comment">//main_phase产生transaction并调用dirve_one_pkt;</span><br>    <span class="hljs-keyword">extern</span> <span class="hljs-keyword">task</span> drive_one_pkt(my_transaction tr); <span class="hljs-comment">//dirve_one_pkt驱动具体信号</span><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">task</span> my_driver::main_phase(uvm_phase phase);<br>    <span class="hljs-comment">//产生激励：产生class my_transaction的实例</span><br>   my_transaction tr; <span class="hljs-comment">//声明一个transaction</span><br>   phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>   vif<span class="hljs-variable">.data</span> &lt;= <span class="hljs-number">8&#x27;b0</span>; <span class="hljs-comment">//对DUT的信号初始化，等待reset</span><br>   vif<span class="hljs-variable">.valid</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>   <span class="hljs-keyword">while</span>(!vif<span class="hljs-variable">.rst_n</span>)<br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) <span class="hljs-keyword">begin</span> <br>        tr = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;tr&quot;</span>); <span class="hljs-comment">//创建一个实例</span><br>        <span class="hljs-keyword">assert</span>(tr<span class="hljs-variable">.randomize</span>() <span class="hljs-keyword">with</span> &#123;pload<span class="hljs-variable">.size</span> == <span class="hljs-number">200</span>;&#125;); <span class="hljs-comment">//randomize随机化tr的地址、数据等</span><br>        <span class="hljs-comment">//优先级更高的附加约束：200byte</span><br>        <span class="hljs-comment">//断言，检查约束是否成功，如果失败，则立即报错</span><br>      drive_one_pkt(tr);<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">repeat</span>(<span class="hljs-number">5</span>) @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endtask</span><br><br><span class="hljs-keyword">task</span> my_driver::drive_one_pkt(my_transaction tr);<br>   <span class="hljs-comment">//驱动激励：根据transaction实例，针对DUT端口进行信号级的操作</span><br>   <span class="hljs-keyword">bit</span> [<span class="hljs-number">47</span>:<span class="hljs-number">0</span>] tmp_data;<br>   <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data_q[$]; <br>   <span class="hljs-comment">//将transaction中各变量打包到data_q中</span><br>   <span class="hljs-comment">//push dmac to data_q</span><br>   tmp_data = tr<span class="hljs-variable">.dmac</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) <span class="hljs-keyword">begin</span><br>      data_q<span class="hljs-variable">.push_back</span>(tmp_data[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]);<br>      tmp_data = (tmp_data &gt;&gt; <span class="hljs-number">8</span>);<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-comment">//push smac to data_q</span><br>   tmp_data = tr<span class="hljs-variable">.smac</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) <span class="hljs-keyword">begin</span><br>      data_q<span class="hljs-variable">.push_back</span>(tmp_data[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]);<br>      tmp_data = (tmp_data &gt;&gt; <span class="hljs-number">8</span>);<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-comment">//push ether_type to data_q</span><br>   tmp_data = tr<span class="hljs-variable">.ether_type</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) <span class="hljs-keyword">begin</span><br>      data_q<span class="hljs-variable">.push_back</span>(tmp_data[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]);<br>      tmp_data = (tmp_data &gt;&gt; <span class="hljs-number">8</span>);<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-comment">//push payload to data_q</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tr<span class="hljs-variable">.pload</span><span class="hljs-variable">.size</span>; i++) <span class="hljs-keyword">begin</span><br>      data_q<span class="hljs-variable">.push_back</span>(tr<span class="hljs-variable">.pload</span>[i]);<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-comment">//push crc to data_q</span><br>   tmp_data = tr<span class="hljs-variable">.crc</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) <span class="hljs-keyword">begin</span><br>      data_q<span class="hljs-variable">.push_back</span>(tmp_data[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]);<br>      tmp_data = (tmp_data &gt;&gt; <span class="hljs-number">8</span>);<br>   <span class="hljs-keyword">end</span><br><br>   `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;begin to drive one pkt&quot;</span>, UVM_LOW);<br>   <span class="hljs-keyword">repeat</span>(<span class="hljs-number">3</span>) @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br><br>   <span class="hljs-keyword">while</span>(data_q<span class="hljs-variable">.size</span>() &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span> <span class="hljs-comment">//将全部data_q数据直接端口操作</span><br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>      vif<span class="hljs-variable">.valid</span> &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>      vif<span class="hljs-variable">.data</span> &lt;= data_q<span class="hljs-variable">.pop_front</span>(); <br>   <span class="hljs-keyword">end</span><br><br>   @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   vif<span class="hljs-variable">.valid</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>   `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;end drive one pkt&quot;</span>, UVM_LOW);<br><span class="hljs-keyword">endtask</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><p>在平台中除了driver外，还有其他组件，引入一个容器：uvm_env，将 其他组件容纳到env中。再使用 run_test(“env”);</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_ENV__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_ENV__SV</span><br><br><span class="hljs-keyword">class</span> my_env <span class="hljs-keyword">extends</span> uvm_env;<br><br>   my_driver drv;<br><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_env&quot;</span>, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      drv = my_driver::type_id::create(<span class="hljs-string">&quot;drv&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//使用函数type_name::type_id::create，来进行实例化</span><br>   <span class="hljs-keyword">endfunction</span><br><br>   `uvm_component_utils(my_env) <span class="hljs-comment">//uvm_component_utils宏来实现factory的注册</span><br><span class="hljs-keyword">endclass</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><p>由run_test创建的实例是树根（ 这里是my_env），其名字是固定的 uvm_test_top</p><p>长出枝叶的过程需要在my_env 的build_phase中手动实现；平台 build执行顺序是从树根到树叶</p><p>无论是树根还是树叶，都必须是 uvm_component或者其派生类</p><p>virtual interface的传递，路劲要改变</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.drv&quot;, &quot;vif&quot;, input_if)</span>; <span class="hljs-comment">//drv是env中例化的driver的名字</span><br></code></pre></td></tr></table></figure><h2 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h2><p>作用：实现监控DUT的行为， 包括输入和输出；（注意driver 与RM的连接）</p><p>方式：收集DUT的端口数据， 并将其转换成transaction交给 后续的组件如reference model、 scoreboard等处理。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_MONITOR__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_MONITOR__SV</span><br><span class="hljs-keyword">class</span> my_monitor <span class="hljs-keyword">extends</span> uvm_monitor;<br><br>   <span class="hljs-keyword">virtual</span> my_if vif;<br><br>   `uvm_component_utils(my_monitor)<br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_monitor&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      <span class="hljs-keyword">if</span>(!uvm_config_db<span class="hljs-variable">#(virtual my_if)::get(this, &quot;&quot;, &quot;vif&quot;, vif))</span><br>         `uvm_fatal(<span class="hljs-string">&quot;my_monitor&quot;</span>, <span class="hljs-string">&quot;virtual interface must be set for vif!!!&quot;</span>)<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase); <span class="hljs-comment">//main_phase声明transaction,并调用collect_one_pkt</span><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">task</span> collect_one_pkt(my_transaction tr); <span class="hljs-comment">//收集transaction</span><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">task</span> my_monitor::main_phase(uvm_phase phase);<br>   my_transaction tr;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span> <span class="hljs-comment">//需要时刻收集数据，永不停歇；（其他单元控制objection</span><br>      tr = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;tr&quot;</span>);<br>      collect_one_pkt(tr);<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><br><span class="hljs-keyword">task</span> my_monitor::collect_one_pkt(my_transaction tr); <span class="hljs-comment">//将数据收集到一个transaction；实际上是driver的逆过程</span><br><br>   <span class="hljs-keyword">bit</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data_q[$]; <br>   <span class="hljs-keyword">int</span> psize;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>      <span class="hljs-keyword">if</span>(vif<span class="hljs-variable">.valid</span>) <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">end</span><br><br>   `uvm_info(<span class="hljs-string">&quot;my_monitor&quot;</span>, <span class="hljs-string">&quot;begin to collect one pkt&quot;</span>, UVM_LOW);<br>   <span class="hljs-keyword">while</span>(vif<span class="hljs-variable">.valid</span>) <span class="hljs-keyword">begin</span><br>      data_q<span class="hljs-variable">.push_back</span>(vif<span class="hljs-variable">.data</span>);<br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-comment">//pop dmac</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) <span class="hljs-keyword">begin</span><br>      tr<span class="hljs-variable">.dmac</span> = &#123;tr<span class="hljs-variable">.dmac</span>[<span class="hljs-number">39</span>:<span class="hljs-number">0</span>], data_q<span class="hljs-variable">.pop_front</span>()&#125;;<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-comment">//pop smac</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) <span class="hljs-keyword">begin</span><br>      tr<span class="hljs-variable">.smac</span> = &#123;tr<span class="hljs-variable">.smac</span>[<span class="hljs-number">39</span>:<span class="hljs-number">0</span>], data_q<span class="hljs-variable">.pop_front</span>()&#125;;<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-comment">//pop ether_type</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) <span class="hljs-keyword">begin</span><br>      tr<span class="hljs-variable">.ether_type</span> = &#123;tr<span class="hljs-variable">.ether_type</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>], data_q<span class="hljs-variable">.pop_front</span>()&#125;;<br>   <span class="hljs-keyword">end</span><br><br>   psize = data_q<span class="hljs-variable">.size</span>() - <span class="hljs-number">4</span>;<br>   tr<span class="hljs-variable">.pload</span> = <span class="hljs-keyword">new</span>[psize];<br>   <span class="hljs-comment">//pop payload</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; psize; i++) <span class="hljs-keyword">begin</span><br>      tr<span class="hljs-variable">.pload</span>[i] = data_q<span class="hljs-variable">.pop_front</span>();<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-comment">//pop crc</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) <span class="hljs-keyword">begin</span><br>      tr<span class="hljs-variable">.crc</span> = &#123;tr<span class="hljs-variable">.crc</span>[<span class="hljs-number">23</span>:<span class="hljs-number">0</span>], data_q<span class="hljs-variable">.pop_front</span>()&#125;;<br>   <span class="hljs-keyword">end</span><br>   `uvm_info(<span class="hljs-string">&quot;my_monitor&quot;</span>, <span class="hljs-string">&quot;end collect one pkt, print it:&quot;</span>, UVM_LOW);<br>    tr<span class="hljs-variable">.my_print</span>();<br><span class="hljs-keyword">endtask</span><br><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><p>在env中例化monitor</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_env <span class="hljs-keyword">extends</span> uvm_env;<br><br>   my_driver drv;<br>   my_monitor i_mon;<br>   my_monitor o_mon;<br><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_env&quot;</span>, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      drv = my_driver::type_id::create(<span class="hljs-string">&quot;drv&quot;</span>, <span class="hljs-keyword">this</span>); <br>      i_mon = my_monitor::type_id::create(<span class="hljs-string">&quot;i_mon&quot;</span>, <span class="hljs-keyword">this</span>);<br>      o_mon = my_monitor::type_id::create(<span class="hljs-string">&quot;o_mon&quot;</span>, <span class="hljs-keyword">this</span>);<br>   <span class="hljs-keyword">endfunction</span><br><br>   `uvm_component_utils(my_env)<br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>接口传递</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.drv&quot;, &quot;vif&quot;, input_if)</span>;<br>    uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.i_mon&quot;, &quot;vif&quot;, input_if)</span>; <span class="hljs-comment">//收集DUT输入端口的事务</span><br>    uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.o_mon&quot;, &quot;vif&quot;, output_if)</span>; <span class="hljs-comment">//收集DUT输出端口</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="uvm-agent-封装"><a href="#uvm-agent-封装" class="headerlink" title="uvm_agent 封装"></a>uvm_agent 封装</h2><p>agent实际上是UVM平台上基于协议的标准单元</p><p>UVM中agent通常上是一个三元组（sequencer、driver和 monitor）</p><p>sequencer产生激励， driver驱动激励</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_AGENT__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_AGENT__SV</span><br><br><span class="hljs-keyword">class</span> my_agent <span class="hljs-keyword">extends</span> uvm_agent ;<br>   my_driver     drv; <span class="hljs-comment">//声明一个driver</span><br>   my_monitor    mon; <span class="hljs-comment">//声明一个monitor</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span> <br>   <br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br><br>   `uvm_component_utils(my_agent)<br><span class="hljs-keyword">endclass</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_agent::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>   <span class="hljs-keyword">if</span> (is_active == UVM_ACTIVE) <span class="hljs-keyword">begin</span> <span class="hljs-comment">//只有当is_active为UVM_ACTIVE是才需要driver，即DUT的输入端口</span><br>       drv = my_driver::type_id::create(<span class="hljs-string">&quot;drv&quot;</span>, <span class="hljs-keyword">this</span>);<br>   <span class="hljs-keyword">end</span><br>    mon = my_monitor::type_id::create(<span class="hljs-string">&quot;mon&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//输入输出端口均例化monitor</span><br><span class="hljs-keyword">endfunction</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_agent::connect_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.connect_phase</span>(phase);<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>在env中直接例化agent，而不需要直接实例化driver和monitor了</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_env <span class="hljs-keyword">extends</span> uvm_env;<br><br>   my_agent  i_agt;<br>   my_agent  o_agt;<br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_env&quot;</span>, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      i_agt = my_agent::type_id::create(<span class="hljs-string">&quot;i_agt&quot;</span>, <span class="hljs-keyword">this</span>);<br>      o_agt = my_agent::type_id::create(<span class="hljs-string">&quot;o_agt&quot;</span>, <span class="hljs-keyword">this</span>);<br>      i_agt<span class="hljs-variable">.is_active</span> = UVM_ACTIVE; <span class="hljs-comment">//输入端口需要driver</span><br>      o_agt<span class="hljs-variable">.is_active</span> = UVM_PASSIVE; <span class="hljs-comment">//输出端口只需要monitor</span><br>      <span class="hljs-comment">//is_active是uvm_agent的枚举型成员变量</span><br>      <span class="hljs-comment">//typedef enum bit &#123; UVM_PASSIVE=0, UVM_ACTIVE=1 &#125; uvm_active_passive_enum;</span><br>      <span class="hljs-comment">//UVM_ACTIVE意味着例化driver，UVM_PASSIVE意味着例化monitor</span><br>   <span class="hljs-keyword">endfunction</span><br>   `uvm_component_utils(my_env)<br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>接口传递的路劲改变</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.i_agt.drv&quot;, &quot;vif&quot;, input_if)</span>;<br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.i_agt.mon&quot;, &quot;vif&quot;, input_if)</span>;<br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.o_agt.mon&quot;, &quot;vif&quot;, output_if)</span>;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="refrence-model"><a href="#refrence-model" class="headerlink" title="refrence model"></a>refrence model</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_MODEL__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_MODEL__SV</span><br><br><span class="hljs-keyword">class</span> my_model <span class="hljs-keyword">extends</span> uvm_component;<br>   <br>   uvm_blocking_get_port <span class="hljs-variable">#(my_transaction)</span>  port; <span class="hljs-comment">//声明一个端口，用于接收事务</span><br>   uvm_analysis_port <span class="hljs-variable">#(my_transaction)</span>  ap; <span class="hljs-comment">//声明一个端口，用于发送事务</span><br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span>  <span class="hljs-keyword">task</span> main_phase(uvm_phase phase);<br>   `uvm_component_utils(my_model)<br><span class="hljs-keyword">endclass</span> <br><br>       <br><span class="hljs-keyword">function</span> my_model::<span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br><span class="hljs-keyword">endfunction</span> <br><br>       <br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_model::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>    port = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//实例化端口</span><br>    ap = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;ap&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//实例化端口</span><br><span class="hljs-keyword">endfunction</span><br>       <br><span class="hljs-comment">//实现与DUT相同的功能，将输入的transaction复制一份，并发送出去</span><br><span class="hljs-keyword">task</span> my_model::main_phase(uvm_phase phase);<br>   my_transaction tr;<br>   my_transaction new_tr;<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.main_phase</span>(phase);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>      port<span class="hljs-variable">.get</span>(tr); <span class="hljs-comment">//***_get_port定义的get函数获取一个事务（从i端monitor）</span><br>      new_tr = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;new_tr&quot;</span>);<span class="hljs-comment">//实例化一个transaction</span><br>      new_tr<span class="hljs-variable">.my_copy</span>(tr); <span class="hljs-comment">//调用transaction的类方法，该方法在transaction中实现</span><br>      `uvm_info(<span class="hljs-string">&quot;my_model&quot;</span>, <span class="hljs-string">&quot;get one transaction, copy and print it:&quot;</span>, UVM_LOW)<br>      new_tr<span class="hljs-variable">.my_print</span>();<br>      ap<span class="hljs-variable">.write</span>(new_tr); <span class="hljs-comment">//***_analysis_port定义的write函数发送一个事务（到Scoreboard）</span><br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>在agent端声明端口用于连接，在monitor中实例化一个端口</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_monitor <span class="hljs-keyword">extends</span> uvm_monitor;<br><br>   <span class="hljs-keyword">virtual</span> my_if vif;<br><br>   uvm_analysis_port <span class="hljs-variable">#(my_transaction)</span>  ap; <span class="hljs-comment">//声明一个端口用于发送</span><br>   <br>   `uvm_component_utils(my_monitor)<br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_monitor&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      <span class="hljs-keyword">if</span>(!uvm_config_db<span class="hljs-variable">#(virtual my_if)::get(this, &quot;&quot;, &quot;vif&quot;, vif))</span><br>         `uvm_fatal(<span class="hljs-string">&quot;my_monitor&quot;</span>, <span class="hljs-string">&quot;virtual interface must be set for vif!!!&quot;</span>)<br>      ap = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;ap&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//实例化一个端口</span><br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">task</span> collect_one_pkt(my_transaction tr);<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">task</span> my_monitor::main_phase(uvm_phase phase);<br>   my_transaction tr;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>      tr = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;tr&quot;</span>);<br>      collect_one_pkt(tr);<br>      ap<span class="hljs-variable">.write</span>(tr); <span class="hljs-comment">//将事务通过端口发送出去</span><br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_agent <span class="hljs-keyword">extends</span> uvm_agent ;<br>   my_driver     drv;<br>   my_monitor    mon;<br>   <br>   uvm_analysis_port <span class="hljs-variable">#(my_transaction)</span>  ap; <span class="hljs-comment">//声明一个端口，用于发送</span><br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span> <br>   <br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br><br>   `uvm_component_utils(my_agent)<br><span class="hljs-keyword">endclass</span> <br><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_agent::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>   <span class="hljs-keyword">if</span> (is_active == UVM_ACTIVE) <span class="hljs-keyword">begin</span><br>       drv = my_driver::type_id::create(<span class="hljs-string">&quot;drv&quot;</span>, <span class="hljs-keyword">this</span>);<br>   <span class="hljs-keyword">end</span><br>   mon = my_monitor::type_id::create(<span class="hljs-string">&quot;mon&quot;</span>, <span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endfunction</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_agent::connect_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.connect_phase</span>(phase);<br>   ap = mon<span class="hljs-variable">.ap</span>; <span class="hljs-comment">//直接幅值，没有实例化，相当于一个指针，指向monitor的端口</span><br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><p>在env中将agent端与refrence model端相连接</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_env <span class="hljs-keyword">extends</span> uvm_env;<br><br>   my_agent  i_agt;<br>   my_agent  o_agt;<br>   my_model  mdl;<br>   <br>   uvm_tlm_analysis_fifo <span class="hljs-variable">#(my_transaction)</span> agt_mdl_fifo; <span class="hljs-comment">//声明一个fifo</span><br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_env&quot;</span>, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      i_agt = my_agent::type_id::create(<span class="hljs-string">&quot;i_agt&quot;</span>, <span class="hljs-keyword">this</span>);<br>      o_agt = my_agent::type_id::create(<span class="hljs-string">&quot;o_agt&quot;</span>, <span class="hljs-keyword">this</span>);<br>      i_agt<span class="hljs-variable">.is_active</span> = UVM_ACTIVE;<br>      o_agt<span class="hljs-variable">.is_active</span> = UVM_PASSIVE;<br>      mdl = my_model::type_id::create(<span class="hljs-string">&quot;mdl&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//实例化一个参考模型</span><br>      agt_mdl_fifo = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;agt_mdl_fifo&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//实例化一个fifo</span><br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br>   <br>   `uvm_component_utils(my_env)<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_env::connect_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.connect_phase</span>(phase);<br>   i_agt<span class="hljs-variable">.ap</span><span class="hljs-variable">.connect</span>(agt_mdl_fifo<span class="hljs-variable">.analysis_export</span>); <span class="hljs-comment">//将输入端的monitor端口连接到fifo</span><br>   mdl<span class="hljs-variable">.port</span><span class="hljs-variable">.connect</span>(agt_mdl_fifo<span class="hljs-variable">.blocking_get_export</span>); <span class="hljs-comment">//将参考模型的输入端口连接到fifo</span><br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><h2 id="Scoreboard"><a href="#Scoreboard" class="headerlink" title="Scoreboard"></a>Scoreboard</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_SCOREBOARD__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_SCOREBOARD__SV</span><br><span class="hljs-keyword">class</span> my_scoreboard <span class="hljs-keyword">extends</span> uvm_scoreboard;<br>   my_transaction  expect_queue[$];<br>   uvm_blocking_get_port <span class="hljs-variable">#(my_transaction)</span>  exp_port; <span class="hljs-comment">//声明一个端口，接收参考模型的输出</span><br>   uvm_blocking_get_port <span class="hljs-variable">#(my_transaction)</span>  act_port; <span class="hljs-comment">//声明一个端口，接收DUT输出monitor的输出</span><br>   `uvm_component_utils(my_scoreboard)<br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent = <span class="hljs-literal">null</span>);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase);<br><span class="hljs-keyword">endclass</span> <br><br><span class="hljs-keyword">function</span> my_scoreboard::<span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent = <span class="hljs-literal">null</span>);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br><span class="hljs-keyword">endfunction</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_scoreboard::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>   exp_port = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;exp_port&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//实例化一个端口</span><br>   act_port = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;act_port&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//实例化一个端口</span><br><span class="hljs-keyword">endfunction</span> <br><br><span class="hljs-keyword">task</span> my_scoreboard::main_phase(uvm_phase phase);<br>   my_transaction  get_expect,  get_actual, tmp_tran; <span class="hljs-comment">//声明事务</span><br>   <span class="hljs-keyword">bit</span> result;<br> <br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.main_phase</span>(phase);<br>   <span class="hljs-keyword">fork</span>  <span class="hljs-comment">//fork块中并行执行，被begin，end包起来的顺序执行</span><br>      <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span> <span class="hljs-comment">//进程一，接收来自参考模型的事务</span><br>         exp_port<span class="hljs-variable">.get</span>(get_expect); <span class="hljs-comment">//通过exp_port获取预期事务</span><br>         expect_queue<span class="hljs-variable">.push_back</span>(get_expect); <span class="hljs-comment">//当收到数据后，把数据放入expect_queue中</span><br>      <span class="hljs-keyword">end</span><br>       <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span> <span class="hljs-comment">//进程二，接收来自DUT端的monitor事务</span><br>          act_port<span class="hljs-variable">.get</span>(get_actual); <span class="hljs-comment">//通过act_port获取</span><br>         <span class="hljs-keyword">if</span>(expect_queue<span class="hljs-variable">.size</span>() &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>            tmp_tran = expect_queue<span class="hljs-variable">.pop_front</span>(); <span class="hljs-comment">//从expect_queue中弹出之前从exp_port收到的数据</span><br>            result = get_actual<span class="hljs-variable">.my_compare</span>(tmp_tran); <span class="hljs-comment">//比较，该my_compare在my_transaction中定义</span><br>            <span class="hljs-keyword">if</span>(result) <span class="hljs-keyword">begin</span> <br>               `uvm_info(<span class="hljs-string">&quot;my_scoreboard&quot;</span>, <span class="hljs-string">&quot;Compare SUCCESSFULLY&quot;</span>, UVM_LOW);<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>               `uvm_error(<span class="hljs-string">&quot;my_scoreboard&quot;</span>, <span class="hljs-string">&quot;Compare FAILED&quot;</span>);<br>               <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;the expect pkt is&quot;</span>);<br>               tmp_tran<span class="hljs-variable">.my_print</span>();<br>               <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;the actual pkt is&quot;</span>);<br>               get_actual<span class="hljs-variable">.my_print</span>();<br>            <span class="hljs-keyword">end</span><br>         <span class="hljs-keyword">end</span><br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            `uvm_error(<span class="hljs-string">&quot;my_scoreboard&quot;</span>, <span class="hljs-string">&quot;Received from DUT, while Expect Queue is empty&quot;</span>);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;the unexpected pkt is&quot;</span>);<br>            get_actual<span class="hljs-variable">.my_print</span>();<br>         <span class="hljs-keyword">end</span> <br>      <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">join</span><br><span class="hljs-keyword">endtask</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>采用这种比较处理方式的前提是exp_port要比act_port先收到数 据。由于DUT处理数据需要延时，而reference model是基于高级语言的处理，一般不需要延时，因此可以保证exp_port的数据在 act_port的数据之前到来。</p><p>端口连接，一共三个fifo，分别是，i-agent –&gt; refrence model，refrence model –&gt; scoreboard，o-agent –&gt; scoreboard</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_env <span class="hljs-keyword">extends</span> uvm_env;<br><br>   my_agent   i_agt;<br>   my_agent   o_agt;<br>   my_model   mdl;<br>   my_scoreboard scb;<br>   <br>   uvm_tlm_analysis_fifo <span class="hljs-variable">#(my_transaction)</span> agt_scb_fifo; <span class="hljs-comment">//o-agent --&gt; scoreboard</span><br>   uvm_tlm_analysis_fifo <span class="hljs-variable">#(my_transaction)</span> agt_mdl_fifo; <span class="hljs-comment">//i-agent --&gt; refrence model</span><br>   uvm_tlm_analysis_fifo <span class="hljs-variable">#(my_transaction)</span> mdl_scb_fifo; <span class="hljs-comment">//refrence model --&gt; scoreboard</span><br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_env&quot;</span>, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      i_agt = my_agent::type_id::create(<span class="hljs-string">&quot;i_agt&quot;</span>, <span class="hljs-keyword">this</span>);<br>      o_agt = my_agent::type_id::create(<span class="hljs-string">&quot;o_agt&quot;</span>, <span class="hljs-keyword">this</span>);<br>      i_agt<span class="hljs-variable">.is_active</span> = UVM_ACTIVE;<br>      o_agt<span class="hljs-variable">.is_active</span> = UVM_PASSIVE;<br>      mdl = my_model::type_id::create(<span class="hljs-string">&quot;mdl&quot;</span>, <span class="hljs-keyword">this</span>);<br>      scb = my_scoreboard::type_id::create(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-keyword">this</span>);<br>      agt_scb_fifo = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;agt_scb_fifo&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//分别实例化fifo</span><br>      agt_mdl_fifo = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;agt_mdl_fifo&quot;</span>, <span class="hljs-keyword">this</span>);<br>      mdl_scb_fifo = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;mdl_scb_fifo&quot;</span>, <span class="hljs-keyword">this</span>);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br>   <br>   `uvm_component_utils(my_env)<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_env::connect_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.connect_phase</span>(phase);<br>   <span class="hljs-comment">//i-agent --&gt; refrence model</span><br>   i_agt<span class="hljs-variable">.ap</span><span class="hljs-variable">.connect</span>(agt_mdl_fifo<span class="hljs-variable">.analysis_export</span>);<br>   mdl<span class="hljs-variable">.port</span><span class="hljs-variable">.connect</span>(agt_mdl_fifo<span class="hljs-variable">.blocking_get_export</span>);<br>   <span class="hljs-comment">//refrence model --&gt; scoreboard </span><br>   mdl<span class="hljs-variable">.ap</span><span class="hljs-variable">.connect</span>(mdl_scb_fifo<span class="hljs-variable">.analysis_export</span>);<br>   scb<span class="hljs-variable">.exp_port</span><span class="hljs-variable">.connect</span>(mdl_scb_fifo<span class="hljs-variable">.blocking_get_export</span>);<br>   <span class="hljs-comment">//o-agent --&gt; scoreboard</span><br>   o_agt<span class="hljs-variable">.ap</span><span class="hljs-variable">.connect</span>(agt_scb_fifo<span class="hljs-variable">.analysis_export</span>);<br>   scb<span class="hljs-variable">.act_port</span><span class="hljs-variable">.connect</span>(agt_scb_fifo<span class="hljs-variable">.blocking_get_export</span>); <br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><h3 id="TLM通信"><a href="#TLM通信" class="headerlink" title="TLM通信"></a>TLM通信</h3><p>TLM：Transaction Level Modeling事务级建模</p><p>各个模块之间通信的是事务transaction，比如各类port 之间的信息传输</p><p>TLM术语： 端口类型：port、export、imp； 操作类型：put、get、transport</p><p>端口有阻塞和非阻塞的区分</p><p>port与export相连并不能 完成通信，export端再连一个imp</p><p>FIFO实质上是双端的imp，但其隐藏了imp，简单容易理解</p><p>详细解释查阅书籍</p><h4 id="field-automation机制"><a href="#field-automation机制" class="headerlink" title="field_automation机制"></a>field_automation机制</h4><p>暂时省略，具体代码见文末代码汇总</p><h2 id="sequencer-amp-sequence"><a href="#sequencer-amp-sequence" class="headerlink" title="sequencer &amp; sequence"></a>sequencer &amp; sequence</h2><p>agent三元组：sequencer、 driver和monitor</p><p>sequence：激励序列，产生transaction，transaction组成激励序列</p><p>sequencer：字面是序列器；负责发送激励序列</p><p>driver驱动激励，与 sequencer紧密合作</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_SEQUENCER__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_SEQUENCER__SV</span><br><br><span class="hljs-keyword">class</span> my_sequencer <span class="hljs-keyword">extends</span> uvm_sequencer <span class="hljs-variable">#(my_transaction)</span>;<br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span> <br>   <br>   `uvm_component_utils(my_sequencer)<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_SEQUENCE__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_SEQUENCE__SV</span><br><br><span class="hljs-keyword">class</span> my_sequence <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(my_transaction)</span>;<br>   my_transaction m_trans;<br><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name= <span class="hljs-string">&quot;my_sequence&quot;</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>   <span class="hljs-keyword">endfunction</span><br>   <span class="hljs-comment">//每一个sequence都有一个body任务；当一个sequence启动之后，会自动执行body中的代码</span><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> body();<br>      <span class="hljs-comment">//在uvm_sequence这个基类中，有一个变量名为starting_phase，它的类型是uvm_phase，</span><br>      <span class="hljs-comment">//sequencer在启动default_sequence时，会执行</span><br>      <span class="hljs-comment">//seq.starting_phase = phase;</span><br>      <span class="hljs-comment">//seq.start(this); </span><br>      <span class="hljs-comment">//因此，可以在sequence中使用starting_phase进行提起和撤销objection</span><br>      <span class="hljs-comment">//在其他任何地方都不必再设置objection</span><br>      <span class="hljs-keyword">if</span>(starting_phase != <span class="hljs-literal">null</span>) <br>         starting_phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>      <span class="hljs-keyword">repeat</span> (<span class="hljs-number">10</span>) <span class="hljs-keyword">begin</span><br>         `uvm_do(m_trans) <span class="hljs-comment">//宏uvm_do，创建一个my_transaction的实例m_trans，随机化，将其送给sequencer</span><br>      <span class="hljs-keyword">end</span><br>      #<span class="hljs-number">1000</span>;<br>      <span class="hljs-keyword">if</span>(starting_phase != <span class="hljs-literal">null</span>) <br>         starting_phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br>   <span class="hljs-keyword">endtask</span><br><br>   `uvm_object_utils(my_sequence)<br><span class="hljs-keyword">endclass</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>sequencer仲裁driver和sequence双方的请求，1）检测是否有 sequence发送transaction的请求；2）检测是否driver申请transaction。</p><p>sequencer操作： 有发送，有申请，则立刻发送；有发送，无申请，等driver申请；有申请，无发送，等sequence发送。</p><p>在agent中实例化sequencer</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_agent <span class="hljs-keyword">extends</span> uvm_agent ;<br>   my_sequencer  sqr; <span class="hljs-comment">//声明</span><br>   my_driver     drv;<br>   my_monitor    mon;<br>   <br>   uvm_analysis_port <span class="hljs-variable">#(my_transaction)</span>  ap;<br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span> <br>   <br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br><br>   `uvm_component_utils(my_agent)<br><span class="hljs-keyword">endclass</span> <br><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_agent::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>   <span class="hljs-keyword">if</span> (is_active == UVM_ACTIVE) <span class="hljs-keyword">begin</span><br>      sqr = my_sequencer::type_id::create(<span class="hljs-string">&quot;sqr&quot;</span>, <span class="hljs-keyword">this</span>); <span class="hljs-comment">//实例化</span><br>      drv = my_driver::type_id::create(<span class="hljs-string">&quot;drv&quot;</span>, <span class="hljs-keyword">this</span>);<br>   <span class="hljs-keyword">end</span><br>   mon = my_monitor::type_id::create(<span class="hljs-string">&quot;mon&quot;</span>, <span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endfunction</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_agent::connect_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.connect_phase</span>(phase);<br>   <span class="hljs-keyword">if</span> (is_active == UVM_ACTIVE) <span class="hljs-keyword">begin</span><br>      <span class="hljs-comment">//seq_item_port是uvm_driver中的成员变量，seq_item_export是uvm_sequencer中的成员变量</span><br>      <span class="hljs-comment">//连接driver与sequencer</span><br>      drv<span class="hljs-variable">.seq_item_port</span><span class="hljs-variable">.connect</span>(sqr<span class="hljs-variable">.seq_item_export</span>);<br>   <span class="hljs-keyword">end</span><br>   ap = mon<span class="hljs-variable">.ap</span>;<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><p>在driver中使用port申请获取transaction</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">task</span> my_driver::main_phase(uvm_phase phase);<br>   vif<span class="hljs-variable">.data</span> &lt;= <span class="hljs-number">8&#x27;b0</span>;<br>   vif<span class="hljs-variable">.valid</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>   <span class="hljs-keyword">while</span>(!vif<span class="hljs-variable">.rst_n</span>)<br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>      seq_item_port<span class="hljs-variable">.get_next_item</span>(req); <span class="hljs-comment">//通过get_next_item任务来得到一个新的req，并且驱动它</span><br>      drive_one_pkt(req); <span class="hljs-comment">//驱动req</span><br>      seq_item_port<span class="hljs-variable">.item_done</span>(); <span class="hljs-comment">//驱动完成后调用item_done通知sequencer</span><br>      <span class="hljs-comment">//sequencer留存req，当发出了但driver没有收到时，使用备份发送</span><br>      <span class="hljs-comment">//item_done被调用后，sequencer删除备份</span><br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br></code></pre></td></tr></table></figure><p>sequence向sequencer发送transaction</p><p>可以手动开启</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">task</span> my_env::main_phase(uvm_phase phase);<br>   my_sequence seq;<br>   phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>   seq = my_sequence::type_id::create(<span class="hljs-string">&quot;seq&quot;</span>);<br>   seq<span class="hljs-variable">.start</span>(i_agt<span class="hljs-variable">.sqr</span>); <br>   phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endtask</span><br><br></code></pre></td></tr></table></figure><h3 id="default-sequence的使用"><a href="#default-sequence的使用" class="headerlink" title="default_sequence的使用"></a>default_sequence的使用</h3><p>使用default_sequence的方式非常简单，只需要在某个component（如my_env）的build_phase中设置如下代码即可</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>    i_agt = my_agent::type_id::create(<span class="hljs-string">&quot;i_agt&quot;</span>, <span class="hljs-keyword">this</span>);<br>    o_agt = my_agent::type_id::create(<span class="hljs-string">&quot;o_agt&quot;</span>, <span class="hljs-keyword">this</span>);<br>    i_agt<span class="hljs-variable">.is_active</span> = UVM_ACTIVE;<br>    o_agt<span class="hljs-variable">.is_active</span> = UVM_PASSIVE;<br>    mdl = my_model::type_id::create(<span class="hljs-string">&quot;mdl&quot;</span>, <span class="hljs-keyword">this</span>);<br>    scb = my_scoreboard::type_id::create(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-keyword">this</span>);<br>    agt_scb_fifo = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;agt_scb_fifo&quot;</span>, <span class="hljs-keyword">this</span>);<br>    agt_mdl_fifo = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;agt_mdl_fifo&quot;</span>, <span class="hljs-keyword">this</span>);<br>    mdl_scb_fifo = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;mdl_scb_fifo&quot;</span>, <span class="hljs-keyword">this</span>);<br>    uvm_config_db<span class="hljs-variable">#(uvm_object_wrapper)</span>::set(<span class="hljs-keyword">this</span>,<br>                                            <span class="hljs-string">&quot;i_agt.sqr.main_phase&quot;</span>,<br>                                            <span class="hljs-string">&quot;default_sequence&quot;</span>,<br>                                             my_sequence::type_id::get());<br>     <br><span class="hljs-comment">//第二个参数是相对于第一个参数的相对路劲，目前树根，仍然是env，因此，第一个参数可以写this</span><br>   <span class="hljs-comment">//UVM在设置default_sequence时的要求，必须指定是哪个phase</span><br>   <span class="hljs-comment">//也可以在agent，或者top_tb中设置default_sequence</span><br> <span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><h2 id="base-test"><a href="#base-test" class="headerlink" title="base_test"></a>base_test</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> BASE_TEST__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> BASE_TEST__SV</span><br><br><span class="hljs-keyword">class</span> base_test <span class="hljs-keyword">extends</span> uvm_test;<br><br>   my_env         env;<br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;base_test&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name,parent);<br>   <span class="hljs-keyword">endfunction</span><br>   <br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> report_phase(uvm_phase phase);<br>   <span class="hljs-comment">//report_phase运行在run phase之后；输出test case是否成功</span><br>   `uvm_component_utils(base_test)<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> base_test::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>   env  =  my_env::type_id::create(<span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-keyword">this</span>); <br>   uvm_config_db<span class="hljs-variable">#(uvm_object_wrapper)</span>::set(<span class="hljs-keyword">this</span>,<br>                                           <span class="hljs-string">&quot;env.i_agt.sqr.main_phase&quot;</span>,<br>                                           <span class="hljs-string">&quot;default_sequence&quot;</span>,<br>                                            my_sequence::type_id::get());<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> base_test::report_phase(uvm_phase phase);<br>   uvm_report_server server;<br>   <span class="hljs-keyword">int</span> err_num;<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.report_phase</span>(phase);<br>   server = get_report_server();<br>   err_num = server<span class="hljs-variable">.get_severity_count</span>(UVM_ERROR); <span class="hljs-comment">//获取ERROR个数，并输出pass/fail</span><br>   <span class="hljs-keyword">if</span> (err_num != <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>      <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;TEST CASE FAILED&quot;</span>);<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;TEST CASE PASSED&quot;</span>);<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><p>top_tb中run_test的参数从my_env变成了base_test，并且config_db中设置virtual interface的路径参数要改变</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   run_test(<span class="hljs-string">&quot;base_test&quot;</span>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.env.i_agt.drv&quot;, &quot;vif&quot;, input_if)</span>;<br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.env.i_agt.mon&quot;, &quot;vif&quot;, input_if)</span>;<br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.env.o_agt.mon&quot;, &quot;vif&quot;, output_if)</span>;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="多用例构造时的代码复用"><a href="#多用例构造时的代码复用" class="headerlink" title="多用例构造时的代码复用"></a>多用例构造时的代码复用</h2><p>测试激励：test vector或pattern；测试用例的核心部分。 （如本例中sequence uvm_do产生的transaction数据包）</p><p>不同的测试激励对应于不同的测试用例；即，不同的 sequence对应不同的test case，但用例其他部分是相同的，如 driver、monitor等。</p><p>为验证完备，需要大量的test case，其实是需要大量的 sequence，其他部分均可以复用。</p><p>最终完整的验证平台：</p><h4 id="top-tb-sv"><a href="#top-tb-sv" class="headerlink" title="top_tb.sv"></a>top_tb.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns/1ps</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;uvm_macros.svh&quot;</span><br><br><span class="hljs-keyword">import</span> uvm_pkg::*;<br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_if.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_transaction.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_sequencer.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_driver.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_monitor.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_agent.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_model.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_scoreboard.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_env.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;base_test.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_case0.sv&quot;</span><br><span class="hljs-meta">`<span class="hljs-keyword">include</span> &quot;my_case1.sv&quot;</span><br><br><span class="hljs-keyword">module</span> top_tb;<br><br><span class="hljs-keyword">reg</span> clk;<br><span class="hljs-keyword">reg</span> rst_n;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] rxd;<br><span class="hljs-keyword">reg</span> rx_dv;<br><span class="hljs-keyword">wire</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] txd;<br><span class="hljs-keyword">wire</span> tx_en;<br><br>my_if input_if(clk, rst_n);<br>my_if output_if(clk, rst_n);<br><br>dut my_dut(<span class="hljs-variable">.clk</span>(clk),<br>           <span class="hljs-variable">.rst_n</span>(rst_n),<br>           <span class="hljs-variable">.rxd</span>(input_if<span class="hljs-variable">.data</span>),<br>           <span class="hljs-variable">.rx_dv</span>(input_if<span class="hljs-variable">.valid</span>),<br>           <span class="hljs-variable">.txd</span>(output_if<span class="hljs-variable">.data</span>),<br>           <span class="hljs-variable">.tx_en</span>(output_if<span class="hljs-variable">.valid</span>));<br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   clk = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>      #<span class="hljs-number">100</span> clk = ~clk;<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   rst_n = <span class="hljs-number">1&#x27;b0</span>;<br>   #<span class="hljs-number">1000</span>;<br>   rst_n = <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   run_test();<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.env.i_agt.drv&quot;, &quot;vif&quot;, input_if)</span>;<br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.env.i_agt.mon&quot;, &quot;vif&quot;, input_if)</span>;<br>   uvm_config_db<span class="hljs-variable">#(virtual my_if)::set(null, &quot;uvm_test_top.env.o_agt.mon&quot;, &quot;vif&quot;, output_if)</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h4 id="my-case0-sv"><a href="#my-case0-sv" class="headerlink" title="my_case0.sv"></a>my_case0.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_CASE0__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_CASE0__SV</span><br><span class="hljs-keyword">class</span> case0_sequence <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(my_transaction)</span>;<br>   my_transaction m_trans;<br><br>   <span class="hljs-keyword">function</span>  <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name= <span class="hljs-string">&quot;case0_sequence&quot;</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>   <span class="hljs-keyword">endfunction</span> <br>   <br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> body();<br>      <span class="hljs-keyword">if</span>(starting_phase != <span class="hljs-literal">null</span>) <br>         starting_phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>      <span class="hljs-keyword">repeat</span> (<span class="hljs-number">10</span>) <span class="hljs-keyword">begin</span><br>         `uvm_do(m_trans)<br>      <span class="hljs-keyword">end</span><br>      #<span class="hljs-number">100</span>;<br>      <span class="hljs-keyword">if</span>(starting_phase != <span class="hljs-literal">null</span>) <br>         starting_phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br>   <span class="hljs-keyword">endtask</span><br><br>   `uvm_object_utils(case0_sequence)<br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">class</span> my_case0 <span class="hljs-keyword">extends</span> base_test;<br><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_case0&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name,parent);<br>   <span class="hljs-keyword">endfunction</span> <br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase); <br>   `uvm_component_utils(my_case0)<br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_case0::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br><br>   uvm_config_db<span class="hljs-variable">#(uvm_object_wrapper)</span>::set(<span class="hljs-keyword">this</span>, <br>                                           <span class="hljs-string">&quot;env.i_agt.sqr.main_phase&quot;</span>, <br>                                           <span class="hljs-string">&quot;default_sequence&quot;</span>, <br>                                           case0_sequence::type_id::get());<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h4 id="my-case1-sv"><a href="#my-case1-sv" class="headerlink" title="my_case1.sv"></a>my_case1.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_CASE1__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_CASE1__SV</span><br><span class="hljs-keyword">class</span> case1_sequence <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(my_transaction)</span>;<br>   my_transaction m_trans;<br><br>   <span class="hljs-keyword">function</span>  <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name= <span class="hljs-string">&quot;case1_sequence&quot;</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>   <span class="hljs-keyword">endfunction</span> <br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> body();<br>      <span class="hljs-keyword">if</span>(starting_phase != <span class="hljs-literal">null</span>) <br>         starting_phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>      <span class="hljs-keyword">repeat</span> (<span class="hljs-number">10</span>) <span class="hljs-keyword">begin</span><br>         `uvm_do_with(m_trans, &#123; m_trans<span class="hljs-variable">.pload</span><span class="hljs-variable">.size</span>() == <span class="hljs-number">60</span>;&#125;)<br>      <span class="hljs-keyword">end</span><br>      #<span class="hljs-number">100</span>;<br>      <span class="hljs-keyword">if</span>(starting_phase != <span class="hljs-literal">null</span>) <br>         starting_phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br>   <span class="hljs-keyword">endtask</span><br><br>   `uvm_object_utils(case1_sequence)<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">class</span> my_case1 <span class="hljs-keyword">extends</span> base_test;<br>  <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_case1&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name,parent);<br>   <span class="hljs-keyword">endfunction</span> <br>   <br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase); <br>   `uvm_component_utils(my_case1)<br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_case1::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br><br>   uvm_config_db<span class="hljs-variable">#(uvm_object_wrapper)</span>::set(<span class="hljs-keyword">this</span>, <br>                                           <span class="hljs-string">&quot;env.i_agt.sqr.main_phase&quot;</span>, <br>                                           <span class="hljs-string">&quot;default_sequence&quot;</span>, <br>                                           case1_sequence::type_id::get()); <span class="hljs-comment">//case1_sequence</span><br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h4 id="base-test-sv"><a href="#base-test-sv" class="headerlink" title="base_test.sv"></a>base_test.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> BASE_TEST__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> BASE_TEST__SV</span><br><br><span class="hljs-keyword">class</span> base_test <span class="hljs-keyword">extends</span> uvm_test;<br><br>   my_env         env;<br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;base_test&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name,parent);<br>   <span class="hljs-keyword">endfunction</span><br>   <br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> report_phase(uvm_phase phase);<br>   `uvm_component_utils(base_test)<br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> base_test::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>   env  =  my_env::type_id::create(<span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-keyword">this</span>); <br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> base_test::report_phase(uvm_phase phase);<br>   uvm_report_server server;<br>   <span class="hljs-keyword">int</span> err_num;<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.report_phase</span>(phase);<br><br>   server = get_report_server();<br>   err_num = server<span class="hljs-variable">.get_severity_count</span>(UVM_ERROR);<br><br>   <span class="hljs-keyword">if</span> (err_num != <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>      <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;TEST CASE FAILED&quot;</span>);<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;TEST CASE PASSED&quot;</span>);<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h4 id="my-env-sv"><a href="#my-env-sv" class="headerlink" title="my_env.sv"></a>my_env.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_ENV__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_ENV__SV</span><br><br><span class="hljs-keyword">class</span> my_env <span class="hljs-keyword">extends</span> uvm_env;<br><br>   my_agent   i_agt;<br>   my_agent   o_agt;<br>   my_model   mdl;<br>   my_scoreboard scb;<br>   <br>   uvm_tlm_analysis_fifo <span class="hljs-variable">#(my_transaction)</span> agt_scb_fifo;<br>   uvm_tlm_analysis_fifo <span class="hljs-variable">#(my_transaction)</span> agt_mdl_fifo;<br>   uvm_tlm_analysis_fifo <span class="hljs-variable">#(my_transaction)</span> mdl_scb_fifo;<br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_env&quot;</span>, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      i_agt = my_agent::type_id::create(<span class="hljs-string">&quot;i_agt&quot;</span>, <span class="hljs-keyword">this</span>);<br>      o_agt = my_agent::type_id::create(<span class="hljs-string">&quot;o_agt&quot;</span>, <span class="hljs-keyword">this</span>);<br>      i_agt<span class="hljs-variable">.is_active</span> = UVM_ACTIVE;<br>      o_agt<span class="hljs-variable">.is_active</span> = UVM_PASSIVE;<br>      mdl = my_model::type_id::create(<span class="hljs-string">&quot;mdl&quot;</span>, <span class="hljs-keyword">this</span>);<br>      scb = my_scoreboard::type_id::create(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-keyword">this</span>);<br>      agt_scb_fifo = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;agt_scb_fifo&quot;</span>, <span class="hljs-keyword">this</span>);<br>      agt_mdl_fifo = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;agt_mdl_fifo&quot;</span>, <span class="hljs-keyword">this</span>);<br>      mdl_scb_fifo = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;mdl_scb_fifo&quot;</span>, <span class="hljs-keyword">this</span>);<br><br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br>   <br>   `uvm_component_utils(my_env)<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_env::connect_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.connect_phase</span>(phase);<br>   i_agt<span class="hljs-variable">.ap</span><span class="hljs-variable">.connect</span>(agt_mdl_fifo<span class="hljs-variable">.analysis_export</span>);<br>   mdl<span class="hljs-variable">.port</span><span class="hljs-variable">.connect</span>(agt_mdl_fifo<span class="hljs-variable">.blocking_get_export</span>);<br>   mdl<span class="hljs-variable">.ap</span><span class="hljs-variable">.connect</span>(mdl_scb_fifo<span class="hljs-variable">.analysis_export</span>);<br>   scb<span class="hljs-variable">.exp_port</span><span class="hljs-variable">.connect</span>(mdl_scb_fifo<span class="hljs-variable">.blocking_get_export</span>);<br>   o_agt<span class="hljs-variable">.ap</span><span class="hljs-variable">.connect</span>(agt_scb_fifo<span class="hljs-variable">.analysis_export</span>);<br>   scb<span class="hljs-variable">.act_port</span><span class="hljs-variable">.connect</span>(agt_scb_fifo<span class="hljs-variable">.blocking_get_export</span>); <br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h4 id="my-scoreboard"><a href="#my-scoreboard" class="headerlink" title="my_scoreboard"></a>my_scoreboard</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_SCOREBOARD__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_SCOREBOARD__SV</span><br><span class="hljs-keyword">class</span> my_scoreboard <span class="hljs-keyword">extends</span> uvm_scoreboard;<br>   my_transaction  expect_queue[$];<br>   uvm_blocking_get_port <span class="hljs-variable">#(my_transaction)</span>  exp_port;<br>   uvm_blocking_get_port <span class="hljs-variable">#(my_transaction)</span>  act_port;<br>   `uvm_component_utils(my_scoreboard)<br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent = <span class="hljs-literal">null</span>);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase);<br><span class="hljs-keyword">endclass</span> <br><br><span class="hljs-keyword">function</span> my_scoreboard::<span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent = <span class="hljs-literal">null</span>);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br><span class="hljs-keyword">endfunction</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_scoreboard::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>   exp_port = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;exp_port&quot;</span>, <span class="hljs-keyword">this</span>);<br>   act_port = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;act_port&quot;</span>, <span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endfunction</span> <br><br><span class="hljs-keyword">task</span> my_scoreboard::main_phase(uvm_phase phase);<br>   my_transaction  get_expect,  get_actual, tmp_tran;<br>   <span class="hljs-keyword">bit</span> result;<br> <br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.main_phase</span>(phase);<br>   <span class="hljs-keyword">fork</span> <br>      <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>         exp_port<span class="hljs-variable">.get</span>(get_expect);<br>         expect_queue<span class="hljs-variable">.push_back</span>(get_expect);<br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>         act_port<span class="hljs-variable">.get</span>(get_actual);<br>         <span class="hljs-keyword">if</span>(expect_queue<span class="hljs-variable">.size</span>() &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>            tmp_tran = expect_queue<span class="hljs-variable">.pop_front</span>();<br>            result = get_actual<span class="hljs-variable">.compare</span>(tmp_tran);<br>            <span class="hljs-keyword">if</span>(result) <span class="hljs-keyword">begin</span> <br>               `uvm_info(<span class="hljs-string">&quot;my_scoreboard&quot;</span>, <span class="hljs-string">&quot;Compare SUCCESSFULLY&quot;</span>, UVM_LOW);<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>               `uvm_error(<span class="hljs-string">&quot;my_scoreboard&quot;</span>, <span class="hljs-string">&quot;Compare FAILED&quot;</span>);<br>               <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;the expect pkt is&quot;</span>);<br>               tmp_tran<span class="hljs-variable">.print</span>();<br>               <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;the actual pkt is&quot;</span>);<br>               get_actual<span class="hljs-variable">.print</span>();<br>            <span class="hljs-keyword">end</span><br>         <span class="hljs-keyword">end</span><br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            `uvm_error(<span class="hljs-string">&quot;my_scoreboard&quot;</span>, <span class="hljs-string">&quot;Received from DUT, while Expect Queue is empty&quot;</span>);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;the unexpected pkt is&quot;</span>);<br>            get_actual<span class="hljs-variable">.print</span>();<br>         <span class="hljs-keyword">end</span> <br>      <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">join</span><br><span class="hljs-keyword">endtask</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h4 id="my-model-sv"><a href="#my-model-sv" class="headerlink" title="my_model.sv"></a>my_model.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_MODEL__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_MODEL__SV</span><br><br><span class="hljs-keyword">class</span> my_model <span class="hljs-keyword">extends</span> uvm_component;<br>   <br>   uvm_blocking_get_port <span class="hljs-variable">#(my_transaction)</span>  port;<br>   uvm_analysis_port <span class="hljs-variable">#(my_transaction)</span>  ap;<br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span>  <span class="hljs-keyword">task</span> main_phase(uvm_phase phase);<br><br>   `uvm_component_utils(my_model)<br><span class="hljs-keyword">endclass</span> <br><br><span class="hljs-keyword">function</span> my_model::<span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br><span class="hljs-keyword">endfunction</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_model::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>   port = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-keyword">this</span>);<br>   ap = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;ap&quot;</span>, <span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">task</span> my_model::main_phase(uvm_phase phase);<br>   my_transaction tr;<br>   my_transaction new_tr;<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.main_phase</span>(phase);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>      port<span class="hljs-variable">.get</span>(tr);<br>      new_tr = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;new_tr&quot;</span>);<br>      new_tr<span class="hljs-variable">.copy</span>(tr);<br>      `uvm_info(<span class="hljs-string">&quot;my_model&quot;</span>, <span class="hljs-string">&quot;get one transaction, copy and print it:&quot;</span>, UVM_LOW)<br>      new_tr<span class="hljs-variable">.print</span>();<br>      ap<span class="hljs-variable">.write</span>(new_tr);<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h4 id="my-agent"><a href="#my-agent" class="headerlink" title="my_agent"></a>my_agent</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_AGENT__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_AGENT__SV</span><br><br><span class="hljs-keyword">class</span> my_agent <span class="hljs-keyword">extends</span> uvm_agent ;<br>   my_sequencer  sqr;<br>   my_driver     drv;<br>   my_monitor    mon;<br>   <br>   uvm_analysis_port <span class="hljs-variable">#(my_transaction)</span>  ap;<br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span> <br>   <br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br><br>   `uvm_component_utils(my_agent)<br><span class="hljs-keyword">endclass</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_agent::build_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>   <span class="hljs-keyword">if</span> (is_active == UVM_ACTIVE) <span class="hljs-keyword">begin</span><br>      sqr = my_sequencer::type_id::create(<span class="hljs-string">&quot;sqr&quot;</span>, <span class="hljs-keyword">this</span>);<br>      drv = my_driver::type_id::create(<span class="hljs-string">&quot;drv&quot;</span>, <span class="hljs-keyword">this</span>);<br>   <span class="hljs-keyword">end</span><br>   mon = my_monitor::type_id::create(<span class="hljs-string">&quot;mon&quot;</span>, <span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endfunction</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> my_agent::connect_phase(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.connect_phase</span>(phase);<br>   <span class="hljs-keyword">if</span> (is_active == UVM_ACTIVE) <span class="hljs-keyword">begin</span><br>      drv<span class="hljs-variable">.seq_item_port</span><span class="hljs-variable">.connect</span>(sqr<span class="hljs-variable">.seq_item_export</span>);<br>   <span class="hljs-keyword">end</span><br>   ap = mon<span class="hljs-variable">.ap</span>;<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h4 id="my-sequencer-sv"><a href="#my-sequencer-sv" class="headerlink" title="my_sequencer.sv"></a>my_sequencer.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_SEQUENCER__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_SEQUENCER__SV</span><br><br><span class="hljs-keyword">class</span> my_sequencer <span class="hljs-keyword">extends</span> uvm_sequencer <span class="hljs-variable">#(my_transaction)</span>;<br>   <br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span> <br>   <br>   `uvm_component_utils(my_sequencer)<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h4 id="my-monitor-sv"><a href="#my-monitor-sv" class="headerlink" title="my_monitor.sv"></a>my_monitor.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_MONITOR__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_MONITOR__SV</span><br><span class="hljs-keyword">class</span> my_monitor <span class="hljs-keyword">extends</span> uvm_monitor;<br><br>   <span class="hljs-keyword">virtual</span> my_if vif;<br><br>   uvm_analysis_port <span class="hljs-variable">#(my_transaction)</span>  ap;<br>   <br>   `uvm_component_utils(my_monitor)<br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_monitor&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      <span class="hljs-keyword">if</span>(!uvm_config_db<span class="hljs-variable">#(virtual my_if)::get(this, &quot;&quot;, &quot;vif&quot;, vif))</span><br>         `uvm_fatal(<span class="hljs-string">&quot;my_monitor&quot;</span>, <span class="hljs-string">&quot;virtual interface must be set for vif!!!&quot;</span>)<br>      ap = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;ap&quot;</span>, <span class="hljs-keyword">this</span>);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">task</span> collect_one_pkt(my_transaction tr);<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">task</span> my_monitor::main_phase(uvm_phase phase);<br>   my_transaction tr;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>      tr = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;tr&quot;</span>);<br>      collect_one_pkt(tr);<br>      ap<span class="hljs-variable">.write</span>(tr);<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><br><span class="hljs-keyword">task</span> my_monitor::collect_one_pkt(my_transaction tr);<br>   <span class="hljs-keyword">byte</span> <span class="hljs-keyword">unsigned</span> data_q[$];<br>   <span class="hljs-keyword">byte</span> <span class="hljs-keyword">unsigned</span> data_array[];<br>   <span class="hljs-keyword">logic</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data;<br>   <span class="hljs-keyword">logic</span> valid = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">int</span> data_size;<br>   <br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>      <span class="hljs-keyword">if</span>(vif<span class="hljs-variable">.valid</span>) <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">end</span><br>   <br>   `uvm_info(<span class="hljs-string">&quot;my_monitor&quot;</span>, <span class="hljs-string">&quot;begin to collect one pkt&quot;</span>, UVM_LOW);<br>   <span class="hljs-keyword">while</span>(vif<span class="hljs-variable">.valid</span>) <span class="hljs-keyword">begin</span><br>      data_q<span class="hljs-variable">.push_back</span>(vif<span class="hljs-variable">.data</span>);<br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   <span class="hljs-keyword">end</span><br>   data_size  = data_q<span class="hljs-variable">.size</span>();   <br>   data_array = <span class="hljs-keyword">new</span>[data_size];<br>   <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; data_size; i++ ) <span class="hljs-keyword">begin</span><br>      data_array[i] = data_q[i]; <br>   <span class="hljs-keyword">end</span><br>   tr<span class="hljs-variable">.pload</span> = <span class="hljs-keyword">new</span>[data_size - <span class="hljs-number">18</span>]; <span class="hljs-comment">//da sa, e_type, crc</span><br>   data_size = tr<span class="hljs-variable">.unpack_bytes</span>(data_array) / <span class="hljs-number">8</span>; <br>   `uvm_info(<span class="hljs-string">&quot;my_monitor&quot;</span>, <span class="hljs-string">&quot;end collect one pkt&quot;</span>, UVM_LOW);<br><span class="hljs-keyword">endtask</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h4 id="my-driver-sv"><a href="#my-driver-sv" class="headerlink" title="my_driver.sv"></a>my_driver.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_DRIVER__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_DRIVER__SV</span><br><span class="hljs-keyword">class</span> my_driver <span class="hljs-keyword">extends</span> uvm_driver<span class="hljs-variable">#(my_transaction)</span>;<br><br>   <span class="hljs-keyword">virtual</span> my_if vif;<br><br>   `uvm_component_utils(my_driver)<br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_driver&quot;</span>, uvm_component parent = <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>      <span class="hljs-keyword">if</span>(!uvm_config_db<span class="hljs-variable">#(virtual my_if)::get(this, &quot;&quot;, &quot;vif&quot;, vif))</span><br>         `uvm_fatal(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;virtual interface must be set for vif!!!&quot;</span>)<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase);<br>   <span class="hljs-keyword">extern</span> <span class="hljs-keyword">task</span> drive_one_pkt(my_transaction tr);<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">task</span> my_driver::main_phase(uvm_phase phase);<br>   vif<span class="hljs-variable">.data</span> &lt;= <span class="hljs-number">8&#x27;b0</span>;<br>   vif<span class="hljs-variable">.valid</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>   <span class="hljs-keyword">while</span>(!vif<span class="hljs-variable">.rst_n</span>)<br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>      seq_item_port<span class="hljs-variable">.get_next_item</span>(req);<br>      drive_one_pkt(req);<br>      seq_item_port<span class="hljs-variable">.item_done</span>();<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><br><span class="hljs-keyword">task</span> my_driver::drive_one_pkt(my_transaction tr);<br>   <span class="hljs-keyword">byte</span> <span class="hljs-keyword">unsigned</span>     data_q[];<br>   <span class="hljs-keyword">int</span>  data_size;<br>   <br>   data_size = tr<span class="hljs-variable">.pack_bytes</span>(data_q) / <span class="hljs-number">8</span>; <br>   `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;begin to drive one pkt&quot;</span>, UVM_LOW);<br>   <span class="hljs-keyword">repeat</span>(<span class="hljs-number">3</span>) @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; data_size; i++ ) <span class="hljs-keyword">begin</span><br>      @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>      vif<span class="hljs-variable">.valid</span> &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>      vif<span class="hljs-variable">.data</span> &lt;= data_q[i]; <br>   <span class="hljs-keyword">end</span><br><br>   @(<span class="hljs-keyword">posedge</span> vif<span class="hljs-variable">.clk</span>);<br>   vif<span class="hljs-variable">.valid</span> &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>   `uvm_info(<span class="hljs-string">&quot;my_driver&quot;</span>, <span class="hljs-string">&quot;end drive one pkt&quot;</span>, UVM_LOW);<br><span class="hljs-keyword">endtask</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h4 id="my-transaction-sv"><a href="#my-transaction-sv" class="headerlink" title="my_transaction.sv"></a>my_transaction.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_TRANSACTION__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_TRANSACTION__SV</span><br><br><span class="hljs-keyword">class</span> my_transaction <span class="hljs-keyword">extends</span> uvm_sequence_item;<br><br>   <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">47</span>:<span class="hljs-number">0</span>] dmac;<br>   <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">47</span>:<span class="hljs-number">0</span>] smac;<br>   <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] ether_type;<br>   <span class="hljs-keyword">rand</span> <span class="hljs-keyword">byte</span>      pload[];<br>   <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] crc;<br><br>   <span class="hljs-keyword">constraint</span> pload_cons&#123;<br>      pload<span class="hljs-variable">.size</span> &gt;= <span class="hljs-number">46</span>;<br>      pload<span class="hljs-variable">.size</span> &lt;= <span class="hljs-number">1500</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] calc_crc();<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">32&#x27;h0</span>;<br>   <span class="hljs-keyword">endfunction</span><br><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> post_randomize();<br>      crc = calc_crc;<br>   <span class="hljs-keyword">endfunction</span><br>   <span class="hljs-comment">//UVM中field_automation机制，使用uvm_field系列宏实现</span><br>   <span class="hljs-comment">//使用uvm_object_utils_begin和uvm_object_utils_end来实现my_transaction的factory注册，在这两个宏中间，</span><br>   <span class="hljs-comment">//使用uvm_field宏注册所有字段。uvm_field系列宏随着transaction成员变量的不同而不同，</span><br>   <span class="hljs-comment">//如上面的定义中出现了针对bit类型的  uvm_field_int及针对byte类型动态数组的uvm_field_array_int</span><br>   <span class="hljs-comment">//当使用上述宏注册之后，可以直接调用copy、compare、print等函数，而无需自己定义</span><br>   `uvm_object_utils_begin(my_transaction)<br>      `uvm_field_int(dmac, UVM_ALL_ON)<br>      `uvm_field_int(smac, UVM_ALL_ON)<br>      `uvm_field_int(ether_type, UVM_ALL_ON)<br>      `uvm_field_array_int(pload, UVM_ALL_ON)<br>      `uvm_field_int(crc, UVM_ALL_ON)<br>   `uvm_object_utils_end<br><br>   <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">&quot;my_transaction&quot;</span>);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>();<br>   <span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">endclass</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h4 id="my-vif-sv"><a href="#my-vif-sv" class="headerlink" title="my_vif.sv"></a>my_vif.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">ifndef</span> MY_IF__SV</span><br><span class="hljs-meta">`<span class="hljs-keyword">define</span> MY_IF__SV</span><br><br><span class="hljs-keyword">interface</span> my_if(<span class="hljs-keyword">input</span> clk, <span class="hljs-keyword">input</span> rst_n);<br><br>   <span class="hljs-keyword">logic</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data;<br>   <span class="hljs-keyword">logic</span> valid;<br><span class="hljs-keyword">endinterface</span><br><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h4 id="dut-sv"><a href="#dut-sv" class="headerlink" title="dut.sv"></a>dut.sv</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> dut(clk,<br>           rst_n, <br>           rxd,<br>           rx_dv,<br>           txd,<br>           tx_en);<br><span class="hljs-keyword">input</span> clk;<br><span class="hljs-keyword">input</span> rst_n;<br><span class="hljs-keyword">input</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] rxd;<br><span class="hljs-keyword">input</span> rx_dv;<br><span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] txd;<br><span class="hljs-keyword">output</span> tx_en;<br><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] txd;<br><span class="hljs-keyword">reg</span> tx_en;<br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>   <span class="hljs-keyword">if</span>(!rst_n) <span class="hljs-keyword">begin</span><br>      txd &lt;= <span class="hljs-number">8&#x27;b0</span>;<br>      tx_en &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      txd &lt;= rxd;<br>      tx_en &lt;= rx_dv;<br>   <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h2 id="图片解释"><a href="#图片解释" class="headerlink" title="图片解释"></a>图片解释</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
    <categories>
      
      <category>UVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VCS仿真相关</title>
    <link href="/2024/11/13/%E6%95%B0%E5%AD%97IC_VSC%E4%BB%BF%E7%9C%9F%E7%9B%B8%E5%85%B3/"/>
    <url>/2024/11/13/%E6%95%B0%E5%AD%97IC_VSC%E4%BB%BF%E7%9C%9F%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p>VCS+Verdi仿真验证</p><span id="more"></span><h1 id="VCS仿真相关"><a href="#VCS仿真相关" class="headerlink" title="VCS仿真相关"></a>VCS仿真相关</h1><h2 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h2><p><img src="/img/article_img/VCS/%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95.png"></p><p>de 文件下存放设计的 .v 文件</p><p>dv 文件下存放用于仿真验证的 .sv 文件 (top_db.sv)</p><p>sim 文件下存放用于仿真的脚本以及产生的中间文件，脚本包括：makefile，filelist.f，verdi.tcl</p><h2 id="dv"><a href="#dv" class="headerlink" title="dv"></a>dv</h2><p>要使用Verdi观察波形，在 .sv 文件中要加入以下代码，保存仿真产生的波形文件</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//保存仿真产生的波形文件</span><br><span class="hljs-meta">`<span class="hljs-keyword">ifdef</span> FSDB</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    $fsdbDumpfile(<span class="hljs-string">&quot;tb.fsdb&quot;</span>);<br>    $fsdbDumpvars(<span class="hljs-string">&quot;+all&quot;</span>);<br>    <span class="hljs-comment">// $fsdbDumpMDA(&quot;sync_fifo_tb.sync_fifo_0.my_memory&quot;);</span><br><span class="hljs-keyword">end</span><br><span class="hljs-meta">`<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//设定运行时间</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    #<span class="hljs-number">100000000</span>;<br>    <span class="hljs-built_in">$finish</span>;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="Sim"><a href="#Sim" class="headerlink" title="Sim"></a>Sim</h2><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">all: filelist com_fsdb sim verdi</span><br><span class="hljs-comment">#---------------------------------------------------------------</span><br><span class="hljs-comment"># 在de，dv目录中查找文件并保存到filelist.f中</span><br><span class="hljs-section">filelist:</span><br>find ../de ../dv -name <span class="hljs-string">&quot;*.v&quot;</span> -o -name <span class="hljs-string">&quot;*.sv&quot;</span> &gt; filelist.f<br><span class="hljs-comment">#---------------------------------------------------------------</span><br><span class="hljs-section">com_vpd:</span><br>vcs -f filelist.f \<br>-timescale=1ns/1ps \<br>-full64 +v2k -sverilog -Mupdate +<span class="hljs-keyword">define</span>+DUMP_VPD \<br>-debug_all \<br>|tee vcs.log<br><span class="hljs-comment">#---------------------------------------------------------------</span><br><span class="hljs-section">com_fsdb:</span><br>vcs -f filelist.f \<br>-timescale=1ns/1ps \<br>-full64 +v2k -sverilog -Mupdate +<span class="hljs-keyword">define</span>+FSDB \<br>-debug_acc+all -debug_region+cell+encrypt \<br>|tee vcs.log<br><span class="hljs-comment">#---------------------------------------------------------------</span><br><span class="hljs-section">sim:</span><br>./simv |tee sim.log<br><span class="hljs-comment">#---------------------------------------------------------------</span><br><span class="hljs-section">dve:</span><br>dve -vpd vcdplus.vpd -script dve.tcl &amp;<br><span class="hljs-comment">#---------------------------------------------------------------</span><br><span class="hljs-section">verdi:</span><br>verdi -sverilog -f filelist.f -ssf tb.fsdb -play verdi.tcl &amp;<br><span class="hljs-comment">#---------------------------------------------------------------</span><br><span class="hljs-section">clean:</span><br>rm -rf csrc DVEfiles novas* *.log simv* *fsdb* ucli.key *.vpd verdiLog<br></code></pre></td></tr></table></figure><h3 id="Verdi-tcl"><a href="#Verdi-tcl" class="headerlink" title="Verdi.tcl"></a>Verdi.tcl</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">wvAddSignal -group &#123;top_tb&#125;<br>wvAddSignal -scope top_tb<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/xianyuIC/p/17473754.html">VCS+DVE+Verdi+Makefile使用 - 咸鱼IC - 博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>IC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态时序分析基础</title>
    <link href="/2024/11/11/%E6%95%B0%E5%AD%97IC_%E9%9D%99%E6%80%81%E6%97%B6%E5%BA%8F%E5%88%86%E6%9E%90/"/>
    <url>/2024/11/11/%E6%95%B0%E5%AD%97IC_%E9%9D%99%E6%80%81%E6%97%B6%E5%BA%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>静态时序分析基础</p><span id="more"></span><h1 id="静态时序分析"><a href="#静态时序分析" class="headerlink" title="静态时序分析"></a>静态时序分析</h1><p>静态时序分析是一种重要的逻辑验证方法，设计者通过静态时序分析结果来修改和优化逻辑，直到满足要求为止。在电路设计的各个阶段都需要进行静态时序分析。</p><p><img src="/img/article_img/STA/STA%E5%9B%BE.png"></p><p>静态时序分析可以不通过动态仿真就确定电路是否满足时间的约束。静态时序分析主要包括3个主要步骤。</p><p>1）把设计分解成时间路径的集合；</p><p>2）计算每一条路径的延迟；</p><p>3）所有的路径延迟都要做检查，把它与时间的约束比较，看它们是否满足约束的要求。</p><p>在进行综合时，DC用内建的静态时序分析工具Design Time来估算路径的延迟以指导优化，并用Design Time来产生时序报告。</p><p>静态时序工具一般将时序路径分为4种。</p><p><img src="/img/article_img/STA/%E6%97%B6%E5%BA%8F%E8%B7%AF%E5%BE%84%E5%88%86%E7%B1%BB.png"></p><h2 id="建立时间、保持时间、亚稳态"><a href="#建立时间、保持时间、亚稳态" class="headerlink" title="建立时间、保持时间、亚稳态"></a>建立时间、保持时间、亚稳态</h2><p>建立时间和保持时间都是针对触发器的。</p><p><img src="/img/article_img/STA/setuphold.png"></p><p><strong>建立时间</strong>：指输入信号在时钟沿到来之前必须稳定保持的最短时间。</p><p>换句话说，在时钟信号的上升沿（或下降沿）到来之前，输入信号（通常是数据）必须在触发器的输入端保持稳定，以确保数据能被正确采样。</p><p><strong>保持时间</strong>：指输入信号在时钟沿到来之后必须继续保持稳定的最短时间。</p><p>换句话说，在时钟信号的上升沿（或下降沿）到来之后，输入信号（通常是数据）不能立即变化，而需要在触发器的输入端继续保持稳定一段时间，以确保数据能被正确锁存。</p><p><strong>亚稳态</strong>：每个触发器都有规定的建立时间和保持时间参数，这些参数存放在由制造厂商提供的工艺库文件中。假如触发器由时钟的上升沿触发，在这个时间参数范围内，输入的数据信号是不允许发生变化的。否则在信号建立或保持时间中对其采样，得到的结果是不可预知的，有可能是“0” “1” “Z” 或 “X”，这就是<strong>亚稳态</strong>。在数字前段综合中，一般只考虑建立时间(Setup Time)。保持时间(Hold Time)在后端设计中考虑。</p><p><strong>裕量</strong>：当计算结果为正值时，表示设计有足够的裕量满足时序要求。当计算结果为负值时，表示设计没有足够的裕量，这通常会导致时序违例（Violation）。</p><p><strong>Skew</strong>：时钟传播延迟造成的相位差，指同一个时钟信号到达不同寄存器（触发器、锁存器）时，其到达时间的差异。</p><p>这种偏斜是由时钟树中的互连线延迟和时钟缓冲器的不匹配导致的。</p><p><strong>Jitter</strong>：时钟抖动，时钟的上升沿或下降沿并未在规定时间内变化，而是随机的提前或滞后。</p><p>Jitter 通常是由电源噪声、温度波动、工艺变化等因素引起的，表现为时钟沿在不同周期内的到达时间不稳定。</p><h2 id="单周期时序路径的检查"><a href="#单周期时序路径的检查" class="headerlink" title="单周期时序路径的检查"></a>单周期时序路径的检查</h2><h3 id="建立时间"><a href="#建立时间" class="headerlink" title="建立时间"></a>建立时间</h3><p>路径分为发射路径和捕获路径</p><p>检查数据捕获路径的边沿比发射路径的边沿要晚一个时钟周期。</p><h4 id="触发器到触发器"><a href="#触发器到触发器" class="headerlink" title="触发器到触发器"></a>触发器到触发器</h4><p><img src="/img/article_img/STA/DFFtoDFF.png"></p><p><img src="/img/article_img/STA/DFFtoDFF%E6%B3%A2%E5%BD%A2%E5%9B%BE.png"></p><p>$$<br>T_{latch}+T_{ck2q}+T{dp} &lt; T{capture}+T_{cycle}-T{setup}<br>$$<br><img src="/img/article_img/STA/DFFtoDFF%E6%8A%A5%E5%91%8A.png"></p><h4 id="输入到触发器"><a href="#输入到触发器" class="headerlink" title="输入到触发器"></a>输入到触发器</h4><p><img src="/img/article_img/STA/IntoDFF.png"></p><p>使用输入端口的延时，来模拟前级触发器ck2q的时间和组合电路的延时</p><p>$$<br>T_{latch}+T_{ck2q}+T{dp} &lt; T{capture}+T_{cycle}-T{setup}<br>$$</p><p><img src="/img/article_img/STA/IntoDFF%E6%8A%A5%E5%91%8A.png"></p><h4 id="触发器到输出"><a href="#触发器到输出" class="headerlink" title="触发器到输出"></a>触发器到输出</h4><p><img src="/img/article_img/STA/DFFtoOut.png"></p><p>使用输入端口的延时，来模拟前级触发器ck2q的时间和组合电路的延时</p><p>$$<br>T_{latch}+T_{ck2q}+T{dp} &lt; T{capture}+T_{cycle}-T{setup}<br>$$</p><p><img src="/img/article_img/STA/DFFtoOut%E6%8A%A5%E5%91%8A.png"></p><h4 id="输入到输出"><a href="#输入到输出" class="headerlink" title="输入到输出"></a>输入到输出</h4><p><img src="/img/article_img/STA/IntoOut.png"></p><p>使用输出端口的延时，来模拟后级触发器组合电路的延时和建立时间</p><p>$$<br>T_{latch}+T_{ck2q}+T{dp} &lt; T{capture}+T_{cycle}-T{setup}<br>$$</p><p><img src="/img/article_img/STA/IntoOut%E6%8A%A5%E5%91%8A.png"></p><h3 id="保持时间"><a href="#保持时间" class="headerlink" title="保持时间"></a>保持时间</h3><p>与建立时间不同的是，保持时间的检查，捕获路径与发射路径使用相同的时钟边沿。</p><h4 id="触发器到触发器-1"><a href="#触发器到触发器-1" class="headerlink" title="触发器到触发器"></a>触发器到触发器</h4><p><img src="/img/article_img/STA/%E4%BF%9D%E6%8C%81%E6%97%B6%E9%97%B4%E6%B3%A2%E5%BD%A2.png"></p><p>$$<br>T_{latch}+T_{ck2q}+T{dp} &gt; T{capture}+T{hold}<br>$$<br><img src="/img/article_img/STA/%E4%BF%9D%E6%8C%81%E6%97%B6%E9%97%B4%E6%8A%A5%E5%91%8A.png"></p><p>其余路径与建立时间类似。</p><h2 id="快慢时钟交互检查建立时间和保持时间"><a href="#快慢时钟交互检查建立时间和保持时间" class="headerlink" title="快慢时钟交互检查建立时间和保持时间"></a>快慢时钟交互检查建立时间和保持时间</h2><h4 id="慢时钟到快时钟"><a href="#慢时钟到快时钟" class="headerlink" title="慢时钟到快时钟"></a>慢时钟到快时钟</h4><p>最严苛的建立时间的检查路径为数据从慢时钟的0时刻发射，在快时钟的第一个时钟周期检查。</p><p><img src="/img/article_img/STA/SlowtoFast%E6%B3%A2%E5%BD%A2%E5%9B%BE.png"></p><p>实际的电路里，慢时钟域中组合逻辑的延迟较大。因此，可以指定建立时间的检查边沿。</p><p>下面命令指定建立时间的检查在快时钟的第4个时钟周期。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">set_multicycle_path <span class="hljs-number">4</span> -setup from [get_clocks CLKM] -to [get_clocks CLKP] -end<br></code></pre></td></tr></table></figure><p>此时保持时间检查的点在建立时间检查点的前一个时钟周期。</p><p>下面命令指定保持时间的检查在默认的基础上向前移动三个时钟周期，这样更加贴合实际情况。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">set_multicycle_path <span class="hljs-number">3</span> -setup from [get_clocks CLKM] -to [get_clocks CLKP] -end<br></code></pre></td></tr></table></figure><p><img src="/img/article_img/STA/SlowtoFastSetup%E6%8A%A5%E5%91%8A.png"></p><p><img src="/img/article_img/STA/SlowtoFastHold%E6%8A%A5%E5%91%8A.png"></p><h4 id="快时钟到慢时钟"><a href="#快时钟到慢时钟" class="headerlink" title="快时钟到慢时钟"></a>快时钟到慢时钟</h4><p>最严苛的建立时间的检查路径为数据从快时钟的第4个时钟周期发射，在慢时钟检查。</p><p>而最严苛的保持时间检查路径为数据从0时刻发射，在相同的边沿检查。</p><p><img src="/img/article_img/STA/FasttoSlow.png"></p><p>下面命令指定建立时间的检查，将发射路径开始的时间点设置为默认的前一个周期。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">set_multicycle_path <span class="hljs-number">2</span> -setup from [get_clocks CLKP] -to [get_clocks CLKM] -start<br></code></pre></td></tr></table></figure><p>下面命令指定保持时间的检查，将发射路径开始的时间点仍为默认。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">set_multicycle_path <span class="hljs-number">1</span> -hold from [get_clocks CLKP] -to [get_clocks CLKM] -start<br></code></pre></td></tr></table></figure><p><img src="/img/article_img/STA/FasttoSlowSetup%E6%8A%A5%E5%91%8A.png"></p><p><img src="/img/article_img/STA/FasttoSlowHold%E6%8A%A5%E5%91%8A.png"></p><h2 id="多时钟交互路径检查建立时间和保持时间"><a href="#多时钟交互路径检查建立时间和保持时间" class="headerlink" title="多时钟交互路径检查建立时间和保持时间"></a>多时钟交互路径检查建立时间和保持时间</h2><h3 id="整数关系"><a href="#整数关系" class="headerlink" title="整数关系"></a>整数关系</h3><p>当时钟周期之间的倍数是整数关系，多时钟之间的时序检查与上述快慢时间交互检查类似。</p><h3 id="非整数关系"><a href="#非整数关系" class="headerlink" title="非整数关系"></a>非整数关系</h3><p>当时钟周期之间的倍数不是整数关系，首先求时钟周期的最小公倍数。</p><p><img src="/img/article_img/STA/%E9%9D%9E%E6%95%B4%E6%95%B0.png"></p><p>以上图为例，将所有时钟从0时刻开始翻转，</p><p>如果数据发射时钟为CLKP，捕获时钟为CLKM，则从15时刻发射，16时刻接收，对于建立时间的检查最严格。</p><p>如果数据发射时钟为CLKM，捕获时钟为CLKP，则从24时刻发射，25时刻接收，对于建立时间的检查最严格。</p><p>保持时间则都从0时刻开始。</p><h3 id="Phase-Shifted"><a href="#Phase-Shifted" class="headerlink" title="Phase Shifted"></a>Phase Shifted</h3><p>当捕获时钟与发射时钟有相位差时</p><p><img src="/img/article_img/STA/%E7%9B%B8%E4%BD%8D%E5%B7%AE.png"></p><p>以上图为例，数据捕获路径比发射路径晚90°</p><p>建立时间检查，数据从0时刻发射，0.5时刻接收</p><p>保持时间检查，数据从2时刻发射，0.5时刻接收</p><h3 id="Half-Cycle-Path"><a href="#Half-Cycle-Path" class="headerlink" title="Half Cycle Path"></a>Half Cycle Path</h3><p> 半周期路径（路径中同时存在正边沿触发和负边沿触发的触发器）</p><p><img src="/img/article_img/STA/%E5%8D%8A%E5%91%A8%E6%9C%9F.png"></p><p>以上图为例，数据发射触发器为上升沿触发，接收为下降沿触发</p><p>建立时间检查，数据从6时刻发射，12时刻接收</p><p>保持时间检查，数据从6时刻发射，0时刻接收</p><h3 id="False-Path"><a href="#False-Path" class="headerlink" title="False Path"></a>False Path</h3><p>虚假路径</p><p>在实际电路中有些时序路径是不存在的，则可以将这个路径设置为虚假路径，降低静态时序分析的时间，减少不必要的错误。</p><p>例如：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">set_false_path -from [get_clocks CLK] to [get_clocks CORE_CLK]<br>set_false_path -through [get_pins xx]<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.icourse163.org/learn/SWJTU-1207492806?tid=1470116659#/learn/content?type=detail&id=1253638068&cid=1284287450&replay=true">芯动力——硬件加速设计方法_中国大学MOOC(慕课)</a></p><p><a href="https://space.bilibili.com/382647602">讲芯片的邸老师的个人空间-讲芯片的邸老师个人主页-哔哩哔哩视频</a></p>]]></content>
    
    
    <categories>
      
      <category>IC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IC DC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC综合环境的搭建</title>
    <link href="/2024/09/24/%E6%95%B0%E5%AD%97IC_DC%E7%BB%BC%E5%90%88/"/>
    <url>/2024/09/24/%E6%95%B0%E5%AD%97IC_DC%E7%BB%BC%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>简单介绍DC的综合环境的搭建</p><span id="more"></span><h1 id="DC"><a href="#DC" class="headerlink" title="DC"></a>DC</h1><p>DC流程图</p><p><img src="/img/article_img/DC/DC.png"></p><p><strong>综合过程</strong></p><ol><li>将RTL映射为通用单元，例如将&amp;映射为与门。与Foundary、工艺有关。GTECH库 (synopsys)</li><li>将通用单元映射为标准单元库中的元器件。与Foundary、工艺有关。</li></ol><p>从EDA工作机理分为三步，analyze、elaborate、compile，其中analyze和elaborate对应于步骤1，compile对应于步骤2。</p><p>转译，优化，映射</p><p><strong>DC的设计对象</strong></p><p><img src="/img/article_img/DC/DC%E8%AE%BE%E8%AE%A1%E5%AF%B9%E8%B1%A1.png"></p><h2 id="综合环境建立"><a href="#综合环境建立" class="headerlink" title="综合环境建立"></a>综合环境建立</h2><p>建立工作目录syn</p><p>在工作目录下，建立以下文件夹</p><p><img src="/img/article_img/DC/%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95.png"></p><h2 id="综合脚本"><a href="#综合脚本" class="headerlink" title="综合脚本"></a>综合脚本</h2><p>命令<strong>set_app_var</strong>用于声明不同的<strong>内部变量</strong>。</p><p><strong>search_path</strong>：用于提供工具寻找文件的路径。</p><p>除了RTL之外，其他器件如SRAM、ROM、元器件库等都使用db文件保存，它是一种二进制文件。</p><p>元器件库包括标准单元库和引脚单元库，芯片设计中它们的电平标准可能存在差别。</p><p><strong>synthetic_library</strong>：装载模型库，即综合过程步骤1中的库，一般使用DC工具提供的DesignWare模型。</p><p><strong>target_library</strong>：用于指定元器件库，即综合过程步骤2中的库。</p><p><strong>link_library</strong>：用于将物理相关的路径进行汇总，其中*表示该变量内部原来的默认值。</p><h3 id="common-setup-tcl"><a href="#common-setup-tcl" class="headerlink" title="common_setup.tcl"></a>common_setup.tcl</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-comment"># common_setup.tcl</span><br><span class="hljs-comment"># 定义搜索路径，将DC工具需要使用的路径全部包含</span><br><span class="hljs-keyword">set</span> ADDITIONAL_SEARCH_PATH \<br><span class="hljs-string">&quot;/home/lw23/workspace/CT/TOP/syn./unmapped./rtl./scripts./ref./mapped&quot;</span>;<br><span class="hljs-comment"># 定义目标库，包括标准单元库和IO单元库</span><br><span class="hljs-keyword">set</span> TARGET_LIBRARY_FILES \<br><span class="hljs-string">&quot;/home/lw23/workspace/CT/TOP/syn/ref/tcb018g3d3tc.db</span><br><span class="hljs-string">/home/lw23/workspace/CT/TOP/syn/ref/tpa018nvtc.db&quot;</span>;<br><span class="hljs-comment"># 定义图形化符号库</span><br><span class="hljs-comment">#set SYMBOL_LIBRARY_FILES \</span><br><span class="hljs-comment">#&quot;/home/lw23/workspace/CT/TOP/syn/ref/smic13g.sdb&quot;;</span><br><br></code></pre></td></tr></table></figure><h3 id="dc-setup-tcl"><a href="#dc-setup-tcl" class="headerlink" title="dc_setup.tcl"></a>dc_setup.tcl</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-comment"># dc_setup.tcl</span><br>set_app_var search_path <span class="hljs-string">&quot;$search_path $ADDITIONAL_SEARCH_PATH&quot;</span><br>set_app_var target_library <span class="hljs-variable">$TARGET_LIBRARY_FILES</span><br>set_app_var link_library <span class="hljs-string">&quot;* $target_library&quot;</span><br><span class="hljs-comment"># set_app_var symbol_library $SYMBOL_LIBRARY_FILES</span><br></code></pre></td></tr></table></figure><h3 id="synopsys-dc-setup"><a href="#synopsys-dc-setup" class="headerlink" title=".synopsys_dc.setup"></a>.synopsys_dc.setup</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-comment"># .synopsys_dc.setup</span><br><span class="hljs-comment"># 在工作目录下启动DC时，会自动运行本脚本来初始化工作环境</span><br><span class="hljs-keyword">source</span> common_setup.tcl<br><span class="hljs-keyword">source</span> dc_setup.tcl<br></code></pre></td></tr></table></figure><h3 id="dc-scripts-tcl"><a href="#dc-scripts-tcl" class="headerlink" title="dc_scripts.tcl"></a>dc_scripts.tcl</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-comment"># dc_scripts.tcl</span><br><br><span class="hljs-comment"># 启动命令</span><br><span class="hljs-comment"># dc_shell -64</span><br><span class="hljs-comment"># source ./scripts/dc_scripts.tcl</span><br><br><br><br><span class="hljs-comment">#------------------------------------------------------读取文件-----------------------------------------------------</span><br><span class="hljs-comment"># 设置综合时存储临时文件的地址（与DesignWare相关），读路径</span><br>set_app_var cache_read ./temp_rd<br><span class="hljs-comment"># 写路径，可以建立一个目录存放</span><br>set_app_var cache_write ./temp_wr<br><span class="hljs-comment"># 指定路径将综合中elaborate步骤产生的临时二进制文件存放</span><br>define_design_lib work -path ./temp_wr <br><br><span class="hljs-comment"># 将所有RTL文件名放入一个自命名的变量中,rtl_file任意取</span><br><span class="hljs-keyword">set</span> rtl_files <span class="hljs-string">&quot;./rtl/control.v  ./rtl/counter.v  ./rtl/mux.v  ./rtl/single_pixel.v  ./rtl/spi_slave_ref.v  ./rtl/top.v&quot;</span>  <br><span class="hljs-comment"># 读入RTL代码并进行分析，使用标准Verilog语法</span><br>analyze -<span class="hljs-keyword">format</span> verilog <span class="hljs-variable">$rtl_files</span> <br><span class="hljs-comment"># 此处design_top应为RTL设计中顶层模块名</span><br>elaborate top<br><br><span class="hljs-comment"># read_file命令是analyze与elaborate的结合</span><br><span class="hljs-comment"># read_file -format verilog $rtl_files </span><br><br><span class="hljs-comment"># 指定顶层模块,否则会默认把最后一个读入的module设为top</span><br>current_design top <br><span class="hljs-comment"># 使用link命令将读取到 DC 存储区的模块或者实例连接起来。</span><br>link<br><span class="hljs-comment"># 唯一化，为每一个例化的子模块都生成独立的逻辑实体</span><br>uniquify<br><br><span class="hljs-comment">#------------------------------------------------------------------------------------------------------------------</span><br><br><br><br><span class="hljs-comment">#-----------------------------------------------------定义变量------------------------------------------------------</span><br><span class="hljs-keyword">set</span> all_inputs [<span class="hljs-keyword">list</span> clk rst Frame SCLK SPICS MOSI pulse_in_pixel0 pulse_in_pixel1 pulse_in_pixel2 pulse_in_pixel3 pulse_in_pixel4 pulse_in_pixel5 pulse_in_pixel6 pulse_in_pixel7 pulse_in_pixel8]<br><span class="hljs-keyword">set</span> all_outputs [<span class="hljs-keyword">list</span> MISO slave_Byte_vld overflow_almost overflow]<br><br><span class="hljs-keyword">set</span> LIB_NAME tcb018g3d3tc<br><span class="hljs-keyword">set</span> WIRE_MODEL TSMC512K_Conservative<br><br><span class="hljs-keyword">set</span> PERIOD <span class="hljs-number">10</span><br><span class="hljs-comment">#------------------------------------------------------------------------------------------------------------------</span><br><br><br><br><span class="hljs-comment">#----------------------------------------------------DRC约束-------------------------------------------------------</span><br><span class="hljs-comment"># DRC约束的优先级最高</span><br><span class="hljs-comment"># 设定所有设计的最大翻转时间，通常用于单元的输入引脚</span><br><span class="hljs-comment"># set_max_transition 1.0 [all_designs]</span><br><span class="hljs-comment"># set MAX_TRANS [get_attribute  $$LIB_NAME/INVD1/I  max_transition]</span><br><span class="hljs-comment"># set_max_transition [expr $MAX_TRANS / 2.0] [all_designs]</span><br><span class="hljs-comment"># 设定最大扇出负载</span><br>set_max_fanout <span class="hljs-number">8</span> [get_designs top]<br><span class="hljs-comment"># 设定最大负载电容，通常用于单元的输出引脚</span><br><span class="hljs-comment"># set_max_capacitance [expr [load_of $LIB_NAME/INVD1/ZN] * 10] [all_outptus]</span><br><span class="hljs-comment">#------------------------------------------------------------------------------------------------------------------</span><br><br><br><br><span class="hljs-comment"># --------------------------------------------------环境约束--------------------------------------------------------</span><br><span class="hljs-comment"># 设定工作条件为最坏情况，延迟最大，用于建立时间检查</span><br>set_operating_conditions -max NCCOM -max_library <span class="hljs-variable">$LIB_NAME</span><br><br><span class="hljs-comment"># set current_design top</span><br><span class="hljs-comment"># 设定线负载，互连线延迟，同一模块内部连线</span><br>set_wire_load_model -name <span class="hljs-variable">$WIRE_MODEL</span> -library <span class="hljs-variable">$LIB_NAME</span><br><span class="hljs-comment"># set auto_wire_load_selection true</span><br><span class="hljs-comment"># 设定线负载工作方式，不同模块之间的连线 围绕(enclosed)  顶层(top) 分段(segmented)</span><br>set_wire_load_mode top<br><br><br><span class="hljs-comment"># 设置所有输出端口的容性负载为 3pf 固定值</span><br><span class="hljs-comment"># set_load 3 [all_outptus] </span><br><span class="hljs-comment"># 使用工艺库中现有单元的load值作为输出的负载大小</span><br>set_load [<span class="hljs-keyword">expr</span> [load_of <span class="hljs-variable">$LIB_NAME</span>/INVD1/ZN] * <span class="hljs-number">10</span>] [all_outputs]<br>  <br><span class="hljs-comment"># 时钟和复位端口的驱动强度设为无穷大</span><br>set_drive <span class="hljs-number">0</span> [<span class="hljs-keyword">list</span> clk rst] <br><span class="hljs-comment"># 用LIB_NAME库中单元 INVD1 的驱动强度表示所有输入端口的驱动强度，除去时钟和复位信号</span><br>set_driving_cell -library <span class="hljs-variable">$LIB_NAME</span> -lib_cell INVD1 [remove_from_collection [all_inputs] [<span class="hljs-keyword">list</span> clk rst]]<br><br><span class="hljs-comment"># -----------------------------------------------------------------------------------------------------------------</span><br><br><br><br><span class="hljs-comment">#-----------------------------------------------------时序约束------------------------------------------------------</span><br><br><span class="hljs-comment"># 声明一个从外部来的时钟，周期为PERIOD</span><br>create_clock -name clk -period <span class="hljs-variable">$PERIOD</span> -add [get_ports &#123;clk&#125;] <br><span class="hljs-comment"># 设定一个虚拟时钟，不需要指明具体的端口</span><br><span class="hljs-comment"># creat_clock -name clk -period 200 -waveform &#123;0 100&#125; </span><br><span class="hljs-comment"># 声明内部时钟，新产生的freeclk的源头时钟是clk, 在RTL中的端口名为clk，新时钟为源时钟3分频，占空比为1/3。</span><br><span class="hljs-comment"># creat_generated_clock -name freeclk -master_clock clk -source [get_ports &#123;clk&#125;] -add -edges &#123;1 3 7&#125; [get_pins&#123;u_clkCtrl/bai_freeclk_buf/Z&#125; ]</span><br><br><br><span class="hljs-comment"># 设置时钟不确定性，建立时间</span><br>set_clock_uncertainty -setup [<span class="hljs-keyword">expr</span> <span class="hljs-variable">$PERIOD</span> * <span class="hljs-number">0.1</span>] [get_clocks clk] <br><span class="hljs-comment"># 设置时钟不确定性，保持时间</span><br>set_clock_uncertainty -hold <span class="hljs-number">0.1</span> [get_clocks clk]<br><br><span class="hljs-comment"># 约束时钟传输时延，源延迟</span><br><span class="hljs-comment"># set_clock_latency -source 2 [get_clocks clk] </span><br><span class="hljs-comment"># 约束时钟传输时延，线路延迟</span><br><span class="hljs-comment"># set_clock_latency 1 [get_clocks clk] </span><br><span class="hljs-comment"># 为时钟信号指定一个固定的翻转时间（时钟的负载很大，时钟的翻转时间往往也很大）</span><br>set_clock_transition <span class="hljs-number">0.2</span> [get_clocks clk]<br><br><span class="hljs-comment"># 在综合时不对时钟网络进行处理</span><br><span class="hljs-comment"># 阻止综合器在线路上插入元器件（例如Buffer）</span><br>set_dont_touch_network [get_clocks clk]<br>set_ideal_network [get_ports clk]<br><br>set_dont_touch_network [get_ports rst]<br>set_ideal_network [get_ports rst]<br><br><span class="hljs-comment"># 设定某一段路径避免时序检查，伪路径</span><br><span class="hljs-comment"># set_false_path -from u_pwm/pwm_out* -to [get ports &#123;GPIO*&#125;] </span><br><br><br><span class="hljs-comment"># 约束片外延迟大小，最大值（检查建立时间），一般不限定最小值，</span><br>set_input_delay -max <span class="hljs-number">6</span> -<span class="hljs-keyword">clock</span> clk [remove_from_collection [all_inputs] [<span class="hljs-keyword">list</span> clk rst]]<br>set_output_delay -max <span class="hljs-number">6</span> -<span class="hljs-keyword">clock</span> clk [all_outputs]<br><br><br><span class="hljs-comment"># 报告没有进行约束的路径列表</span><br>check_timing -include data_check_no_clock<br><span class="hljs-comment">#------------------------------------------------------------------------------------------------------------------</span><br><br><br><br><span class="hljs-comment"># --------------------------------------------------面积约束--------------------------------------------------------</span><br><span class="hljs-comment"># 在满足时序的条件下，尽可能减小面积</span><br>set_max_area <span class="hljs-number">0</span> <br><span class="hljs-comment"># -----------------------------------------------------------------------------------------------------------------</span><br><br><br><br><span class="hljs-comment"># --------------------------------------------------编译 输出 报告--------------------------------------------------</span><br><span class="hljs-comment"># 检查设计中是否有悬空脚或者输出短接的情况</span><br>check_design<br><br><span class="hljs-comment"># 编译，此命令还有其他选项</span><br>compile_ultra -no_autoungroup<br><span class="hljs-comment"># 在综合过程中自动识别并加入门控时钟</span><br><span class="hljs-comment"># compile_ultra -gate_clock</span><br><br><span class="hljs-comment"># 输出网表文件，-hierachy表示保留设计的层次结构</span><br>write -hierarchy -<span class="hljs-keyword">format</span> verilog -output ./mapped/design.v <br><span class="hljs-comment"># 保存本次综合的信息以便下次使用，可以使用read_ddc读取</span><br>write -hierarchy -<span class="hljs-keyword">format</span> ddc -output ./mapped/dedign.ddc <br>write_sdc ./mapped/design.sdc   <br><span class="hljs-comment"># 反标文件，标注了使用的标准单元的延时值，后仿真使用</span><br>write_sdf ./mapped/design.sdf<br><br><span class="hljs-comment"># 时序报告</span><br>report_timing  &gt; ./rpt/timing.rpt<br><span class="hljs-comment"># 输出面积报告</span><br>report_area  &gt; ./rpt/area.rpt<br><span class="hljs-comment"># 功率报告</span><br>report_power &gt; ./rpt/power.rpt<br><span class="hljs-comment"># 违例报告，逻辑综合过程中没有达到的约束</span><br>report_constraint -all_violators &gt; ./rpt/constraint.rpt <br><span class="hljs-comment"># 将综合结果汇总为一个质量报告输出</span><br>report_qor -nosplit &gt; ./rpt/qor.rpt <br><br><span class="hljs-comment"># -----------------------------------------------------------------------------------------------------------------</span><br><br></code></pre></td></tr></table></figure><p>将上述脚本保存为一个文本文件，dc_scripts.tcl，运行以下命令进行综合，其中| tee dc.log表示将综合信息打印到dc.log文件中。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">dc_shell <span class="hljs-number">-64</span> -f scripts/dc_scripts.tcl | tee scripts/dc.log<br></code></pre></td></tr></table></figure><h2 id="工艺库介绍"><a href="#工艺库介绍" class="headerlink" title="工艺库介绍"></a>工艺库介绍</h2><p>以台积电180nm工艺库为例，标准单元库 “tcb018g3d3tc.lib” or “tcb018g3d3tc.lib”</p><p>标准单元库主要包括以下信息：</p><ol><li>工作环境 (operating conditions) : 制程（process）(电压和温度的比例因数k，表示不同的环境之间，各参数缩放的比例)</li><li>单元 (cell) : 功能、时间（包括时序器件的约束，如建立时间和保持时间，上升延时，转换时间）、面积、功耗、测试等。</li><li>连线负载模型 (wire load models) : 电阻、电容、面积。</li><li>设计规则约束 (DRC) : 最大最小电容、最大最小转换时间、最大最小扇出。</li></ol><p>线载模型</p><p><img src="/img/article_img/DC/wire0.png"></p><p><img src="/img/article_img/DC/wire1.png"></p><p>反相器</p><p><img src="/img/article_img/DC/INV0.png"></p><p><img src="/img/article_img/DC/INV1.png"></p><p>触发器</p><p><img src="/img/article_img/DC/DFF_CP.png"></p><p><img src="/img/article_img/DC/DFF_D.png"></p><p><img src="/img/article_img/DC/DFF_Q.png"></p><p>上升（下降）时间，上升（下降）转换时间的区别 </p><p>输入端的上升（下降）转换会导致输出端的下降（上升）转换，转换时间。</p><p><img src="/img/article_img/DC/transition.png"></p><p>非线性延时模型，使用<strong>查找表</strong>的方式定义</p><p>转换时间与延迟时间由输入的转换时间 (transition) 和输出的负载电容 (capacitance) 决定</p><p>触发器的建立时间和保持时间由输入的转换时间 (transition) 和时钟转换时间 (transition) 决定</p><p>短路功耗由输入的转换时间 (transition) 和输出的负载电容 (capacitance) 决定</p><h2 id="约束解释"><a href="#约束解释" class="headerlink" title="约束解释"></a>约束解释</h2><h3 id="DRC约束"><a href="#DRC约束" class="headerlink" title="DRC约束"></a>DRC约束</h3><p>默认已有约束，可以不设置，但可以约束得更紧些。</p><h3 id="环境约束"><a href="#环境约束" class="headerlink" title="环境约束"></a>环境约束</h3><p><img src="/img/article_img/DC/%E7%8E%AF%E5%A2%83%E7%BA%A6%E6%9D%9F.png"></p><p><strong>工作条件</strong> ：由所使用的工艺库决定，用于描述制造工艺、工作电压与温度这些周围环境对延时的影响。</p><p><strong>线载模型</strong> ：决定单元之间连线的延迟</p><p><strong>线载工作方式</strong> ：决定模块之间连线的延迟</p><p><img src="/img/article_img/DC/%E8%BF%9E%E7%BA%BF%E6%A8%A1%E5%BC%8F.png"></p><p>围绕 (enclosed) ：使用围绕模块的上层模块中的连线模型代替模块之间的连线模型</p><p>顶层(top) ：使用顶层模块的连线模型代替模块之间的连线模型</p><p>分段(segmented) ：使用穿过三段的模型相加得到</p><p><strong>输入驱动</strong> ：在进行时序分析时，通常将输入端口前级想象为一个触发器，输入的前级转换时间 (transition) 决定后级单元引脚的转换时间 (transition) 。因此，此处设置的驱动单元是为了计算后级的转换时间 (transition) 。</p><p><strong>输出负载</strong> ：在进行时序分析时，通常将输出端口后级想象为一个触发器，输出的负载电容 (capacitance) 决定前级单元引脚的转换时间  (transition) 。因此，此处设置的负载单元是为了计算前级的转换时间 (transition) 。</p><h3 id="时序约束"><a href="#时序约束" class="headerlink" title="时序约束"></a>时序约束</h3><p><strong>时钟不确定性 (uncertainty)</strong> ：建立时间不确定性时间，指时钟沿早到多少时间。建立时间不确定性时间，指时钟沿晚到多少时间。</p><p><img src="/img/article_img/DC/%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7.png"></p><p><strong>时钟源延迟</strong>是从时钟源到时钟定义位置的延迟，<strong>路径延迟</strong>是时钟定义位置到触发器时钟输入端的延迟，在综合时序分析时没有意义，因为数据发射路径和捕获路径的延迟在综合阶段是相同的。</p><p><strong>输入延时 (input_delay)</strong> ：在进行时序分析时，通常将输入端口前级想象为一个触发器，这个触发器发射路径中，<u>触发器自身延时和组合逻辑的时间</u>等组成的延迟由此处设置。</p><p><strong>输出延时 (output_delay)</strong> ：在进行时序分析时，通常将输出端口前级想象为一个触发器，这个触发器捕获路径中，<u>组合逻辑的时间和触发器建立时间</u>等组成的延迟由此处设置。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>注：</p><p>自动插入时钟门控，既可以节省功耗，还能减少元器件的使用，从而减少面积。</p><p>插入时钟门控的原理是寻找时序逻辑的if语句，如果只写了else if （vld）, 或者使用else写了保持逻辑，则说明可以直接插入时钟门控。</p><p>下面的时序逻辑，在实际综合时，会将vld直接作为时钟门控开关，直接控制clk，当vld为1时，时钟通入。节省了动态功耗和元器件。</p><p>综合时常常会统计时序逻辑的门控比例，一般要求不低于95%，能插入尽量插入。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!rst)<br>        dout &lt;= <span class="hljs-number">8&#x27;d0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (vld)<br>        dout &lt;= din;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">//(可以省略不写)</span><br>        dout &lt;= dout;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="时序报告"><a href="#时序报告" class="headerlink" title="时序报告"></a>时序报告</h3><p><img src="/img/article_img/DC/%E6%97%B6%E5%BA%8F%E6%8A%A5%E5%91%8A.png"></p><h2 id="其他逻辑综合优化方法"><a href="#其他逻辑综合优化方法" class="headerlink" title="其他逻辑综合优化方法"></a>其他逻辑综合优化方法</h2><p>略</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/Tranquil_ovo/article/details/129904625">【DC】使用DC进行逻辑综合的基本步骤_dc更改current design-CSDN博客</a></p><p><a href="https://www.cnblogs.com/IClearner">IC_learner - 博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>IC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IC DC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习之极大似然估计</title>
    <link href="/2024/03/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1/"/>
    <url>/2024/03/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>简单介绍机器学习中极大似然估计的原理</p><span id="more"></span><h1 id="极大似然估计"><a href="#极大似然估计" class="headerlink" title="极大似然估计"></a>极大似然估计</h1><p>极大似然估计(Maximum Likelihood Estimation,简称MLE)，这是根据数据采样来估计概率分布参数的经典方法。</p><p>估计类条件概率的一种常用策略是先假定其具有某种确定的概率分布形式，再基于训练样本对概率分布的参数进行估计。</p><p>极大似然估计，说的是已知某个随机样本满足某种概率分布，但是其中具体的参数并不知道，参数估计就是通过若干次实验，观察其结果，利用结果推出参数的估计值。极大似然估计的思想就是：已知某个参数使这个样本出现的概率最大，那么就将这个参数作为参数估计的真实值。</p><h2 id="样本集"><a href="#样本集" class="headerlink" title="样本集"></a>样本集</h2><p>假设这些样本是独立同分布的，记为 D，为100次抽样的结果<br>$$<br>D &#x3D; x_1, x_2, x_3,\dots, x_{100}<br>$$</p><h2 id="联合概率"><a href="#联合概率" class="headerlink" title="联合概率"></a>联合概率</h2><p>$  \theta $ 为要估计的参数，参数$ \theta $与样本$D$互相影响</p><p>则联合概率$ P(D | \theta)$称为相对于样本空间$D &#x3D; x_1, x_2, x_3,\dots, x_{100} $关于$\theta $的似然函数<br>$$<br>\begin {split} l(\theta) &amp; &#x3D; P(D | \theta) \ &amp; &#x3D; P (x_1, x_2, x_3,\dots, x_{100}| \theta) \ &amp;&#x3D;  \prod_{i&#x3D;1}^{100} P(x_i| \theta) \end{split}<br>$$</p><h2 id="极大似然函数的估计值"><a href="#极大似然函数的估计值" class="headerlink" title="极大似然函数的估计值"></a>极大似然函数的估计值</h2><p>记$ \hat{\theta} &#x3D; x_1, x_2, x_3,\dots, x_{100}$为极大似然函数的估计值<br>$$<br>\begin {split} \hat{\theta} &amp;&#x3D;  argmax_{\theta}  l(\theta) \&amp; &#x3D; argmax_{\theta} \prod_{i&#x3D;1}^{n} P(x_i|\theta)\end{split}<br>$$</p><h2 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h2><p>求极大似然函数值，就是要求似然函数的导数，导数的极值点就是似然函数的最大值。</p><p>（此处要对似然函数取对数，因为连乘形式求导不方便，取对数之后变为连加形式）<br>$$<br>ln \frac{\partial l(\theta) }{ \partial \theta}  &#x3D; \sum_{i&#x3D;1}^{n} lnP(x_i | \theta)<br>$$<br>此时只需要知道联合概率函数$P$服从什么分布。</p><p>例如，在连续属性情形下，假设概率密度函数服从正态分布，即$ P(x_i|\theta) \sim N(\mu,\sigma^2) $</p><h2 id="求极大似然函数的一般步骤"><a href="#求极大似然函数的一般步骤" class="headerlink" title="求极大似然函数的一般步骤"></a>求极大似然函数的一般步骤</h2><ol><li>写出似然函数</li><li>对似然函数取对数</li><li>求导</li><li>解似然方程</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习，算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDR3基本原理</title>
    <link href="/2023/10/22/DDR3%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <url>/2023/10/22/DDR3%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>简单介绍DDR3的基本原理</p><span id="more"></span><h1 id="DDR3"><a href="#DDR3" class="headerlink" title="DDR3"></a>DDR3</h1><p>第三代双倍数据率同步动态随机存取存储器</p><p>（Double-Data-Rate Three Synchronous Dynamic Random Access Memory，一般称为DDR3 SDRAM）</p><p>DDR3是应用在计算机及电子产品领域的一种高带宽并行数据总线，属于SDRAM类存储器。</p><p>DDR3，在时钟信号的上升沿和下降沿均传输数据，因此相比较SDR可以达到双倍的速率。</p><h2 id="Prefrech技术："><a href="#Prefrech技术：" class="headerlink" title="Prefrech技术："></a>Prefrech技术：</h2><p>Prefetch 简单的说就是在一个<strong>内核时钟周期</strong>同时寻址多个存储单元并将这些数据以并行的方式统一传输到 IO Buffer 中，之后以更高的外传速度将 IO Buffer 中的数据传输出去。</p><p><img src="/img/article_img/DDR3/DDR3_prefrech.png"></p><p>这个寻址的单元个数称为预取数，DDR1 预取数为2，DDR2 预取数为4，DDR3预取数为8。在一个内部时钟周期内，DDR3要完成所有预取数据的向外传输。</p><p>内核时钟为DDR3芯片内部进行逻辑处理的时钟（<strong>核心频率</strong>）</p><p>还有另外一个时钟，是芯片的外部接口时钟，也就是clock管脚上的时钟频率（<strong>工作频率</strong>）</p><p>数据在由buffer传输出去时，以外部时钟参考，在时钟上升沿、下降沿传输数据，因此数据的<strong>传输速率</strong>为工作频率的两倍。</p><p><strong>三者的关系</strong>为：</p><p>传输速率 &#x3D; 工作频率 * 2；</p><p>核心频率 &#x3D; 传输频率 &#x2F; 预取数；</p><h2 id="存储地址"><a href="#存储地址" class="headerlink" title="存储地址"></a>存储地址</h2><p>DDR3内部的存储结构，可以看作是由很多层二维存储阵列组成，称为Bank。</p><p><img src="/img/article_img/DDR3/DDR3_bank.png"></p><p>DDR3内部的Bank可以看做是一个NxN的一个阵列，B代表Bank编号，C代表列地址编号，R代表行地址编号。</p><p>寻址的流程也就是先指定Bank地址，再指定行地址，然后指定列地址最终的确寻址单元。</p><p>如果寻址命令是B1、R2、C6，就能确定地址是图中红格的位置。</p><p>容量计算：Bank数量 * 行数 * 列数</p><p>例如：MT41J128M8 的数据宽度是8位，每个bank有16k的行数，1k的列数，所以寻址空间是16k*1k&#x3D;16M，每个芯片有8个bank，所以单块芯片的容量是8 * (16k1k) *8bit&#x3D;1G bit。</p><h2 id="tRCD"><a href="#tRCD" class="headerlink" title="tRCD"></a>tRCD</h2><p>在实际工作中，逻辑Bank地址与相应的行地址是同时发出的，此时这个命令称之为“行激活”（Row Active）。在此之后，将发送列地址寻址命令与具体的操作命令（是读还是写），这两个命令也是同时发出的，所以一般都会以“读&#x2F;写命令”来表示列寻址。根据相关的标准，从行有效到读&#x2F;写命令发出之间的间隔被定义为tRCD，即RAS to CAS Delay（RAS至CAS延迟，RAS就是行地址选通脉冲，CAS就是列地址选通脉冲）。</p><p>tRCD是DDR的一个重要时序参数，广义的tRCD以核心时钟周期（tCK，Clock Time）数为单位，比如tRCD&#x3D;3，就代表延迟周期为两个时钟周期，具体到确切的时间，则要根据时钟频率而定。</p><p><img src="/img/article_img/DDR3/DDR3_tRCD.png"></p><p>上图是tRCD&#x3D;3的时序图，NOP&#x3D;Not Operation，表示无操作，灰色区域表示Don’t Care。</p><h2 id="CL"><a href="#CL" class="headerlink" title="CL"></a>CL</h2><p>相关的列地址被选中以后，将会触发数据传输，但从存储单元中输出到真正出现在内存芯片的I&#x2F;O接口之间还需要一定的时间(数据触发本身就有延时，而且还需要进行信号放大)，这段时间就是列地址脉冲选通潜伏期(CAS Latency,CL)，CL的数值与tRCD一样，以时钟周期数表示。CL只针对读取操作有效。</p><h2 id="tAC"><a href="#tAC" class="headerlink" title="tAC"></a>tAC</h2><p>由于芯片体积的原因，存储单元中的电容容量很小，所以信号要经过放大来保证其有效的识别性，这个放大&#x2F;驱动工作由Sense Amplifier负责，一个存储体对应一个Sense Amplifier通道。它要有一个准备时间才能保证信号的发送强度（事前还要进行电压比较以进行逻辑电平的判断）。</p><p>从数据I&#x2F;O总线上有数据到数据输出之前的一个时钟上升沿开始，数据即已传向Sense Amplifier，也就是说此时数据已经被触发，经过一定的驱动时间最终传向数据I&#x2F;O总线进行输出，这段时间称为tAC（Access Time from CLK，时钟触发后的访问时间）。</p><p><img src="/img/article_img/DDR3/DDR3_tAC.png"></p><h2 id="突发长度"><a href="#突发长度" class="headerlink" title="突发长度"></a>突发长度</h2><p>突发（Burst）是指在同一行中相邻的存储单元连续进行数据传输的方式，连续传输的周期数就是突发长度（Burst Lengths，简称BL）。在进行突发传输时，只要指定起始列地址与突发长度，内存就会依次地自动对后面相应数量的存储单元进行读&#x2F;写操作而不再需要控制器连续地提供列地址。这样，除了第一组数据的传输需要若干个周期（主要是之前的延迟，一般的是tRCD+CL）外，其后每个数据只需一个周期的即可获得。</p><p>DDR3 的 Burst Length 一般都是 8。</p><p><img src="/img/article_img/DDR3/DDR3_BL.png"></p><h2 id="tRP"><a href="#tRP" class="headerlink" title="tRP"></a>tRP</h2><p>在数据读取完之后，为了腾出读出放大器以供同一Bank内其他行的寻址并传输数据，内存芯片将进行预充电的操作来关闭当前工作行。从开始关闭现有的工作行，到可以打开新的工作行之间的间隔就是tRP（Row Precharge command Period，行预充电有效周期），单位也是时钟周期数。</p><p>假设当前寻址的存储单元是B1、R2、C6。如果接下来的寻址命令是B1、R2、C4，则不用预充电，因为读出放大器正在为这一行服务。但如果地址命令是B1、R4、C4，由于是同一Bank的不同行，那么就必须要先把R2关闭，才能对R4寻址。</p><h2 id="数据选取脉冲（DQS）"><a href="#数据选取脉冲（DQS）" class="headerlink" title="数据选取脉冲（DQS）"></a>数据选取脉冲（DQS）</h2><p>DQS 是DDR中的重要功能，它的功能主要用来在一个时钟周期内准确的区分出每个传输周期，并便于接收方准确接收数据。每一颗芯片都有一个DQS信号线，它是双向的，在写入时它用来传送由北桥发来的DQS信号，读取时，则由芯片生成DQS向北桥发送。可以说，它就是数据的同步信号。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/liujinggang/p/9782796.html">【接口时序】8、DDR3驱动原理与FPGA实现（一、DDR的基本原理） - jgliu - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA IC DDR3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储器概述</title>
    <link href="/2023/10/22/%E5%AD%98%E5%82%A8%E5%99%A8%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/10/22/%E5%AD%98%E5%82%A8%E5%99%A8%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p>存储器概述</p><span id="more"></span><h1 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h1><p><img src="/img/article_img/DDR3/1.png"></p><p><img src="/img/article_img/DDR3/2.png"></p><p>存储器一般来说可以分为内部存储器(内存)，外部存储器(外存)，缓冲存储器(缓存)以及闪存这几个大类。</p><p><strong>内部存储器（内存）</strong>也称为主存储器，位于系统主机板上，可以同CPU直接进行信息交换。其主要特点是：运行速度快，容量小。</p><p><strong>外部存储器（外存）</strong>也称为辅助存储器，不能与CPU之间直接进行信息交换。其主要特点是：存取速度相对内存要慢得多，存储容量大。</p><p>内存与外存本质区别是，一个是内部运行提供缓存和处理的功能，也可以理解为协同处理的通道；而外存主要是针对储存文件、图片、视频、文字等信息的载体，也可以理解为储存空间。</p><p><strong>缓冲存储器（缓存）</strong>（Cache）就是数据交换的缓冲区，当某一硬件要读取数据时，会首先从缓存中查找需要的数据，如果找到了则直接执行，找不到的话则从内存中找。由于缓存的运行速度比内存快得多，故缓存的作用就是帮助硬件更快地运行。</p><p><strong>闪速存储器（闪存）</strong>（Flash Memory）是一种长寿命的非易失性（在断电情况下仍能保持所存储的数据信息）的存储器，数据删除不是以单个的字节为单位而是以固定的区块为单位（注意：NOR Flash 为字节存储。），区块大小一般为256KB到20MB。闪存是电子可擦除只读存储器（EEPROM）的变种，闪存与EEPROM不同的是，EEPROM能在字节水平上进行删除和重写而不是整个芯片擦写，而闪存的大部分芯片需要块擦除。由于其断电时仍能保存数据，闪存通常被用来保存设置信息，如在电脑的BIOS（基本程序）、PDA（个人数字助理）、数码相机中保存资料等。</p><h2 id="随机存储器（RAM）"><a href="#随机存储器（RAM）" class="headerlink" title="随机存储器（RAM）"></a>随机存储器（RAM）</h2><p>RAM(Random Access Memory) 随机存储器。存储单元的内容可按需随意取出或存入，且存取的速度与存储单元的位置无关的存储器。这种存储器在断电时将丢失其存储内容，故主要用于存储短时间使用的程序。 </p><p>随机存储器又分为静态随机存储器（Static RAM,SRAM)和动态随机存储器（Dynamic RAM,DRAM)。静态随机存储器SRAM（Static RAM）不需要刷新电路即能保存它内部存储的数据。</p><h3 id="动态随机存储器SDRAM"><a href="#动态随机存储器SDRAM" class="headerlink" title="动态随机存储器SDRAM"></a>动态随机存储器SDRAM</h3><p>动态随机存储器SDRAM（Synchronous DRAM）即同步动态随机存取存储器。<strong>同步</strong>是指存储器工作需要同步时钟，内部的命令的发送与数据的传输都以它为基准；<strong>动态</strong>是指存储阵列需要不断的刷新来保证数据不丢失；<strong>随机</strong>是指数据不是线性依次存储，而是自由指定地址进行数据读写，DDR，DDR2以及DDR3就属于SDRAM的一类。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/liujinggang/p/9782796.html">【接口时序】8、DDR3驱动原理与FPGA实现（一、DDR的基本原理） - jgliu - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA IC DDR3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自适应滤波器——RLS滤波器</title>
    <link href="/2023/10/09/%E8%87%AA%E9%80%82%E5%BA%94%E6%BB%A4%E6%B3%A2%E5%99%A8%E2%80%94%E2%80%94RLS%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <url>/2023/10/09/%E8%87%AA%E9%80%82%E5%BA%94%E6%BB%A4%E6%B3%A2%E5%99%A8%E2%80%94%E2%80%94RLS%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>简单介绍RLS滤波器的原理</p><span id="more"></span><h1 id="RLS滤波器"><a href="#RLS滤波器" class="headerlink" title="RLS滤波器"></a>RLS滤波器</h1><h2 id="RLS自适应滤波器"><a href="#RLS自适应滤波器" class="headerlink" title="RLS自适应滤波器"></a>RLS自适应滤波器</h2><p><strong>线性方程组解的形式：</strong></p><p>具有N个方程M个未知量的线性方程组表示成矩阵形式：$ Ax &#x3D; b $ </p><p>如果$M&#x3D;N$，且矩阵A可逆，则该线性方程组为<strong>适定方程组</strong>,则可确定一个满足该方程组的唯一解：$ x &#x3D; A^{-1}b $</p><p>如果$M &lt; N$，$A$是一“高矩阵”，且设矩阵A是列满秩的，则称线性方程组为<strong>超定线性方程组</strong>。此时该线性方程组无解。可找到一个$\hat{x}$，使得估计误差向量在某种意义下取得极小值。$ e &#x3D; A\hat{x} - b $</p><p>在最小二乘（LS，Least Squares）意义下，使估计误差的模的平方和取得极小值，所得到的解称为最小二乘解，记作$ \hat{x}_{LS} $</p><p>$ \hat{x}_{LS} &#x3D; (A^TA)^{-1} A^T b $</p><p>如果$M &lt; N$，$A$是一“扁矩阵”， 且设矩阵A是行满秩的，则称线性方程组为<strong>欠定线性方程组</strong>。此时该线性方程组有无穷多个解。</p><p>在最小范数（minimum norm）意义下，可以确定唯一解$ \hat{x}_{F} &#x3D; A^T (AA^T)^{-1} b $</p><p>求解最小二乘解的方法：</p><p>定义代价函数为误差信号的模的平方和：$ J &#x3D; \sum_{n &#x3D; M}^{N} |e(n)|^2 &#x3D; e^Te$</p><p>求$J$关于$w$的梯度，$ \nabla_j  &#x3D; 0$，得到$ w &#x3D; (A^TA)^{-1} A^T b $</p><p><img src="/img/article_img/Digital_Filter/4.png"></p><p><strong>递归最小二乘算法</strong></p><p>加权最小二乘：$ \zeta(n) &#x3D; \sum_{i&#x3D;1}^{n} \lambda^{n-i}|e(i)|^2 $</p><p>考虑到输入噪声的影响，尤其是在n&#x3D;0时的影响，可采用如下正则化处理：</p><p>$ \zeta(n) &#x3D; \sum_{i&#x3D;1}^{n} \lambda^{n-i}|e(i)|^2 + \delta \lambda^n ||\hat(w(n))||^2 $</p><p>$ R_x(n) &#x3D; \sum_{i&#x3D;1}^{n} \lambda^{n-1} x(i)x(i)^H + \delta \lambda^n I $</p><p>$ r(n) &#x3D; \sum_{i&#x3D;1}^{n} \lambda^{n-1}  x(i)d^*(n) $</p><p>将自相关和互相关矩阵重新表示：</p><p>$ R_x(n) &#x3D; \lambda R_x(n-1) + x(n)x^H(n) $</p><p>$ r(n) &#x3D; \lambda r(n-1) + x(n)d^*(n) $</p><p>逆相关矩阵：$ P(n) &#x3D; R_x^{-1}(n) $</p><p>增益矢量：$ k(n) $</p><p>根据矩阵求逆引理，可以写出逆相关矩阵的递推公式：</p><p>$ P(n) &#x3D; \lambda^{-1}P(n-1) - \lambda^{-1}k(n)x^H(n)P(n-1) $</p><p>$ k(n) &#x3D; P(n)x(n) $</p><p>则权系数更新的递推公式为：</p><p>$ \hat{W(n)} &#x3D; R_x^{-1}(n) r(n) &#x3D; P(n)r(n) $</p><p>$ \hat{W(n)} &#x3D; \hat{W(n-1)} + k(n)\eta^*(n)$</p><p>其中$\eta^*(n)$为先验误差：$\eta^*(n) &#x3D; d(n) - \hat{w^H(n-1)}x(n)$</p><p>写出后验误差：$ e(n) &#x3D; d(n) - \hat{w^H(n)}x(n) $</p><p>则收敛因子为：$ \gamma(n) &#x3D; \frac{e(n)}{\eta(n)} &#x3D; 1 - k^H(n)x(n)$</p><p>当收敛因子等于1时，即先验误差等于后验误差时，滤波器的权系数达到稳定。</p><p>一般取初始条件：$ \hat{w(0)} &#x3D; 0  P(0) &#x3D; \delta^{-1}I$</p><p>参数选择：</p><p>遗忘因子$\lambda $：接近1但小于1的正常数，$0.95&lt;λ&lt;1$。$λ&#x3D;1$即平稳输入，无限记忆；输入过程的非平稳程度越严重， 则$λ$越小。 </p><p>正则化参数$δ$：$ \alpha_{\mu}^2 \mu^{\alpha} $   $ \mu &#x3D; 1- \lambda $  $\alpha_{\mu}^2  $为输入过程方差</p><p><strong>RLS算法的收敛性：</strong></p><p>RLS算法约经过$n&#x3D;2M$次迭代，即可使均方误差达到最小误差的1.5倍，而LMS算法达此水平至少需20M次迭代。 因此，RLS比LMS至少快一个数量级。 </p><p>若n趋于无限大，在不考虑量化误差的条件下，RLS算法无失调。而LMS始终存在与步长有关的失调。  </p><p>RLS算法的主要问题之一是每次迭代中的计算量与阶数M的平方成正比。虽然比之最小二乘法(M的三次方成正比) 好，但比LMS算法(M成正比)要差。</p>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自适应滤波器——LMS滤波器</title>
    <link href="/2023/10/09/%E8%87%AA%E9%80%82%E5%BA%94%E6%BB%A4%E6%B3%A2%E5%99%A8%E2%80%94%E2%80%94LMS%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <url>/2023/10/09/%E8%87%AA%E9%80%82%E5%BA%94%E6%BB%A4%E6%B3%A2%E5%99%A8%E2%80%94%E2%80%94LMS%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>简单介绍LMS滤波器的原理</p><span id="more"></span><h1 id="LMS滤波器"><a href="#LMS滤波器" class="headerlink" title="LMS滤波器"></a>LMS滤波器</h1><p><strong>自适应数字滤波器：</strong>利用前一时刻已获得的滤波器参数等结果，自动地调节现时刻的滤波器参数，以适应信号与噪声未知的或随时间变化的统计特性，从而实现最优滤波。</p><p>自适应滤波器$H(z)$的系数根据误差信号，通过一定的自适应算法，不断地进行改变，使输出$y(n)$最接近期望信号$d(n)$。</p><p>实际中，$d(n)$要根据具体情况进行选取。</p><p><img src="/img/article_img/Digital_Filter/2.png"></p><p><strong>自适应滤波器的特点：</strong>  </p><p>滤波器的参数可以自动地按照某种准则调整到最佳滤波，是一种最佳的时变数字滤波器；  </p><p>实现时不需要任何关于信号和噪声的先验统计知识；  </p><p>具有学习和跟踪的性能。</p><p><strong>自适应数字滤波器的应用</strong>  </p><p>系统模型识别；  </p><p>通信信道的自适应均衡；  </p><p>雷达与声纳的波束形成；  </p><p>消除心电图中的电源干扰；  </p><p>噪声中信号的检测、跟踪、 增强和线性预测等。</p><p><strong>自适应滤波器分类：</strong></p><p>最小均方误差（LMS）自适应滤波器</p><p>递归最小二乘（RLS）自适应滤波器</p><h2 id="LMS自适应滤波器"><a href="#LMS自适应滤波器" class="headerlink" title="LMS自适应滤波器"></a>LMS自适应滤波器</h2><p>$ y(n) &#x3D; \sum_{m&#x3D;0}^{N-1}w(m)x(n-m)$</p><p>$ y_i &#x3D; \sum_{i&#x3D;0}^{N}w_ix_{ij} $    </p><p>$ y_i &#x3D; W^T X_j $   $ W &#x3D; [w_1,w_2,\dots,w_N]^T,X_j &#x3D; [x_{1j},x_{2j},\dots,x_{Nj}]^T $</p><p>误差信号表示为：$ e_j &#x3D; d_j-y_j &#x3D; d_j - W^TX_j $</p><p>误差信号被用来作为权系数的控制信号。均方误差（性能函数）为：</p><p>$ E[e_j^2] &#x3D; E[(d_j - y_j)^2] &#x3D; E[d_j^2] - 2R_{dx}^T W + W^TR_{xx}W $</p><p>当输入信号和期望信号是平稳随机信号时，均方误差信号$ E[e_j^2] $是权系数的二次函数，它是一个中间上凹的超抛物形曲面，是具有唯一最小值的函数。</p><p><img src="/img/article_img/Digital_Filter/3.png"></p><p>调节加权系数W使均方误差最小，相当于沿超抛物形曲面下降到最小值。</p><p>在数学上，可用梯度法沿着该曲面调节权矢量的各元素得到均方误差$ E[e_j^2] $的最小值。</p><p>用$ \nabla _j $表示$ E[e_j^2] $的梯度向量，用公式表示如下：</p><p>$ \nabla _j &#x3D; [\frac{\partial E[e_j^2]}{\partial w_1}, \frac{\partial E[e_j^2]}{\partial w_2}, \dots, \frac{\partial E[e_j^2]}{\partial w_N}]^T $</p><p>$ \nabla <em>j &#x3D; 2R</em>{xx}W - 2R_{dx} &#x3D; 0 $    </p><p>最佳权矢量：$ W^* &#x3D; R_{xx}^{-1}R_{dx}  $</p><p>此时均方误差取最小值：$ E[e_j^2]<em>{min} &#x3D; E[d_j^2] - R</em>{dx}^TW^* $</p><p><strong>最陡下降法</strong></p><p>采用最优化的数学算法-最陡下降法（Steepest  Descent Method），搜索性能函数表面寻找最佳权系数。</p><p>最陡下降法的递推公式：$ W_{j+1} &#x3D; W_j + \mu(-\nabla_j) $</p><p>其中，$ \mu $是一个控制稳定性和收敛速度的参量，称之为收敛因子。$-\nabla_j $方向是性能函数下降最快的方向，因此称为最陡梯度下降法。</p><p>$E[e_{j}^2]$与$W$的关系在几何上是一个“碗形”的多维曲面。</p><p>搜索方向为梯度负方向，每一步更新都使目标函数值减小。</p><p>Widrow等人提出，采用梯度的估计值代替梯度的精确值，称为Widrow-Hoff算法。</p><p>即$  \hat{\nabla_j}&#x3D; [\frac{\partial e_j^2}{\partial w_1}, \frac{\partial e_j^2}{\partial w_2}, \dots, \frac{\partial e_j^2}{\partial w_N}]^T $</p><p>得到$  \hat{\nabla_j}&#x3D; -2e_jX_j $</p><p><img src="/img/article_img/Digital_Filter/5.png"></p><p>因此，最陡下降法的<strong>递推公式</strong>可以写成：$ W_{j+1} &#x3D; W_j + 2\mu e_jX_j $</p><p>权系数也是在理想情况下的权轨迹附近随机变化的。</p><p>搜索方向为瞬时梯度负方向，不能保证每一步更新都使目标函数值减小，但总趋势使目标函数值减小。</p><p>LMS算法的收敛条件为：$ 0 &lt; \mu &lt; \frac{1}{tr(R_{xx})} $或$ 0 &lt; \mu &lt; \frac{1}{\sum E[X_i]} $</p><p><strong>收敛性质：</strong></p><p>$\mu$值对收敛稳定性和收敛速度影响很大，首先必须选择得足够小，使之满足收敛条件，同时，它还影响收敛速度。</p><p>$\mu$偏大，收敛快，跟踪性能差，$\mu$偏小，收敛慢，跟踪性能好。</p>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卡尔曼滤波器</title>
    <link href="/2023/10/09/%E7%8E%B0%E4%BB%A3%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/"/>
    <url>/2023/10/09/%E7%8E%B0%E4%BB%A3%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/</url>
    
    <content type="html"><![CDATA[<p>简单介绍卡尔曼滤波器的原理</p><span id="more"></span><h1 id="卡尔曼滤波器"><a href="#卡尔曼滤波器" class="headerlink" title="卡尔曼滤波器"></a>卡尔曼滤波器</h1><h2 id="卡尔曼滤波"><a href="#卡尔曼滤波" class="headerlink" title="卡尔曼滤波"></a>卡尔曼滤波</h2><p>假设某系统$ n$时刻的状态变量为$x(n)$</p><p>过程方程：$ x(n+1) &#x3D; F(n+1,n)x(n) + v_1(n) $</p><p>观测方程：$ y(n) &#x3D; C(n)x(n) + v_2(n) $</p><p>$F(n+1,n)$为状态转移矩阵； $C(n)$为观测矩阵； $x(n)$为状态向量； $y(n)$为观测向量； $v_1$为过程噪声；$v_2$为观测噪声。</p><p>假设状态变量的增益矩阵F不随时间发生变化，$v_1$、$v_2$都是 零均值白噪声，方差分别是$Q_1$和$Q_2$，并且初始状态$x(0)$与$v_1$、$v_2$都不相关，且噪声向量$v_1$、$v_2$也互不相关。</p><p>Kalman滤波问题：利用观测数据$ y_1(n),y_2(n),\dots,y(n) $，对$n≥1$求状态向量$x(i)$各个分量的最小二乘估计。</p><p>kalman滤波算法的具体推导过程省略。</p><p><strong>Kalman滤波的特点：</strong></p><p>Kalman滤波采用物理意义较为直观的时间域描述方式；</p><p>采用递推算法，用前一个估计值和最近一个观察数据(它不需要全部过去的观察数据)来估计信号的当前值；</p><p>解是以估计值(常常是状态变量值)形式给出的，或者说其信号模型是从状态方程和量测方程得到的；  </p><p>适用于多维和非平稳随机信号。</p>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>维纳滤波器</title>
    <link href="/2023/10/09/%E7%8E%B0%E4%BB%A3%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E7%BB%B4%E7%BA%B3%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <url>/2023/10/09/%E7%8E%B0%E4%BB%A3%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E7%BB%B4%E7%BA%B3%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>简单介绍维纳滤波器的原理</p><span id="more"></span><h1 id="维纳滤波器"><a href="#维纳滤波器" class="headerlink" title="维纳滤波器"></a>维纳滤波器</h1><h2 id="维纳滤波器-1"><a href="#维纳滤波器-1" class="headerlink" title="维纳滤波器"></a>维纳滤波器</h2><p>滤波器输出信号为：$ x(n) &#x3D; s(n) + v(n) $</p><p>滤波器输出信号为：$ y(n) &#x3D; \hat{s}(n) &#x3D;\sum_{m} h(m)x(n-m) $</p><p>误差为：$ e(n) &#x3D; s(n) - y(n) $</p><p>维纳滤波器的分析思路就是在<strong>均方误差最小</strong>的前提下，求得系统的单位脉冲响应$ h(n) $或传递函数$ H(z) $，即代价函数$ J（n） $为最小均方误差。</p><p>最小均方误差为：$ E(| e(n) |^2)_{min} $</p><p><strong>正交原理</strong>：若使滤波器的均方误差达到最小， 则误差信号与输入信号正交。</p><p>$ \nabla_k {J(n)} &#x3D; 0 $           $ E(x^*(n-k)e_{opt}(n)) &#x3D; 0 $</p><p>将误差信号使用输出信号和参考信号表示，得到<strong>维纳-霍夫方程</strong>。</p><p>$ r_{xd}(k) &#x3D; \sum_{i&#x3D;0}^{+\infty}h_{opt,i} r_{xx}(k-i) $</p><p>$r_{xd}(k)  r_{xx}(k-i) $分别为输入信号与参考信号的互相关和输入信号的自相关。</p><p><strong>FIR维纳滤波器的维纳-霍夫方程</strong>  </p><p>当$ h(n) $是一个长度为$M $的因果序列时，FIR维纳滤波器的维纳-霍夫方程表述为$ r_{xd}(k) &#x3D; \sum_{i&#x3D;0}^{M-1}h(i) r_{xx}(k-i) $</p><p>表达为矩阵形式：$ R_{xd} &#x3D; R_{xx}h $ </p><p>得到：$ h &#x3D; R_{xx}^{-1} R_{xd} $</p><p>维纳-霍夫自适应是单步算法，不需要反馈，并可用于解决以前的任何系统识别问题，逆系统辨识，噪声消除等。维纳-霍夫算法并不是实时的算法，该结构需要大量的计算。当$x(n)$和$s(n) $的统计特性发生变化，就需要重新计算滤波器，此时算法将失去跟踪功能。因此，在实时数学信号处理中，直接使用维纳-霍夫算法是不可行的。</p>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>匹配滤波器</title>
    <link href="/2023/10/09/%E7%8E%B0%E4%BB%A3%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E5%8C%B9%E9%85%8D%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <url>/2023/10/09/%E7%8E%B0%E4%BB%A3%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E5%8C%B9%E9%85%8D%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>简单介绍匹配滤波器的原理</p><span id="more"></span><h1 id="匹配滤波器"><a href="#匹配滤波器" class="headerlink" title="匹配滤波器"></a>匹配滤波器</h1><p>信号处理的目的是从噪声中提取信号，得到不受干扰影响的真正信号。采用的处理系统称为滤波器。 </p><p>实时信号处理中，希望滤波器的参数可以根据系统或环境的变化进行更新，称为自适应滤波器。</p><p><strong>最优滤波</strong></p><p>所谓最优是在某种标准下系统性能达到最佳。  </p><p>相对性：在某种准则下的最优系统，在另外一种准则下就不一定是最优的。  </p><p>等价性：在某些特定条件下，几种最优准则也可能是等价的。  </p><p><strong>最优线性滤波器的设计准则：</strong>  </p><p>滤波器输出<strong>信噪比</strong>在某一特定时刻达到最大，称为<strong>匹配滤波器</strong>；  </p><p>滤波器输出的信号波形与发送信号波形之间的<strong>均方误差</strong>最小，称为<strong>维纳滤波器</strong>。</p><h2 id="匹配滤波器-1"><a href="#匹配滤波器-1" class="headerlink" title="匹配滤波器"></a>匹配滤波器</h2><p>滤波器输入：$ r(t) &#x3D; s(t) + n(t) $</p><p>滤波器输出：$ y(t) &#x3D; s_0(t) + n_0(t) $</p><p><img src="/img/article_img/Digital_Filter/1.png"></p><p>在抽样时刻$ t_0 $，滤波器输出信号的瞬时功率与噪声平均功率之比达到最大时，匹配滤波器的单位冲激响应为：(假设$ n(t) $为零均值和单位方差的白噪声，其功率谱为1)</p><p>$ h(t) &#x3D; s(t_0 - t) $</p><p>即匹配滤波器的单位冲激响应$ h(t) $是输入信号$ s(t) $的镜像函数，$t_0 $时刻输出信噪比最大。（$ t_0 &gt;&#x3D; T_0 $）</p><p>输出信号：$ s_0(t) &#x3D; s(t) * h(t) &#x3D; \int_{-\infty}^{-\infty} s(t - \tau)h(\tau) d\tau &#x3D; \int_{-\infty}^{-\infty} s(t - \tau)s(t_0 - \tau ) d\tau $ </p><p>匹配滤波器的输出波形是输入信号$ s(t) $的自相关函数。因此，匹配滤波器可以看成是一个计算输入信号自相关函数的相关器，其在$t_0$时刻得到最大输出信噪比。</p><p><strong>实际应用</strong></p><p><strong>应用1：包含噪声的通信信号检测。</strong></p><p>基站接收到通信信号，信号叠加了一定的噪声，通过对信号进行匹配滤波，在时域上，如果滤波器输出信号包含明显的峰值，即在某一时刻的信噪比最大，信号中包含了有用信号。在频域上，观察经过滤波器之后的信号频率分量即为有用信号的频率分量。否则，接收到的信号为无用信号。</p><p><strong>应用2：雷达探测目标</strong></p><p>雷达发送信号，并接受反射到的信号。反射信号叠加了一定的噪声，对信号进行匹配滤波。观察滤波器的输出信号，是否有明显的峰值，例如，匹配滤波后的信号有三个明显峰值，经过目标判决器（即峰值比较），判定有三个目标，并可以根据峰值的时刻确定目标的相对距离。</p>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字信号处理之数字滤波器</title>
    <link href="/2023/08/22/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%97%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <url>/2023/08/22/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%97%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>简单介绍FIR滤波器和IIR滤波器的原理和结构</p><span id="more"></span><h1 id="数字信号处理之数字滤波器"><a href="#数字信号处理之数字滤波器" class="headerlink" title="数字信号处理之数字滤波器"></a>数字信号处理之数字滤波器</h1><p>数字滤波器一般可以分为以下几类：</p><p>（1）有限冲激响应滤波器（FIR），也称为非递归线性滤波器，这种类型的滤波器没有反馈通道。</p><p>（2）无限冲激响应滤波器（IIR），也称为递归线性滤波器，这种类型的滤波器带有反馈通道。</p><p>（3）自适应数字滤波器（ADF），这种滤波器能够将自身适应为预期信号，且具有自主学习能力。</p><p>（4）非线性滤波器，一种可以执行非线性操作的滤波器。典型地，中值滤波器和最小&#x2F;最大滤波器就属于非线性滤波器。</p><h2 id="FIR滤波器"><a href="#FIR滤波器" class="headerlink" title="FIR滤波器"></a>FIR滤波器</h2><p>FIR滤波器是对N个采样数据执行加权和平均（卷积）的处理。<br>$$<br>y(k) &#x3D; \sum_{n&#x3D;0}^{N-1}W_nx(k-n)<br>$$<br>对上式取z变换，得到<br>$$<br>\frac{Y(z)}{X(z)} &#x3D; \sum_{k&#x3D;0}^{N-1}W_n z^{-k}<br>$$<br>具有3个权值（或抽头）滤波器的差分方程表示为<br>$$<br>y(k) &#x3D; W_0x(k) + W_1x(k-1) + W_2x(k-2)<br>$$</p><p>三抽头滤波器的结构如图所示：暂略</p><p>需要适当的选择从$ W_0$到$W_{N-1}$的系数，以保证滤波器能达到设计的性能要求。</p><h2 id="IIR滤波器"><a href="#IIR滤波器" class="headerlink" title="IIR滤波器"></a>IIR滤波器</h2><p>IIR滤波器既包含递归部分也包含非递归部分。</p><p>一个IIR滤波器可看成是由两个FIR滤波器构成的，其中一个滤波器位于反馈回路中。</p><p>IIR滤波器不具有线性相位，故而存在相位失真。IIR滤波器的设计是基于双线性变换法，这种方法是通过s域中的模拟滤波器的设计原型，得到一个近似的离散模型。</p><p>对于一个具有N个前馈系数和M-1个反馈系数的IIR滤波器，其输入和输出关系表示为<br>$$<br>y(k) &#x3D; \sum_{n&#x3D;0}^{N-1}a_n x(k-n) + \sum_{m&#x3D;1}^{M-1} b_m y(k-m)<br>$$</p><p>这里没有滤波器系数$ b_0 $，否则，将存在一个无延迟单元的反馈之路，滤波器将变得不可实现。滤波器不需要具有相同的系数个数。</p>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字信号处理之傅里叶变换</title>
    <link href="/2023/08/10/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B9%8B%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
    <url>/2023/08/10/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B9%8B%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>简单介绍离散傅里叶变换与其快速算法的原理</p><span id="more"></span><h1 id="数字信号处理之傅里叶变换"><a href="#数字信号处理之傅里叶变换" class="headerlink" title="数字信号处理之傅里叶变换"></a>数字信号处理之傅里叶变换</h1><p>有限长序列在数字信号处理中是很重要的一种序列，研究有限长序列的一种有用的工具是离散傅里叶变换（DFT）。</p><p>离散傅里叶变换是有限长序列的一种傅里叶表示法，在理论上十分重要。而且存在计算离散傅里叶变换的有效快速算法，即快速傅里叶变换（FFT）。</p><h2 id="离散傅里叶变换"><a href="#离散傅里叶变换" class="headerlink" title="离散傅里叶变换"></a>离散傅里叶变换</h2><p>离散傅里叶变换在时域和频域都是离散的，DFT的变换对为：<br>$$<br>X(k) &#x3D; \sum_{n&#x3D;0}^{N-1} x(n)W_N^{nk} \qquad k&#x3D;0,1,2,\cdots,N-1<br>$$</p><p>$$<br>x(n) &#x3D; \frac{1}{N} \sum_{k&#x3D;0}^{N-1}X(k)W_N^{-nk}  \qquad n&#x3D;0,1,2,\cdots,N-1<br>$$</p><p>其中<br>$$<br>W_N &#x3D; e^{-j \frac{2\pi}{N}}<br>$$<br>时域抽样间隔为T时，频域周期$ \Omega_s &#x3D; 2\pi&#x2F;T $，时域周期为$ T_1 $时，频域抽样间隔为$ \Omega_1 &#x3D; 2\pi &#x2F; T_1 $。</p><h3 id="物理意义"><a href="#物理意义" class="headerlink" title="物理意义"></a>物理意义</h3><p>序列x(n)的n点DFT是x(n)的z变换在单位圆上的N点等间隔采样。是x(n)的傅里叶变换在区间$ [0,2\pi] $上的N点等间隔采样。</p><h3 id="采样定理"><a href="#采样定理" class="headerlink" title="采样定理"></a>采样定理</h3><p>时域采样定理：当采样频率大于等于信号中最大频率分量的2倍时，可以由时域采样信号恢复原来的连续信号。</p><p>频域采样定理：当采样点数N大于等于序列长度M时，可以由频域采样X(k)来表示X(z)，否则会发生混叠现象。</p><h3 id="谱分析存在的问题"><a href="#谱分析存在的问题" class="headerlink" title="谱分析存在的问题"></a>谱分析存在的问题</h3><p>1.栅栏效应</p><p>只能看见N个离散采样点的谱特性，看不到全部的频谱特性，由于栅栏效应，有可能漏掉大的频谱分量。可以采用在原序列尾部补零的方法，改变序列长度N（即该百年DFT变换区间长度），从而增加频域采样点数和采样点为止，使原来漏掉的某些频谱分量被检测出来。</p><p>2.频率相应的混叠失真及参数选择</p><p>根据时域抽样定理，抽样频率$ f_s &gt;2f_c $，否则会产生频率响应的混叠失真。对于DFT来说，抽样间隔为F，时域周期为$ T_p &#x3D; 1&#x2F;F $，F为频率分辨率，F越小，谱分析的结果就越接近原连续信号的频谱。</p><p>当N保持不变，要提高谱的分辨率，必须降低$ f_s  $，但是受到时域采样定理的限制；当$ f_s $保持不变，为提高频率分辨率可以增加采样点数N。</p><p>3.截断效应</p><p>在持续时间无限长的信号中截取有限长个数据，就相当于在时域乘一个矩形窗函数，窗内的数据并不改变。时域中相乘，频域中相当于卷积，卷积的结果和原来的频谱不相同，有失真。这种失真最主要的是造成频谱的”扩散“，也就是所谓的”频谱泄漏“。并且泄露也会造成混叠。</p><p>减小泄漏的方法，一方面是取更长的数据，也就是窗宽加宽；另一方面是数据不要突然截断，要缓慢截断，也就是不加矩形窗，而是加如三角形窗、升余弦窗等，使得窗谱的旁瓣能量更小，卷积后造成的泄漏减小。</p><h2 id="快速傅里叶变换FFT"><a href="#快速傅里叶变换FFT" class="headerlink" title="快速傅里叶变换FFT"></a>快速傅里叶变换FFT</h2><p>直接按照离散傅里叶变换的定义计算N点DFT时，总计算量需要$ N(N-1) $次复数加法和$ N^2 $次复数乘法。</p><h3 id="按时间抽取的基-2FFT算法"><a href="#按时间抽取的基-2FFT算法" class="headerlink" title="按时间抽取的基-2FFT算法"></a>按时间抽取的基-2FFT算法</h3><p>将原序列按n的奇偶分为两组，通过不断将N点DFT分解为N&#x2F;2点DFT，最后分解为最简单的2点DFT。</p><h3 id="按频率抽取的基-2FFT算法"><a href="#按频率抽取的基-2FFT算法" class="headerlink" title="按频率抽取的基-2FFT算法"></a>按频率抽取的基-2FFT算法</h3><p>将原序列写成前后两部分，通过不断将N点DFT分解为N&#x2F;2点DFT，最后分解为最简单的2点DFT。</p><p>两种算的计算量完全相同，具体计算原理和过程有所区别，这里省略详细的推导过程。</p><h3 id="计算量分析"><a href="#计算量分析" class="headerlink" title="计算量分析"></a>计算量分析</h3><p>对于N点DFT，</p><p>$ \log_2 N $级蝶形运算，每一级都由$ N&#x2F;2 $个蝶形运算构成。</p><p>复数乘法：$ \frac{N}{2} \log_2N $</p><p>复数加法：$ N\log_2 N $</p><p>DFT与FFT计算量对比</p><table><thead><tr><th></th><th>DFT</th><th>FFT</th></tr></thead><tbody><tr><td>复数乘法</td><td>$ N^2 $</td><td>$ \frac{N}{2} \log_2N $</td></tr><tr><td>复数加法</td><td>$ N(N-1) $</td><td>$ N\log_2 N $</td></tr></tbody></table><h3 id="混合基FFT算法"><a href="#混合基FFT算法" class="headerlink" title="混合基FFT算法"></a>混合基FFT算法</h3><p>基-2FFT算法，需要满足$ N &#x3D; 2^L $的条件，因为需要经过多次分解，将N点DFT分解为多个2点DFT。</p><p>当N不满足这个条件时，一般有一下方法：</p><p>一方面，将序列x(n)使用补零的方法延长，使N增长到最近的$ N &#x3D; 2^L $的数值。因为有限长序列补零后并不影响其频谱，只是增加频谱的采样点数。因此，如果只是为了了解整个频谱而不是特定频率点，则可以使用这种方法。</p><p>另一方面，如果要求特定频率点的频谱，则N不能改变，可以使用以任意数为基数的FFT算法。</p>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Microblze软核的应用（自定义IP_PWM）</title>
    <link href="/2023/07/19/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89IP_PWM%EF%BC%89/"/>
    <url>/2023/07/19/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89IP_PWM%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>介绍自定义IP核，并使用Microblaze软核控制。</p><span id="more"></span><h1 id="Microblaze软核的应用（自定义IP-PWM）"><a href="#Microblaze软核的应用（自定义IP-PWM）" class="headerlink" title="Microblaze软核的应用（自定义IP_PWM）"></a>Microblaze软核的应用（自定义IP_PWM）</h1><p>前面介绍了Microblaze软核的开发流程，如何建立一个Microblaze系统，添加IP核，完成基本的操作。</p><p><a href="https://vinters-v.github.io/2023/07/09/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88GPIO&UART%EF%BC%89/">Microblze软核的应用（GPIO&amp;UART） - Vinters-v</a></p><p>但是，在实际应用中，Vivado提供的IP核不足以满足设计的要求。因此，我们常常需要自己设计相应的逻辑电路，封装成IP核，添加到系统中，并使用Microblaze软核对其进行控制，完成一定的功能。</p><p>这里以PWM波产生为例，如果使用CPU产生PWM波的话，需要使用定时器资源，然而在单片机中定时器资源有限。而使用FPGA或者说设计数字电路实现PWM是非常简单的。而对于PWM波的周期和占空比的控制，FPGA则不擅长。</p><p>因此，本文在FPGA器件上设计一个用于PWM波产生的数字电路模块，将其封装成IP核。设计Microblaze系统，添加PWM波产生IP，完成软件控制PWM波周期与占空比的功能。</p><h2 id="1-PWM波产生IP核设计与封装"><a href="#1-PWM波产生IP核设计与封装" class="headerlink" title="1.PWM波产生IP核设计与封装"></a>1.PWM波产生IP核设计与封装</h2><h3 id="PWM波逻辑程序"><a href="#PWM波逻辑程序" class="headerlink" title="PWM波逻辑程序"></a>PWM波逻辑程序</h3><p>Verilog编写pwm波的原理，设计一个同步二进制加法计数器，当计数器的时钟频率固定时，计数器的模值，或者说溢出值就决定了pwm波的周期。只需要根据占空比计算在一个计数周期内pwm波输出端口的高电平的时间。</p><p>模块设置两个输入参数，一个为计数器模值，一个为根据占空比计算的高电平计数长度。在一个周期内，输出端口首先输出高电平，当计数器的计数值大于设置高电平长度时，输出端口输出低电平。pwm波产生的Verilog程序如下。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> PWM(clk,reset,period,duty,pwm_out);<br>    <br><span class="hljs-keyword">parameter</span> N = <span class="hljs-number">32</span>;<br><span class="hljs-keyword">input</span> clk;<br><span class="hljs-keyword">input</span> reset;<br><span class="hljs-keyword">input</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] period;   <span class="hljs-comment">//计数器模值</span><br><span class="hljs-keyword">input</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] duty;     <span class="hljs-comment">//高电平长度</span><br><span class="hljs-keyword">output</span> pwm_out;<br><br><span class="hljs-keyword">reg</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cnt;<br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> reset)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!reset) cnt &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt &lt; period-<span class="hljs-number">1</span>) cnt &lt;= cnt + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">else</span> cnt &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br>    <br><br><span class="hljs-keyword">assign</span> pwm_out = (cnt &lt; duty) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="仿真验证硬件正确性"><a href="#仿真验证硬件正确性" class="headerlink" title="仿真验证硬件正确性"></a>仿真验证硬件正确性</h3><p>编程仿真程序，测试模块设计是否符合要求。只需要在仿真文件中例化PWM模块，初始化给定两个参数值，并设置时钟输入即可。这里不进行详细介绍。</p><h3 id="封装IP"><a href="#封装IP" class="headerlink" title="封装IP"></a>封装IP</h3><p>程序编写好，并通过仿真之后，就可以将写好的PWM模块封装成IP。步骤如下：</p><p>在Vivado软件上方工具栏，选择Tools-&gt;Create and Package New IP，因为IP要在BD设计中使用，因此，将IP封装为AXI4总线格式，在弹窗中选择Create a new AXI4 peripheral。</p><p><img src="/img/article_img/Microblaze_PWM/1.png"></p><p>接着设置模块的名称，模块是作为主设备还是从设备，模块寄存器个数等等。</p><p><img src="/img/article_img/Microblaze_PWM/2.png"></p><p><img src="/img/article_img/Microblaze_PWM/3.png"></p><p><img src="/img/article_img/Microblaze_PWM/4.png"></p><p>生成IP之后，就可以在IP catalog的用户自定义IP中找到PWM IP核。但此时的IP核中还没有实际的功能，需要添加已经写好的PWM成雪到IP核中。</p><p>首先找到PWM IP核，右键选择Edit  in IP Packager，此时Vivado软件会打开另一个工程文件，用于修改PWM IP的内容。</p><p><img src="/img/article_img/Microblaze_PWM/5.png"></p><p>在新的工程文件中，已经有一个设计文件，我们需要将之前写好的PWM程序添加到设计文件中，然后在PWM IP设计文件的底层程序中例化PWM模块。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// Add user logic here</span><br>PWM pwm_init_0(<br>    <span class="hljs-variable">.clk</span>(S_AXI_ACLK),<br>    <span class="hljs-variable">.reset</span>(S_AXI_ARESETN),<br>    <span class="hljs-variable">.period</span>(slv_reg0),<br>    <span class="hljs-variable">.duty</span>(slv_reg1),<br>    <span class="hljs-variable">.pwm_out</span>(pwm_0)<br>    );<br>    <br>PWM pwm_init_1(<br>    <span class="hljs-variable">.clk</span>(S_AXI_ACLK),<br>    <span class="hljs-variable">.reset</span>(S_AXI_ARESETN),<br>    <span class="hljs-variable">.period</span>(slv_reg2),<br>    <span class="hljs-variable">.duty</span>(slv_reg3),<br>    <span class="hljs-variable">.pwm_out</span>(pwm_1)<br>    );<br><span class="hljs-comment">// User logic ends</span><br></code></pre></td></tr></table></figure><p>其中时钟和复位信号以及两个寄存器，在原有文件中已有定义，pwm输出端口需要我们自行定义。</p><p>在底层文件的用户端口定义区域添加代码</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// Users to add ports here</span><br><span class="hljs-keyword">output</span> pwm_0,<br><span class="hljs-keyword">output</span> pwm_1,<br><br><span class="hljs-comment">// User ports ends</span><br></code></pre></td></tr></table></figure><p>同时在顶层文件中的端口定义区域添加输出端口定义，并在例化下层模块处，添加输出端口例化。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-variable">.pwm_0</span>(pwm_0),<br><span class="hljs-variable">.pwm_1</span>(pwm_1),<br></code></pre></td></tr></table></figure><p>例化后的文件结构如下</p><p><img src="/img/article_img/Microblaze_PWM/6.png"></p><p>修改完成后，打开文件component.xml，将Packaging Steps下的所有步骤更新并重新生成IP。</p><p><img src="/img/article_img/Microblaze_PWM/7.png"></p><p>重新生成后，新的工程文件会自动关闭，跳回到之前设计PWM的HDL的工程文件中，此时PWM IP核的封装就已经完成了，可以将之前编写的PWM的Verilog程序从工程中删除。</p><h2 id="2-添加Microblaze系统"><a href="#2-添加Microblaze系统" class="headerlink" title="2. 添加Microblaze系统"></a>2. 添加Microblaze系统</h2><p>创建Block Design，添加时钟产生模块，Microblaze处理器模块，PWM模块，添加处理器周围模块，自动布线等等。</p><p>具体的设计流程与上一篇文章类似，这里不再详细介绍。</p><p><a href="https://vinters-v.github.io/2023/07/09/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88GPIO&UART%EF%BC%89/">Microblze软核的应用（GPIO&amp;UART） - Vinters-v</a></p><p>完成综合、实现、比特流生成之后，硬件设计就算完成了，最后导出硬件设计文件，连接到SDK，进行软件的开发。</p><h2 id="3-SDK软件开发"><a href="#3-SDK软件开发" class="headerlink" title="3. SDK软件开发"></a>3. SDK软件开发</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>由于本次工程的pwm ip模块是自定义的，所以生成硬件设计文件后，SDK并不会自动生成相应的模板供我们参考使用。因此，这里直接使用hello world模板建立工程即可。</p><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;platform.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xil_printf.h&quot;</span></span><br><span class="hljs-comment">//需要自行添加</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xparameters.h&quot;</span> <span class="hljs-comment">//包含了各种硬件的参数定义</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pwm_ip.h&quot;</span>  <span class="hljs-comment">//pwm模块相关的配置函数与寄存器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xil_io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sleep.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>hello world模板中已经添加了几个必要的头文件，为了能够使用pwm模块，还必须自行添加几个头文件。首先pwm_ip.h文件中，包含了pwm模块的各种配置函数的定义，以及寄存器的定义。xparameters.h文件包含了系统所有硬件的参数定义，对于pwm模块来说，需要的有模块的基地址，设备ID等等。由于使用到了usleep函数，因此需要包含sleep.h文件。</p><h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><p>程序设计与其他单片机的设计类似，这里pwm模块的使用主要涉及到寄存器的读写，包括对寄存器写入频率控制变量和占空比控制变量。这里实现了频率固定，占空比循环变化的pwm波。程序如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;platform.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xil_printf.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xparameters.h&quot;</span> <span class="hljs-comment">//包含了各种硬件的参数定义</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pwm_ip.h&quot;</span>  <span class="hljs-comment">//pwm模块相关的配置函数与寄存器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xil_io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sleep.h&quot;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    init_platform();<br><br>    print(<span class="hljs-string">&quot;Hello World\n\r&quot;</span>);<br>    u32 period;<br>    u32 duty;<br>    period = <span class="hljs-number">1000000</span>;<span class="hljs-comment">//实际频率为100MHZ/period</span><br><br>    <span class="hljs-comment">//对pwm中的寄存器进行配置（其中reg0和reg2分别是两个频率寄存器，reg1和reg3是两个占空比寄存器）</span><br>    PWM_IP_mWriteReg(XPAR_PWM_IP_0_S00_AXI_BASEADDR, PWM_IP_S00_AXI_SLV_REG0_OFFSET, period);<br>    PWM_IP_mWriteReg(XPAR_PWM_IP_0_S00_AXI_BASEADDR, PWM_IP_S00_AXI_SLV_REG2_OFFSET, period);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>    <span class="hljs-keyword">for</span>(duty = period; duty &gt; <span class="hljs-number">0</span>; duty = duty - <span class="hljs-number">100000</span>)<br>    &#123;<br>        PWM_IP_mWriteReg(XPAR_PWM_IP_0_S00_AXI_BASEADDR, PWM_IP_S00_AXI_SLV_REG1_OFFSET, duty);<br>        PWM_IP_mWriteReg(XPAR_PWM_IP_0_S00_AXI_BASEADDR, PWM_IP_S00_AXI_SLV_REG3_OFFSET, period - duty);<br>        usleep(<span class="hljs-number">100000</span>);<span class="hljs-comment">//将线程挂起</span><br>    &#125;<br>    &#125;<br><br>    cleanup_platform();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="烧写与验证"><a href="#烧写与验证" class="headerlink" title="烧写与验证"></a>烧写与验证</h3><p>程序设计完成之后，就可以对FPGA器件进行烧写。首先点击工具栏中的“Program FPGA”，将硬件设计烧写到FPGA上，然后，选择Run As-&gt;Launch on Hardware(System Debugger)将软件代码下载到CPU中，观察板子上LED灯的变化，符合设计要求。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文的主要目的是以pwm产生为例，展示如何自己使用Verilog设计模块，封装为IP核，并由Microblaze控制其完成功能这一整套流程。初步学习了“PS+PL”的系统设计。</p>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>Verilog</tag>
      
      <tag>Microblaze</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Microblze软核的应用（GPIO&amp;UART）</title>
    <link href="/2023/07/09/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88GPIO&amp;UART%EF%BC%89/"/>
    <url>/2023/07/09/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88GPIO&amp;UART%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>介绍Microblaze软核开发的具体流程，以GPIO与UART外设为例。</p><span id="more"></span><h1 id="Microblaze软核的应用（GPIO-amp-UART）"><a href="#Microblaze软核的应用（GPIO-amp-UART）" class="headerlink" title="Microblaze软核的应用（GPIO&amp;UART）"></a>Microblaze软核的应用（GPIO&amp;UART）</h1><p>使用Vivado软件部署Microblaze软核，并添加GPIO外设与URAT外设，完成整个流程的设计与验证。</p><p>首先新建一个新的RTL工程，选择合适的FPGA器件，这里选择 ，不添加任何的设计文件。</p><h2 id="1-添加Microblaze软处理器核"><a href="#1-添加Microblaze软处理器核" class="headerlink" title="1.添加Microblaze软处理器核"></a>1.添加Microblaze软处理器核</h2><p>在Vivado软件界面，在左侧功能栏中，选择Create Block Design,新建一个BD设计文件。点击“+”，向BD设计中添加IP核，选择Microblaze，将软处理器核添加到设计。</p><p><img src="/img/article_img/Microblaze_GPIO/1.png"></p><h2 id="2-配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。"><a href="#2-配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。" class="headerlink" title="2.配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。"></a>2.配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。</h2><p>添加时钟产生模块Clocking Wizard,根据开发板的手册选择输入时钟的频率，输入时钟的频率要与开发板外部时钟源频率一致。模块的复位端口reset默认为高电平有效，一般修改为低电平有效，根据设计需要设置输出时钟的个数和频率大小。</p><p><img src="/img/article_img/Microblaze_GPIO/2.png"></p><p>时钟模块添加后，点击BD设计文件上方的Run Block Automain，软件自动生成处理器必须的外围电路模块，并完成一部分连线。</p><h2 id="3-添加设计所需要的IP核"><a href="#3-添加设计所需要的IP核" class="headerlink" title="3.添加设计所需要的IP核"></a>3.添加设计所需要的IP核</h2><p>添加AXI GPIO模块，同一种用途的IO可以添加一组GPIO，例如，用于LED的IO添加一组GPIO_0，用于按钮开关的添加一组GPIO_1。设置每一组GPIO的输出位数，也就是IO个数。还有数据的输入输出方向。需要用到中断时，则可以是能中断。</p><p><img src="/img/article_img/Microblaze_GPIO/3.png"></p><p>添加AXI Uartlite模块，一般只需要设置波特率即可。</p><p><img src="/img/article_img/Microblaze_GPIO/4.png"></p><p>所有IP核添加完成后，点击BD设计文件上方的Run Connection Automation进行模块之间的自动连接。</p><p>设计完成后点击Validate Design按钮对设计进行检查，没有error即可。</p><h2 id="4-进行管脚约束"><a href="#4-进行管脚约束" class="headerlink" title="4. 进行管脚约束"></a>4. 进行管脚约束</h2><p>对系统中的时钟，复位，以及需要的其他外设的接口进行管脚约束文件的编写，一般直接在Constrains文件中新建约束文件编写代码即可。</p><h2 id="5-完成硬件设计，导出硬件设计文件"><a href="#5-完成硬件设计，导出硬件设计文件" class="headerlink" title="5.完成硬件设计，导出硬件设计文件"></a>5.完成硬件设计，导出硬件设计文件</h2><p>与FPGA中逻辑设计的步骤相同，对硬件设计依次进行综合、实现、比特流文件生成。则完成了硬件电路的设计。</p><p>选择File-&gt;Export-&gt;Export Hardware，导入硬件设计文件，勾选include bitstream。</p><p><img src="/img/article_img/Microblaze_GPIO/5.png"></p><h2 id="6-进行SDK软件开发"><a href="#6-进行SDK软件开发" class="headerlink" title="6.进行SDK软件开发"></a>6.进行SDK软件开发</h2><p>选择File-&gt;Launch SDK，连接到SDK软件，软件会自动添加好刚刚设计好并导出的硬件信息。</p><p>在进行SDK软件开发时，有两种方法。</p><p>一是，选择File-&gt;New-&gt;Application Project，新建一个新的应用工程，采用hello world模板，这个模板是包含了最简单的代码结构。对于自己设计封装的IP核，只能采用这种方式。</p><p>二是，进入system.mss文件，这个文件包含了硬件所支持的开发包，对于每一个添加系统中的IP核，如GPIO，UART等等，都会有一个说明文件Documention与例程文件。对于Vivado中自带的IP核，可以直接导入例程文件Import Examples，在此基础上进行软件开发。</p><p><img src="/img/article_img/Microblaze_GPIO/6.png"></p><h2 id="7-下载硬件设计到FPGA，调试软件代码"><a href="#7-下载硬件设计到FPGA，调试软件代码" class="headerlink" title="7.下载硬件设计到FPGA，调试软件代码"></a>7.下载硬件设计到FPGA，调试软件代码</h2><p>完成软件设计后，连接FPGA，首先点击Program FPGA，将硬件设计下载到FPGA中。然后在应用工程总的文件夹上右键，选择Run As-&gt;Launch on Hardware(System Debugger)将软件代码下载到CPU中，进行软件代码的调试。</p>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>Verilog</tag>
      
      <tag>Microblaze</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Microblze软核的概述</title>
    <link href="/2023/07/08/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/07/08/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p>对Microblaze软核作简单概述，列举软核开发流程</p><span id="more"></span><h1 id="Microblaze软核的概述"><a href="#Microblaze软核的概述" class="headerlink" title="Microblaze软核的概述"></a>Microblaze软核的概述</h1><p>FPGA(Field Programmable Gate Array)即现场可编程门列，属于可编程逻辑器件的一种。是当今实现数字系统的主流平台之一。</p><p>FPGA具有硬件可编程的特点，它的内部有大量的逻辑门组成，可以通过编程实现基本电路的之间的连接，从而构成各种数字电路模块，进而设计复杂的数字系统。</p><p>然而，FPGA在设计数字电路上具有优势，对于需要进行控制，或者需要程序串行运行的场合就显得笨拙。对此，通过在FPGA器件内部部署软处理器核来解决这个问题。这里介绍Microblaze软处理器核。</p><p>软处理器核简称“软核”，即处理器并不是固定在FPGA器件内部的 ，当需要使用处理器进行设计时，则使用FPGA的逻辑资源例化一个Microblaze软核，这样FPGA内部就有了一个CPU和其他可以自由配置的逻辑资源，CPU与逻辑电路在FPGA内部连接，使设计更加方便灵活。</p><p>MicroBlaze™ CPU 是嵌入式、可修改预置 32 位 &#x2F; 64 位 RISC 微处理器配置系列。系统设计者可在没有任何 FPGA 经验的情况下，利用 2019.2 中的 Vitis™ Core 开发套件或使用 2019.1 或更早版本中基于 Eclipse 的 Xilinx 软件开发套件 (SDK)，进行MicroBlaze 处理器的开发。</p><p>这里采用的Vivado版本为2081.3，使用SDK进行Microblaze软核的开发。</p><p>开发的流程如下：</p><h2 id="1-添加Microblaze软处理器核"><a href="#1-添加Microblaze软处理器核" class="headerlink" title="1.添加Microblaze软处理器核"></a>1.添加Microblaze软处理器核</h2><h2 id="2-配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。"><a href="#2-配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。" class="headerlink" title="2.配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。"></a>2.配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。</h2><h2 id="3-添加设计所需要的IP核"><a href="#3-添加设计所需要的IP核" class="headerlink" title="3.添加设计所需要的IP核"></a>3.添加设计所需要的IP核</h2><p>Vivado提供了众多的IP核用于嵌入式开发，如GPIO控制器、串口UART、中断控制器、块RAM接口控制器、中央DMA控制器、ADC\DAC、IIC总线接口等等。</p><p>此外，对于自己设计的逻辑电路也可以配置为IP核，与Microblaze软处理器连接，实现处理器对电路的控制。</p><h2 id="4-进行管脚约束"><a href="#4-进行管脚约束" class="headerlink" title="4. 进行管脚约束"></a>4. 进行管脚约束</h2><h2 id="5-完成硬件设计，导出硬件设计文件"><a href="#5-完成硬件设计，导出硬件设计文件" class="headerlink" title="5.完成硬件设计，导出硬件设计文件"></a>5.完成硬件设计，导出硬件设计文件</h2><h2 id="6-进行SDK软件开发"><a href="#6-进行SDK软件开发" class="headerlink" title="6.进行SDK软件开发"></a>6.进行SDK软件开发</h2><h2 id="7-下载硬件设计到FPGA，调试软件代码"><a href="#7-下载硬件设计到FPGA，调试软件代码" class="headerlink" title="7.下载硬件设计到FPGA，调试软件代码"></a>7.下载硬件设计到FPGA，调试软件代码</h2>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>Verilog</tag>
      
      <tag>Microblaze</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPGA常用基础模块</title>
    <link href="/2023/07/03/FPGA%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97/"/>
    <url>/2023/07/03/FPGA%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>数字电路中常用基础模块</p><span id="more"></span><h1 id="FPGA常用基础模块"><a href="#FPGA常用基础模块" class="headerlink" title="FPGA常用基础模块"></a>FPGA常用基础模块</h1><p>列举一些比较典型的数字电路，包括组合逻辑电路和时序逻辑电路。体现一定的Verilog语法与编程技巧。同时这些模块也是作为实际电路设计中比较通用的模块。</p><h2 id="组合逻辑电路"><a href="#组合逻辑电路" class="headerlink" title="组合逻辑电路"></a>组合逻辑电路</h2><h3 id="1-8-1数据选择器"><a href="#1-8-1数据选择器" class="headerlink" title="1.  8-1数据选择器"></a>1.  8-1数据选择器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> choose(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] A, <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] D,<br>    <span class="hljs-keyword">output</span> Y<br>    );<br><span class="hljs-keyword">reg</span> y_temp;<br><span class="hljs-keyword">always</span> @(A <span class="hljs-keyword">or</span> D)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">case</span>(A)<br><span class="hljs-number">3&#x27;b000</span>: y_temp = D[<span class="hljs-number">0</span>];<br><span class="hljs-number">3&#x27;b001</span>: y_temp = D[<span class="hljs-number">1</span>];<br><span class="hljs-number">3&#x27;b010</span>: y_temp = D[<span class="hljs-number">2</span>];<br><span class="hljs-number">3&#x27;b011</span>: y_temp = D[<span class="hljs-number">3</span>];<br><span class="hljs-number">3&#x27;b100</span>: y_temp = D[<span class="hljs-number">4</span>];<br><span class="hljs-number">3&#x27;b101</span>: y_temp = D[<span class="hljs-number">5</span>];<br><span class="hljs-number">3&#x27;b110</span>: y_temp = D[<span class="hljs-number">6</span>];<br><span class="hljs-keyword">default</span>: y_temp = D[<span class="hljs-number">7</span>];<br><span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">assign</span> Y = y_temp;  <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="2-3-8译码器"><a href="#2-3-8译码器" class="headerlink" title="2. 3-8译码器"></a>2. 3-8译码器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> Tran_3_8(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] In,<br>    <span class="hljs-keyword">input</span> EN, <span class="hljs-comment">//使能信号</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] Out<br>    );<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] Out_temp;<br><span class="hljs-keyword">always</span> @(In <span class="hljs-keyword">or</span> EN)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(~EN)<br><span class="hljs-keyword">case</span>(In)<br><span class="hljs-number">3&#x27;b000</span>: Out_temp = <span class="hljs-number">8&#x27;b0111_1111</span>;<br><span class="hljs-number">3&#x27;b001</span>: Out_temp = <span class="hljs-number">8&#x27;b1011_1111</span>;<br><span class="hljs-number">3&#x27;b010</span>: Out_temp = <span class="hljs-number">8&#x27;b1101_1111</span>;<br><span class="hljs-number">3&#x27;b011</span>: Out_temp = <span class="hljs-number">8&#x27;b1110_1111</span>;<br><span class="hljs-number">3&#x27;b100</span>: Out_temp = <span class="hljs-number">8&#x27;b1111_0111</span>;<br><span class="hljs-number">3&#x27;b101</span>: Out_temp = <span class="hljs-number">8&#x27;b1111_1011</span>;<br><span class="hljs-number">3&#x27;b110</span>: Out_temp = <span class="hljs-number">8&#x27;b1111_1101</span>;<br><span class="hljs-number">3&#x27;b111</span>: Out_temp = <span class="hljs-number">8&#x27;b1111_1110</span>;<br><span class="hljs-keyword">default</span>: Out_temp = <span class="hljs-number">8&#x27;b1111_1111</span>;<br><span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">else</span><br>Out_temp = <span class="hljs-number">8&#x27;b1111_1111</span>;<br><span class="hljs-keyword">end</span>                                                               <br><span class="hljs-keyword">assign</span> Out = Out_temp;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="时序逻辑电路"><a href="#时序逻辑电路" class="headerlink" title="时序逻辑电路"></a>时序逻辑电路</h2><h3 id="1-D触发器"><a href="#1-D触发器" class="headerlink" title="1. D触发器"></a>1. D触发器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> DFF(S,R,D,CLK,Q,qn);<br>    <br><span class="hljs-keyword">input</span> S,R,D,CLK;<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> Q;<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> qn;<br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> CLK <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> S <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> R)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(!R) <span class="hljs-keyword">begin</span> Q &lt;= <span class="hljs-number">1&#x27;b0</span>; qn &lt;= <span class="hljs-number">1&#x27;b1</span>; <span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!S) <span class="hljs-keyword">begin</span> Q &lt;= <span class="hljs-number">1&#x27;b1</span>; qn &lt;= <span class="hljs-number">1&#x27;b0</span>; <span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span> Q &lt;= D; qn &lt;= ~D; <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="2-模M同步二进制加法计数器"><a href="#2-模M同步二进制加法计数器" class="headerlink" title="2. 模M同步二进制加法计数器"></a>2. 模M同步二进制加法计数器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> cnt_M(clk,rst,cnt);<br><br><span class="hljs-keyword">parameter</span> M = <span class="hljs-number">1024</span>;        <span class="hljs-comment">//M mo</span><br><span class="hljs-keyword">parameter</span> N = <span class="hljs-number">10</span>;          <span class="hljs-comment">//N wei count</span><br><br><span class="hljs-keyword">input</span> clk,rst;<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]cnt;<br><br><span class="hljs-comment">//M wei 10 de count</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(!rst) cnt &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt &lt; M-<span class="hljs-number">1</span>) cnt &lt;= cnt + <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">else</span> cnt &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="3-分频电路"><a href="#3-分频电路" class="headerlink" title="3. 分频电路"></a>3. 分频电路</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> Div_Clk(clk,rst,led);<br><br><span class="hljs-keyword">input</span> clk, rst;<br><span class="hljs-keyword">output</span> Div; <br><br><span class="hljs-keyword">reg</span>  [<span class="hljs-number">25</span>:<span class="hljs-number">0</span>]  cnt; <span class="hljs-comment">//计数值</span><br><span class="hljs-keyword">parameter</span> CNT = <span class="hljs-number">32&#x27;d10</span>;  <span class="hljs-comment">//周期为CNT</span><br><span class="hljs-keyword">parameter</span> Half_CNT = <span class="hljs-number">32&#x27;d5</span>;  <span class="hljs-comment">//周期的一半</span><br><span class="hljs-comment">//实际为一个计数器    </span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst) cnt &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt == CNT-<span class="hljs-number">1</span>)  cnt&lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>  cnt &lt;= cnt + <span class="hljs-number">1&#x27;b1</span>; <br><span class="hljs-keyword">end</span><br>    <br><span class="hljs-keyword">assign</span> led = (cnt &lt; Half_CNT-<span class="hljs-number">1</span>) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br>    <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="4-有限状态机"><a href="#4-有限状态机" class="headerlink" title="4. 有限状态机"></a>4. 有限状态机</h3><p>状态机一般包括组合逻辑电路和寄存器两部分。</p><p>状态机的下一个状态的输出不仅与输入信号有关，还与寄存器当前状态有关。</p><p>状态机可以分为米勒（Mealy）型和摩尔（Moore）型。</p><p>Mealy型状态机的输出是当前状态和输入信号的函数，Moore型状态机的输出仅是当前状态的函数。</p><p>下面是一个三段式Moore型状态机。</p><p>在编写一个状态机之前，首先要绘制对应时序逻辑的状态转移图，然后根据状态转移图，编写程序。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> TOP(rst,clk,yout);<br><br><span class="hljs-keyword">input</span> rst,clk;<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] yout;<br><br><span class="hljs-keyword">parameter</span> s0 = <span class="hljs-number">3&#x27;b100</span>, s1 = <span class="hljs-number">3&#x27;b010</span>, s2 = <span class="hljs-number">3&#x27;b001</span>;<span class="hljs-comment">//定义状态机中的所有状态</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] next_state;<br><br><span class="hljs-comment">//第一个always块，完成状态转换</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(!rst)  state &lt;= s0;<br><span class="hljs-keyword">else</span> state &lt;= next_state;<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//第二个always块，完成状态机的内部逻辑</span><br><span class="hljs-keyword">always</span> @(state <span class="hljs-keyword">or</span> next state)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">case</span>(state)<br>        s0: next_state &lt;= s1;<br>        s1: next_state &lt;= s2;<br>        s2: next_state &lt;= s0;<br>        <span class="hljs-keyword">default</span>: next_state &lt;= s0;<br>    <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//状态机的外部输出</span><br><span class="hljs-keyword">always</span> @(*)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">case</span>(state)<br>        s0: yout &lt;= <span class="hljs-number">2&#x27;b00</span>;<br>        s1: yout &lt;= <span class="hljs-number">2&#x27;b01</span>;<br>        s2: yout &lt;= <span class="hljs-number">2&#x27;b10</span>;<br>        <span class="hljs-keyword">default</span>: yout &lt;= <span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用方法</title>
    <link href="/2023/06/28/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2023/06/28/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>git使用方法</p><span id="more"></span><h1 id="Git使用方法"><a href="#Git使用方法" class="headerlink" title="Git使用方法"></a>Git使用方法</h1><p>git：分布式版本控制系统</p><h2 id="Git与GIithub远程仓库连接（配置SSH）"><a href="#Git与GIithub远程仓库连接（配置SSH）" class="headerlink" title="Git与GIithub远程仓库连接（配置SSH）"></a>Git与GIithub远程仓库连接（配置SSH）</h2><p>（ssh是一种网络协议，用于计算机之间的加密登录）</p><p>以下为成功安装git后的操作</p><h3 id="配置注册用户名和注册邮箱"><a href="#配置注册用户名和注册邮箱" class="headerlink" title="配置注册用户名和注册邮箱"></a>配置注册用户名和注册邮箱</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;xxx&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;xxx.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><h3 id="生成SSH"><a href="#生成SSH" class="headerlink" title="生成SSH"></a>生成SSH</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;邮箱&quot;</span><br></code></pre></td></tr></table></figure><h3 id="获取公钥"><a href="#获取公钥" class="headerlink" title="获取公钥"></a>获取公钥</h3><p>SSH文件存放于C:&#x2F;User&#x2F;用户&#x2F;.ssh，其中id_rsa为私钥，id_rsa.pub为公钥。</p><p>复制公钥，在GitHub-&gt;Setting-&gt;SSH and GPG keys-&gt;New SSH key，创建一个新的SSH key。</p><p>测试SSH连接</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><h2 id="推送文章到远程仓库"><a href="#推送文章到远程仓库" class="headerlink" title="推送文章到远程仓库"></a>推送文章到远程仓库</h2><h3 id="在Github上建立新仓库"><a href="#在Github上建立新仓库" class="headerlink" title="在Github上建立新仓库"></a>在Github上建立新仓库</h3><p>“+”-&gt;New respository</p><h3 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h3><p>在目录中新建一个文件夹Git，右键选择Git bash here，执行命令</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>将Git文件夹初始化为一个仓库，此时Git文件夹下会出现一个隐藏的.git文件夹。</p><h3 id="将远程仓库克隆到本地"><a href="#将远程仓库克隆到本地" class="headerlink" title="将远程仓库克隆到本地"></a>将远程仓库克隆到本地</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:用户名/仓库名.git<br></code></pre></td></tr></table></figure><h3 id="管理仓库中文件"><a href="#管理仓库中文件" class="headerlink" title="管理仓库中文件"></a>管理仓库中文件</h3><h3 id="命令add"><a href="#命令add" class="headerlink" title="命令add"></a>命令add</h3><p>在仓库文件夹下git bash here，执行命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> 单个文件<br>git <span class="hljs-built_in">add</span> 文件夹1/ 文件夹2/ <span class="hljs-built_in">..</span>.<br>git <span class="hljs-built_in">add</span> .<br></code></pre></td></tr></table></figure><h3 id="命令commit"><a href="#命令commit" class="headerlink" title="命令commit"></a>命令commit</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;注释&quot;</span><br></code></pre></td></tr></table></figure><h3 id="命令push"><a href="#命令push" class="headerlink" title="命令push"></a>命令push</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></figure><p>至此，便完成了“远程仓库的建立-&gt;本地仓库克隆-&gt;管理仓库-&gt;推送本地仓库到远程”的过程。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毕设Matlab笔记</title>
    <link href="/2023/06/26/%E6%AF%95%E8%AE%BEMatlab%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/26/%E6%AF%95%E8%AE%BEMatlab%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>毕设Matlab笔记</p><span id="more"></span><h1 id="Matlab-笔记"><a href="#Matlab-笔记" class="headerlink" title="Matlab 笔记"></a>Matlab 笔记</h1><h2 id="一、PA建模"><a href="#一、PA建模" class="headerlink" title="一、PA建模"></a>一、PA建模</h2><p>本例使用NXP Airfast LDMOS Doherty PA，工作频率3.6-3.8 GHz，增益29 dB。</p><h2 id="1、无记忆非线性模型阅读"><a href="#1、无记忆非线性模型阅读" class="headerlink" title="1、无记忆非线性模型阅读"></a>1、无记忆非线性模型阅读</h2><p>导入原始测量的功放输入输出数据（复数形式）</p><p>对输入输出数据取绝对值，然后转换为dBm</p><p>对数据进行统计histcounts，直方图</p><p>求输入数据最大值-20</p><p>找出满足条件的边缘数据的位置</p><p>建立新的表格存储满足条件的数据值</p><p>分别求输入功率，输出功率，相移的平均值</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs matlab">sampleRate = <span class="hljs-number">860160000</span>;<br><br><span class="hljs-comment">%数据转换</span><br>paInputdBm  = mag2db(<span class="hljs-built_in">abs</span>(paInput)) + <span class="hljs-number">30</span> - <span class="hljs-number">20</span>;<br>paOutputdBm  = mag2db(<span class="hljs-built_in">abs</span>(paOutput)) + <span class="hljs-number">30</span> - <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">%准备建模数据</span><br>[N,edges,idx] = histcounts(paInputdBm, <span class="hljs-string">&#x27;BinWidth&#x27;</span>, <span class="hljs-number">0.5</span>);  <span class="hljs-comment">%hiscounts函数，直方图bin计数</span><br>minInPowerdBm = <span class="hljs-built_in">max</span>(paInputdBm) - <span class="hljs-number">20</span>;  <span class="hljs-comment">%输入功率值不能小于最大输入功率20db</span><br>minIdx = <span class="hljs-built_in">find</span>(edges &lt; minInPowerdBm, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;last&#x27;</span>);<br>tableLen = <span class="hljs-built_in">length</span>(edges)-minIdx<span class="hljs-number">-1</span>;<br>inOutTable = <span class="hljs-built_in">zeros</span>(tableLen,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> p = minIdx+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(edges)<span class="hljs-number">-1</span><br>inOutTable(p-minIdx,<span class="hljs-number">1</span>) = <span class="hljs-built_in">mean</span>(paInputdBm(idx == p));   <span class="hljs-comment">% Average input power for current bin</span><br>inOutTable(p-minIdx,<span class="hljs-number">2</span>) = <span class="hljs-built_in">mean</span>(paOutputdBm(idx == p));  <span class="hljs-comment">% Average output power for current bin</span><br>inOutTable(p-minIdx,<span class="hljs-number">3</span>) = <span class="hljs-built_in">mean</span>(<span class="hljs-built_in">angle</span>(paOutput(idx == p)./paInput(idx == p))); <span class="hljs-comment">% Average phase shift for current                                                                                       bin</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%建立模型</span><br>pa = comm.MemorylessNonlinearity(<span class="hljs-string">&#x27;Method&#x27;</span>,<span class="hljs-string">&#x27;Lookup table&#x27;</span>,<span class="hljs-string">&#x27;Table&#x27;</span>,inOutTable,<span class="hljs-string">&#x27;ReferenceImpedance&#x27;</span>,<span class="hljs-number">100</span>);<br><br><span class="hljs-comment">%计算模型输出</span><br>paOutputFitMemless = pa(paInput);<br><span class="hljs-comment">%计算误差</span><br>err = <span class="hljs-built_in">abs</span>(paOutput - paOutputFitMemless)./<span class="hljs-built_in">abs</span>(paOutput);<br>rmsErrorMemless = rms(err)*<span class="hljs-number">100</span>;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;Percent RMS error in time domain is &#x27;</span> num2str(rmsErrorMemless) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><span class="hljs-comment">%绘制图形观察</span><br>helperPACharPlotTime(paOutput, paOutputFitMemless, sampleRate);<br>helperPACharPlotGain(paInput, paOutput, paOutputFitMemless);<br><br></code></pre></td></tr></table></figure><h2 id="2、记忆多项式模型阅读"><a href="#2、记忆多项式模型阅读" class="headerlink" title="2、记忆多项式模型阅读"></a>2、记忆多项式模型阅读</h2><p>程序阅读</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs matlab">modType = <span class="hljs-string">&#x27;memPoly&#x27;</span>; <span class="hljs-comment">%记忆多项式模型</span><br>memLen = <span class="hljs-number">5</span>;     <span class="hljs-comment">% M = 5</span><br>degLen = <span class="hljs-number">5</span>;     <span class="hljs-comment">% K = 5</span><br>numDataPts = <span class="hljs-built_in">length</span>(paInput);<br>halfDataPts = <span class="hljs-built_in">round</span>(numDataPts/<span class="hljs-number">2</span>);<br>fitCoefMatMem = helperPACharMemPolyModel(<span class="hljs-string">&#x27;coefficientFinder&#x27;</span>,paInput(<span class="hljs-number">1</span>:halfDataPts),paOutput(<span class="hljs-number">1</span>:halfDataPts),memLen,degLen,modType);<br><span class="hljs-built_in">disp</span>(<span class="hljs-built_in">abs</span>(fitCoefMatMem));<br><br>rmsErrorTimeMem = helperPACharMemPolyModel(<span class="hljs-string">&#x27;errorMeasure&#x27;</span>,paInput, paOutput, fitCoefMatMem, modType);<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;Percent RMS error in time domain is &#x27;</span> num2str(rmsErrorTimeMem) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br>paOutputFitMem = helperPACharMemPolyModel(<span class="hljs-string">&#x27;signalGenerator&#x27;</span>, paInput, fitCoefMatMem, modType);<br><br>helperPACharPlotTime(paOutput, paOutputFitMem, sampleRate);<br>helperPACharPlotGain(paInput, paOutput, paOutputFitMem);<br><br><br><br></code></pre></td></tr></table></figure><p>我的程序</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%x = (0 : 3);</span><br>x = paInput;<br>x = x(:);<br>xLength = <span class="hljs-built_in">length</span>(x);<br><br><span class="hljs-comment">%y = (2 : 5);</span><br>y = paOutput;<br>y = y(:);<br>yLength = <span class="hljs-built_in">length</span>(y);<br><br>M = <span class="hljs-number">3</span>;<br>K = <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">%构造(x(n) - m)矩阵，m从0到M-1, 矩阵大小为xLength*M</span><br>xm = x;<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">0</span> : M - <span class="hljs-number">1</span><br>    xm(M:xLength , m+<span class="hljs-number">1</span>) = xm(M-m:xLength-m , <span class="hljs-number">1</span>) ;<br><span class="hljs-keyword">end</span><br>xm_fix = xm; <span class="hljs-comment">%保存(x(n) - m)矩阵</span><br><br><span class="hljs-comment">%构造(x(n) - m) * |x(n) - m|^k 矩阵，矩阵大小为(xLength-M+1)*（M*K）</span><br>xmAbs = <span class="hljs-built_in">abs</span>(xm);<span class="hljs-comment">%保存|x - m|矩阵</span><br><span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span> : K<span class="hljs-number">-1</span><br>    mid = (xmAbs.^ k) .* xm_fix;<br>    xm = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>, xm, mid);<br><span class="hljs-keyword">end</span><br>xmk = xm(M:xLength,:);<br><br><span class="hljs-comment">%计算系数矩阵，矩阵大小为（M*K） * 1</span><br>coef = xmk \ y(M:xLength);<br><br><span class="hljs-comment">%带入求解yout矩阵，矩阵大小为xLength*1</span><br>yout = xm * coef;<br><br><span class="hljs-comment">% helperPACharPlotTime(y, yout, 860160000);</span><br><span class="hljs-comment">% helperPACharPlotGain(x, y, yout);</span><br><br><br><span class="hljs-comment">%通过归一化均方误差衡量功放的建模精度</span><br>NMSE = <span class="hljs-number">10</span> * <span class="hljs-built_in">log10</span>( sum ( (<span class="hljs-built_in">abs</span>(y - yout)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(y).^<span class="hljs-number">2</span>) ) ) ;<br><br><br><br><span class="hljs-comment">%AM/AM图绘制</span><br><span class="hljs-comment">%单位转换</span><br>paInputPowerdBm = mag2db(<span class="hljs-built_in">abs</span>(x)) + <span class="hljs-number">30</span> - <span class="hljs-number">20</span>;<br>paOutputPowerdBm = mag2db(<span class="hljs-built_in">abs</span>(y)) + <span class="hljs-number">30</span> - <span class="hljs-number">20</span>;<br>paOutputPowerFitdBm = mag2db(<span class="hljs-built_in">abs</span>(yout)) + <span class="hljs-number">30</span> - <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">%去除噪点</span><br>inputPowerRange = <span class="hljs-number">20</span>;<br>idxToDiscard = paInputPowerdBm &lt; (<span class="hljs-built_in">max</span>(paInputPowerdBm)-inputPowerRange);<span class="hljs-comment">%去除掉与最大输入功率相差20的点</span><br><br>paInputPowerdBm(idxToDiscard) = [];<br>paOutputPowerdBm(idxToDiscard) = [];<br>paOutputPowerFitdBm(idxToDiscard) = [];<br><br><span class="hljs-built_in">plot</span>(paInputPowerdBm, paOutputPowerdBm, <span class="hljs-string">&#x27;o&#x27;</span>, paInputPowerdBm,paOutputPowerFitdBm, <span class="hljs-string">&#x27;.&#x27;</span>)<br>grid on<br>xlabel(<span class="hljs-string">&#x27;Input Power (dBm)&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;Output Power (dBm)&#x27;</span>)<br>title(<span class="hljs-string">&#x27;AM/AM&#x27;</span>)<br><br><span class="hljs-comment">%AM/PM图绘制</span><br>paInputPhase = <span class="hljs-built_in">angle</span>(x);<br>paOutputPhase = <span class="hljs-built_in">angle</span>(y);<br>paOutputPhaseFit = <span class="hljs-built_in">angle</span>(yout);<br><br>paInputPhase(idxToDiscard) = [];<br>paOutputPhase(idxToDiscard) = [];<br>paOutputPhaseFit(idxToDiscard) = [];<br><br>paPhaseChange =  paInputPhase - paOutputPhase;<br>paPhaseChangeFit =paOutputPhaseFit - paOutputPhase;<br><br><span class="hljs-comment">%将角度集中在-pi-pi之间</span><br>lambdaWrapped = wrapToPi(paPhaseChange);<br>lambdaWrapped2 = wrapToPi(paPhaseChangeFit);<br><br><span class="hljs-built_in">plot</span>(paInputPowerdBm, lambdaWrapped, <span class="hljs-string">&#x27;o&#x27;</span>, paInputPowerdBm,lambdaWrapped2, <span class="hljs-string">&#x27;.&#x27;</span>)<br>grid on<br>xlabel(<span class="hljs-string">&#x27;Input Power (dBm)&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;Phase Change&#x27;</span>)<br>title(<span class="hljs-string">&#x27;AM/PM&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="我的程序"><a href="#我的程序" class="headerlink" title="我的程序"></a>我的程序</h2><h3 id="1、毕设论文1-矩阵处理函数"><a href="#1、毕设论文1-矩阵处理函数" class="headerlink" title="1、毕设论文1_矩阵处理函数"></a>1、毕设论文1_矩阵处理函数</h3><h4 id="1、改进后模型"><a href="#1、改进后模型" class="headerlink" title="1、改进后模型"></a>1、改进后模型</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[Xout]</span> = <span class="hljs-title">MatrixDeal</span><span class="hljs-params">(x,M,K)</span></span><br><br><br><span class="hljs-comment">%构造x(n - m)矩阵，m从1到M, 矩阵大小为xLength*M,有效长度为Xlength-M</span><br>xnm = x;<br>xhalfLength = <span class="hljs-built_in">length</span>(xnm);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">1</span> : M<br>    xnm(M+<span class="hljs-number">1</span>:xhalfLength , m) = x(M-m+<span class="hljs-number">1</span>:xhalfLength-m , <span class="hljs-number">1</span>) ;  <span class="hljs-comment">%(m从1-M)</span><br><span class="hljs-keyword">end</span><br><br>xnm_fix = xnm; <span class="hljs-comment">%保存x(n - m)矩阵</span><br>xnm_fixabs = <span class="hljs-built_in">abs</span>(xnm_fix);<span class="hljs-comment">%保存 |x(n - m)| 矩阵</span><br><br>xn_fix = x;<span class="hljs-comment">%保存 x(n) 矩阵</span><br>xn_fixabs = <span class="hljs-built_in">abs</span>(xn_fix);<span class="hljs-comment">%保存 |x(n)| 矩阵</span><br><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-comment">%m从0开始到M</span><br>xnm_0 = x;<br>xhalfLength = <span class="hljs-built_in">length</span>(xnm_0);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">0</span> : M<br>    xnm_0(M+<span class="hljs-number">1</span>:xhalfLength , m+<span class="hljs-number">1</span>) = x(M-m+<span class="hljs-number">1</span>:xhalfLength-m , <span class="hljs-number">1</span>) ;  <span class="hljs-comment">%(m从1-M)</span><br><span class="hljs-keyword">end</span><br>xnm_fix_0 = xnm_0; <span class="hljs-comment">%保存x(n - m)矩阵</span><br>xnm_fixabs_0 = <span class="hljs-built_in">abs</span>(xnm_fix_0);<span class="hljs-comment">%保存 |x(n - m)| 矩阵</span><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><br><span class="hljs-comment">%构造Bk矩阵</span><br>Bk = (<span class="hljs-number">0</span>:K<span class="hljs-number">-1</span>);<br>Bk = Bk/K;<br><br><br><span class="hljs-comment">%f0</span><br><span class="hljs-comment">%构造 x(n-m)矩阵，矩阵大小为xLength * (M*k)</span><br><span class="hljs-comment">% X1 = xnm_fix(M+1:xhalfLength,:);</span><br><br>X1 = xnm_fix_0(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><span class="hljs-comment">%F21</span><br><span class="hljs-comment">%构造| ( |x(n-m)| - Bk ) | * x(n - m) * |x(n)| 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_F21 = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xnm_fix .* xn_fixabs;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(k) ) .* xnm_fix .* xn_fixabs;<br>    xmk_F21 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_F21,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X2 = xmk_F21(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%f22</span><br><span class="hljs-comment">%构造 | ( |x(n-m)| - Bk ) | * x(n) 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f22 = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xn_fix;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(k) ) .* xn_fix;<br>    xmk_f22 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f22,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X3 = xmk_f22(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%F23</span><br><span class="hljs-comment">%构造  | ( |x(n-m)| - Bk ) | * x(n-m) 矩阵，矩阵大小为xLength * (M*k)</span><br><span class="hljs-comment">% xmk_F23 = abs( xnm_fixabs - Bk(1) ) .* xnm_fix;</span><br><span class="hljs-comment">% for k = 2 : K</span><br><span class="hljs-comment">%     mid = abs( xnm_fixabs - Bk(k) ) .* xnm_fix;</span><br><span class="hljs-comment">%     xmk_F23 = cat(2,xmk_F23,mid);</span><br><span class="hljs-comment">% end</span><br><span class="hljs-comment">% %矩阵大小为(xLength-M) * (M*K)</span><br><span class="hljs-comment">% X4 = xmk_F23(M+1:xhalfLength,:);</span><br><br><br><br>xmk_F23 = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(<span class="hljs-number">1</span>) ) .* xnm_fix_0;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(k) ) .* xnm_fix_0;<br>    xmk_F23 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_F23,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X4 = xmk_F23(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%f24</span><br><span class="hljs-comment">%构造 | ( |x(n)| - Bk ) | * x(n-m) 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f24 = <span class="hljs-built_in">abs</span>( xn_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xnm_fix;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xn_fixabs - Bk(k) ) .* xnm_fix;<br>    xmk_f24 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f24,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X5 = xmk_f24(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%合并矩阵，矩阵大小为(xLength-M) *（M*K*4+M） </span><br>Xout = [X1 X2 X3 X4 X5];<br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="2、DVR模型"><a href="#2、DVR模型" class="headerlink" title="2、DVR模型"></a>2、DVR模型</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[Xout]</span> = <span class="hljs-title">MatrixDeal_DVR</span><span class="hljs-params">(x,M,K)</span></span><br><br><br><span class="hljs-comment">%构造x(n - m)矩阵，m从1到M, 矩阵大小为xLength*M,有效长度为Xlength-M-1</span><br>xnm = x;<br>xhalfLength = <span class="hljs-built_in">length</span>(xnm);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">1</span> : M<br>    xnm(M+<span class="hljs-number">1</span>:xhalfLength , m) = x(M-m+<span class="hljs-number">1</span>:xhalfLength-m , <span class="hljs-number">1</span>) ;<br><span class="hljs-keyword">end</span><br><br>xnm_fix = xnm; <span class="hljs-comment">%保存x(n - m)矩阵</span><br>xnm_fixabs = <span class="hljs-built_in">abs</span>(xnm_fix);<span class="hljs-comment">%保存 |x(n - m)| 矩阵</span><br>    <br>xn_fix = x;<span class="hljs-comment">%保存 x(n) 矩阵</span><br>xn_fixabs = <span class="hljs-built_in">abs</span>(xn_fix);<span class="hljs-comment">%保存 |x(n)| 矩阵</span><br><br><span class="hljs-comment">%构造Bk矩阵</span><br>Bk = (<span class="hljs-number">0</span>:K<span class="hljs-number">-1</span>);<br>Bk = Bk/K;<br><br><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-comment">%m从0开始到M</span><br>xnm_0 = x;<br>xhalfLength = <span class="hljs-built_in">length</span>(xnm_0);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">0</span> : M<br>    xnm_0(M+<span class="hljs-number">1</span>:xhalfLength , m+<span class="hljs-number">1</span>) = x(M-m+<span class="hljs-number">1</span>:xhalfLength-m , <span class="hljs-number">1</span>) ;  <span class="hljs-comment">%(m从1-M)</span><br><span class="hljs-keyword">end</span><br>xnm_fix_0 = xnm_0; <span class="hljs-comment">%保存x(n - m)矩阵</span><br>xnm_fixabs_0 = <span class="hljs-built_in">abs</span>(xnm_fix_0);<span class="hljs-comment">%保存 |x(n - m)| 矩阵</span><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><br><br><span class="hljs-comment">% %构造xAngle(n-m)矩阵</span><br><span class="hljs-comment">% xAngle = angle(xnm);</span><br><span class="hljs-comment">% for m = 1 : M</span><br><span class="hljs-comment">%     xAngle(M+1:xhalfLength , m) = xAngle(M-m+1:xhalfLength-m , 1) ;</span><br><span class="hljs-comment">% end</span><br><span class="hljs-comment">% xAngle_fix = 1i * xAngle;%保存i * xAngle(n-m)矩阵</span><br><br><span class="hljs-comment">%构造xAngle(n-m)矩阵</span><br>xAngle = <span class="hljs-built_in">angle</span>(xnm);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">0</span> : M<br>    xAngle(M+<span class="hljs-number">1</span>:xhalfLength , m+<span class="hljs-number">1</span>) = xAngle(M-m+<span class="hljs-number">1</span>:xhalfLength-m , <span class="hljs-number">1</span>) ;<br><span class="hljs-keyword">end</span><br>xAngle_fix = <span class="hljs-number">1</span><span class="hljs-built_in">i</span> * xAngle;<span class="hljs-comment">%保存i * xAngle(n-m)矩阵</span><br><br><span class="hljs-comment">%f0</span><br><span class="hljs-comment">%构造 x(n-m)矩阵，矩阵大小为xLength * (M*k)</span><br><span class="hljs-comment">% X1 = xnm_fix(M+1:xhalfLength,:);</span><br><br>X1 = xnm_fix_0(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><span class="hljs-comment">% %f1</span><br><span class="hljs-comment">% %构造 | ( |x(n-m)| - Bk ) | * e^(xAngle_fix) 矩阵</span><br><span class="hljs-comment">% xmk_f1 = abs( xnm_fixabs - Bk(1) ) .* exp(xAngle_fix);</span><br><span class="hljs-comment">% for k = 2 : K</span><br><span class="hljs-comment">%     mid = abs( xnm_fixabs - Bk(k) ) .* exp(xAngle_fix);</span><br><span class="hljs-comment">%     xmk_f1 = cat(2,xmk_f1,mid);</span><br><span class="hljs-comment">% end</span><br><span class="hljs-comment">% X2 = xmk_f1(M+1:xhalfLength,:);</span><br><br><span class="hljs-comment">%f1</span><br><span class="hljs-comment">%构造 | ( |x(n-m)| - Bk ) | * e^(xAngle_fix) 矩阵</span><br>xmk_f1 = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(<span class="hljs-number">1</span>) ) .* <span class="hljs-built_in">exp</span>(xAngle_fix);<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(k) ) .* <span class="hljs-built_in">exp</span>(xAngle_fix);<br>    xmk_f1 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f1,mid);<br><span class="hljs-keyword">end</span><br>X2 = xmk_f1(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">% %f21</span><br><span class="hljs-comment">% %构造| ( |x(n-m)| - Bk ) | * e^(xAngle_fix) * |x(n)| 矩阵，矩阵大小为xLength * (M*k)</span><br><span class="hljs-comment">% xmk_f21 = abs( xnm_fixabs - Bk(1) ) .* exp(xAngle_fix) .* xn_fixabs;</span><br><span class="hljs-comment">% for k = 2 : K</span><br><span class="hljs-comment">%     mid = abs( xnm_fixabs - Bk(k) ) .* exp(xAngle_fix) .* xn_fixabs;</span><br><span class="hljs-comment">%     xmk_f21 = cat(2,xmk_f21,mid);</span><br><span class="hljs-comment">% end</span><br><span class="hljs-comment">% %矩阵大小为(xLength-M) * (M*K)</span><br><span class="hljs-comment">% X3 = xmk_f21(M+1:xhalfLength,:);</span><br><br><span class="hljs-comment">%f21</span><br><span class="hljs-comment">%构造| ( |x(n-m)| - Bk ) | * e^(xAngle_fix) * |x(n)| 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f21 = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(<span class="hljs-number">1</span>) ) .* <span class="hljs-built_in">exp</span>(xAngle_fix) .* xn_fixabs;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(k) ) .* <span class="hljs-built_in">exp</span>(xAngle_fix) .* xn_fixabs;<br>    xmk_f21 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f21,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X3 = xmk_f21(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%f22</span><br><span class="hljs-comment">%构造| ( |x(n-m)| - Bk ) | * x(n) 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f22 = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xn_fix;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(k) ) .* xn_fix;<br>    xmk_f22 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f22,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X4 = xmk_f22(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%f23</span><br><span class="hljs-comment">%构造| ( |x(n-m)| - Bk ) | * x(n-m) 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f23 = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xnm_fix;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(k) ) .* xnm_fix;<br>    xmk_f23 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f23,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X5 = xmk_f23(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%f24</span><br><span class="hljs-comment">%构造 | ( |x(n-m)| - Bk ) | * x(n-m) 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f24 = <span class="hljs-built_in">abs</span>( xn_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xnm_fix;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xn_fixabs - Bk(k) ) .* xnm_fix;<br>    xmk_f24 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f24,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X6 = xmk_f24(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><span class="hljs-comment">%合并矩阵，矩阵大小为(xLength-M) *（M*K*4+M） </span><br>Xout = [X1 X2 X3 X4 X5 X6];<br><br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="3、记忆多项式"><a href="#3、记忆多项式" class="headerlink" title="3、记忆多项式"></a>3、记忆多项式</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[Xout]</span> = <span class="hljs-title">MatrixDeal_MP</span><span class="hljs-params">(x,M,K)</span></span><br><span class="hljs-comment">%UNTITLED 此处提供此函数的摘要</span><br><span class="hljs-comment">%   此处提供详细说明</span><br><br><br><span class="hljs-comment">%构造(x(n) - m)矩阵，m从0到M-1, 矩阵大小为xLength*M</span><br>xm = x;<br>xmLength = <span class="hljs-built_in">length</span>(xm);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">0</span> : M - <span class="hljs-number">1</span><br>    xm(M:xmLength , m+<span class="hljs-number">1</span>) = xm(M-m:xmLength-m , <span class="hljs-number">1</span>) ;<span class="hljs-comment">%有效数据从第M行开始</span><br><span class="hljs-keyword">end</span><br>xm_fix = xm; <span class="hljs-comment">%保存(x(n) - m)矩阵</span><br><br><span class="hljs-comment">%构造(x(n) - m) * |x(n) - m|^k 矩阵，矩阵大小为(xLength-M+1)*（M*K）</span><br>xmAbs = <span class="hljs-built_in">abs</span>(xm_fix);<span class="hljs-comment">%保存|x - m|矩阵</span><br><span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span> : K<span class="hljs-number">-1</span><br>    mid = (xmAbs.^ k) .* xm_fix;<br>    xm = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>, xm, mid);<br><span class="hljs-keyword">end</span><br>xmk = xm(M:xmLength,:);<br><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>Xout = xmk;<br><br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="2、毕设论文1-绘图函数"><a href="#2、毕设论文1-绘图函数" class="headerlink" title="2、毕设论文1_绘图函数"></a>2、毕设论文1_绘图函数</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span>   <span class="hljs-title">paCharPlot</span><span class="hljs-params">(paInput,paOutput,paOutputFit,Type)</span></span><br><br>paInputMagnitude = <span class="hljs-built_in">abs</span>(paInput) ;<br>paOutputMagnitude = <span class="hljs-built_in">abs</span>(paOutput) ;<br>paOutputMagnitudeFit = <span class="hljs-built_in">abs</span>(paOutputFit) ;<br><br>idxToDiscard = paOutputMagnitudeFit &gt; <span class="hljs-number">1</span> | paOutputMagnitude &gt; <span class="hljs-number">1</span>;<br>paInputMagnitude(idxToDiscard) = [];<br>paOutputMagnitude(idxToDiscard) = [];<br>paOutputMagnitudeFit(idxToDiscard) = [];<br><br>paGain = paOutputMagnitude - paInputMagnitude;<br>paGainFit = paOutputMagnitudeFit - paInputMagnitude;<br><br><br><span class="hljs-comment">%AM/PM图绘制</span><br>paInputPhase = <span class="hljs-built_in">angle</span>(paInput);<br>paOutputPhase = <span class="hljs-built_in">angle</span>(paOutput);<br>paOutputPhaseFit = <span class="hljs-built_in">angle</span>(paOutputFit);<br><br>paInputPhase(idxToDiscard) = [];<br>paOutputPhase(idxToDiscard) = [];<br>paOutputPhaseFit(idxToDiscard) = [];<br><br>paPhaseChange =  paInputPhase - paOutputPhase;<br>paPhaseChangeFit =paInputPhase - paOutputPhaseFit;<br><br><span class="hljs-comment">%将角度数据集中在-pi-pi之间</span><br>lambdaWrapped = wrapToPi(paPhaseChange);<br>lambdaWrappedFit = wrapToPi(paPhaseChangeFit);    <br><br><span class="hljs-comment">% lambdaWrapped = rad2deg(lambdaWrapped);</span><br><span class="hljs-comment">% lambdaWrapped2 = rad2deg(lambdaWrapped2);</span><br><br><br><span class="hljs-keyword">switch</span> Type<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;AM/AM&#x27;</span><br>        <span class="hljs-built_in">figure</span>;<br>        <span class="hljs-built_in">plot</span>(paInputMagnitude, paOutputMagnitude, <span class="hljs-string">&#x27;.&#x27;</span>, paInputMagnitude,paOutputMagnitudeFit, <span class="hljs-string">&#x27;.&#x27;</span>)<br>        grid on<br>        xlabel(<span class="hljs-string">&#x27;Input Magnitude&#x27;</span>)<br>        ylabel(<span class="hljs-string">&#x27;Output Magnitude&#x27;</span>)<br>        <span class="hljs-built_in">legend</span>(&#123;<span class="hljs-string">&#x27;Actual&#x27;</span>,<span class="hljs-string">&#x27;Model/Linear&#x27;</span>&#125;,<span class="hljs-string">&#x27;Location&#x27;</span>,<span class="hljs-string">&#x27;northwest&#x27;</span>)<br>        title(<span class="hljs-string">&#x27;AM/AM&#x27;</span>)<br><br><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;PM/AM&#x27;</span><br>        <span class="hljs-built_in">figure</span>;<br>        <span class="hljs-built_in">plot</span>(paInputMagnitude, lambdaWrapped, <span class="hljs-string">&#x27;.&#x27;</span>, paInputMagnitude,lambdaWrappedFit, <span class="hljs-string">&#x27;.&#x27;</span>)<br>        grid on<br>        xlabel(<span class="hljs-string">&#x27;Input Magnitude&#x27;</span>)<br>        ylabel(<span class="hljs-string">&#x27;Phase Change&#x27;</span>)<br>        <span class="hljs-built_in">legend</span>(&#123;<span class="hljs-string">&#x27;Actual&#x27;</span>,<span class="hljs-string">&#x27;Model/Linear&#x27;</span>&#125;,<span class="hljs-string">&#x27;Location&#x27;</span>,<span class="hljs-string">&#x27;northwest&#x27;</span>)<br>        title(<span class="hljs-string">&#x27;AM/PM&#x27;</span>)<br><br>       <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Gain&#x27;</span><br>        <span class="hljs-built_in">figure</span>;<br>        <span class="hljs-built_in">plot</span>(paInputMagnitude, paGain, <span class="hljs-string">&#x27;.&#x27;</span>, paInputMagnitude,paGainFit, <span class="hljs-string">&#x27;.&#x27;</span>)<br>        grid on<br>        xlabel(<span class="hljs-string">&#x27;Input Magnitude&#x27;</span>)<br>        ylabel(<span class="hljs-string">&#x27;Gain&#x27;</span>)<br>        <span class="hljs-built_in">legend</span>(&#123;<span class="hljs-string">&#x27;Actual&#x27;</span>,<span class="hljs-string">&#x27;Model/Linear&#x27;</span>&#125;,<span class="hljs-string">&#x27;Location&#x27;</span>,<span class="hljs-string">&#x27;northwest&#x27;</span>)<br>        title(<span class="hljs-string">&#x27;PA Gain&#x27;</span>)<br><br><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Couple&#x27;</span><br>        yyaxis left;<br>        <span class="hljs-built_in">plot</span>(paInputPowerdBm, paOutputPowerdBm, <span class="hljs-string">&#x27;o&#x27;</span>, paInputPowerdBm,paOutputPowerFitdBm, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        yyaxis right;<br>        <span class="hljs-built_in">plot</span>(paInputPowerdBm, lambdaWrapped, <span class="hljs-string">&#x27;o&#x27;</span>, paInputPowerdBm,lambdaWrapped2, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-built_in">hold</span> on<br><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="3、毕设论文1-模型建立"><a href="#3、毕设论文1-模型建立" class="headerlink" title="3、毕设论文1_模型建立"></a>3、毕设论文1_模型建立</h3><h4 id="1、改进后模型-1"><a href="#1、改进后模型-1" class="headerlink" title="1、改进后模型"></a>1、改进后模型</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%本例使用NXP Airfast LDMOS Doherty PA，工作频率3.6-3.8 GHz，增益29 dB。</span><br><span class="hljs-comment">%带宽100MHZ    100000000</span><br><span class="hljs-comment">%采样率sampleRate = 860160000</span><br><span class="hljs-comment">%信号类型OFDM</span><br><span class="hljs-comment">%If testSignal is &quot;OFDM&quot;, this example uses a 5G-like OFDM waveform with 64-QAM modulated signals for each subcarrier.</span><br><span class="hljs-comment">% If testSignal is &quot;Tones&quot;, this example uses two tones at 1.8 MHz and 2.6 MHz, to test the intermodulation caused by the PA.</span><br><br><br>sampleRate = <span class="hljs-number">860160000</span>;<br><span class="hljs-comment">% sampleRate = 430080000;</span><br>testSignal = <span class="hljs-string">&#x27;OFDM&#x27;</span>;<br><br><span class="hljs-comment">%读取数据</span><br><span class="hljs-comment">% x = (0 : 5);</span><br>x = paInput;<br><span class="hljs-comment">% x = txData1;</span><br><span class="hljs-comment">% x = paInput_40MHZ;</span><br>x = x(:);<br>xLength = <span class="hljs-built_in">length</span>(x);<br><span class="hljs-comment">%使用前半部分数据用于参数提取，后半部分数据用于模型验证</span><br>half = <span class="hljs-built_in">round</span>(xLength/<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">% y = (2 : 7);</span><br>y = paOutput;<br><span class="hljs-comment">% y = tout;</span><br><span class="hljs-comment">% y = paOutput_40MHZ;</span><br>y = y(:);<br>yLength = <span class="hljs-built_in">length</span>(y);<br><br><span class="hljs-comment">%将数据归一化</span><br><span class="hljs-comment">% x = x / abs(max(x));</span><br><span class="hljs-comment">% y = y / abs(max(y));</span><br><br>M = <span class="hljs-number">2</span>;<br>K = <span class="hljs-number">8</span>;<br><br><span class="hljs-comment">%计算PA系数矩阵，矩阵大小为（M*K*4+M） * 1</span><br><br><span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>XcoefPA = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <br>YcoefPA = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefPA = x(1:half);  </span><br><span class="hljs-comment">% YcoefPA = y(1:half);  </span><br><br><span class="hljs-comment">%去除多余数据</span><br>YcoefPA = YcoefPA(M+<span class="hljs-number">1</span>:half) ;                   <span class="hljs-comment">%经过处理后，数据去除掉前M个</span><br>coefPA = MatrixDeal(XcoefPA,M,K) \ YcoefPA;<br><br><span class="hljs-comment">%最小二乘算法</span><br><span class="hljs-comment">% coefPA  = inv( (XcoefPA&#x27;) *XcoefPA ) * (XcoefPA&#x27;) * YcoefPA;</span><br><span class="hljs-comment">% coefPA  = ( (XcoefPA&#x27;) *XcoefPA ) \ (XcoefPA&#x27;) * YcoefPA;</span><br><br><span class="hljs-comment">%带入验证PA模型输出，矩阵大小为xLength*1</span><br>XmodelPA = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );      <span class="hljs-comment">%使用后一半的数据验证模型，将数据归一化</span><br>YmodelPA = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><br><span class="hljs-comment">% XmodelPA = x(half:xLength);      %使用后一半的数据验证模型，将数据归一化</span><br><span class="hljs-comment">% YmodelPA = y(half:xLength); </span><br><br>YmodelFitPA = MatrixDeal(XmodelPA,M,K) * coefPA;   <span class="hljs-comment">%计算模型输出（输出后的数据减少前M个）</span><br><br><span class="hljs-comment">%去除多余数据</span><br>XmodelPA = XmodelPA(M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(XmodelPA));<br>YmodelPA = YmodelPA(M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(YmodelPA));<br><br><span class="hljs-comment">%通过归一化均方误差衡量功放的建模精度</span><br>NMSE = <span class="hljs-number">10</span> * <span class="hljs-built_in">log10</span>( sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - YmodelFitPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(YmodelPA)).^<span class="hljs-number">2</span> ) ) ;<br><br><span class="hljs-comment">%计算未线性化的EVM</span><br>EVM_withoutDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - XmodelPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XmodelPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withoutDPD is &#x27;</span> num2str(EVM_withoutDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br><span class="hljs-comment">% paCharPlot(XmodelPA,YmodelPA,XmodelPA,&#x27;AM/AM&#x27;);</span><br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><span class="hljs-comment">% paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,&#x27;Gain&#x27;);</span><br><br><br><span class="hljs-comment">%观察频谱</span><br><span class="hljs-comment">%sa = helperPACharPlotSpectrum([YmodelPA  YmodelFitPA],&#123;&#x27;Actual PA Output&#x27;, &#x27;Model PA Output&#x27;&#125;, sampleRate,testSignal);</span><br><br><span class="hljs-comment">%预失真器建立</span><br><br><span class="hljs-comment">%预失真器参数提取</span><br>XcoefDPD = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>YcoefDPD = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefDPD = x(1:half);  %使用前一半数据估计参数，将数据归一化</span><br><span class="hljs-comment">% YcoefDPD = y(1:half);  </span><br><br>XcoefDPD = XcoefDPD(M+<span class="hljs-number">1</span>:half);                     <span class="hljs-comment">%将PA实际输入数据作为输出数据，取前一半数据</span><br>coefDPD = MatrixDeal(YcoefDPD,M,K) \ XcoefDPD;      <span class="hljs-comment">%计算得到DPD参数模型，与PA行为模型一致</span><br><br><span class="hljs-comment">%计算DPD模型输出</span><br>XmodelDPD = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );         <span class="hljs-comment">%使用后一半数据进行DPD模型验证</span><br>YmodelDPD = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><br><span class="hljs-comment">% XmodelDPD = x(half:xLength);         %使用后一半数据进行DPD模型验证</span><br><span class="hljs-comment">% YmodelDPD = y(half:xLength); </span><br><br>YmodelFitDPD = MatrixDeal(XmodelDPD,M,K) * coefDPD;  <span class="hljs-comment">%计算得到DPD输出（输出数据减少M个）</span><br><br><br><span class="hljs-comment">%去除多余数据</span><br><span class="hljs-comment">% %对比PA模型与DPD模型的非线性特性</span><br><span class="hljs-comment">% XmodelDPD = x(half+M:xLength,:);         %实际用于DPD模型验证的输入数据(去除前M个)</span><br><span class="hljs-comment">% YmodelDPD = y(half+M:yLength,:);         %实际的DPD模型的输出数据（去除前M个）</span><br><span class="hljs-comment">% paCharPlot(XmodelDPD,YmodelFitPA,YmodelFitDPD,&#x27;AM/AM&#x27;);</span><br><br><br><span class="hljs-comment">%将DPD模型输出，输入到PA模型中</span><br>Ylinear = MatrixDeal(YmodelFitDPD,M,K) * coefPA;<br><br><span class="hljs-comment">%计算误差向量幅度EVM</span><br>XDPDPA = XmodelDPD(M+M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(XmodelDPD));<br>YDPDPA = YmodelDPD(M+M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(YmodelDPD));<br><br>EVM_withDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(Ylinear - XDPDPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XDPDPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withDPD is &#x27;</span> num2str(EVM_withDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br><span class="hljs-comment">% % paCharPlot(XDPDPA,XDPDPA,Ylinear,&#x27;AM/AM&#x27;);</span><br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><span class="hljs-comment">% paCharPlot(XDPDPA,YDPDPA,Ylinear,&#x27;Gain&#x27;);</span><br><br><span class="hljs-comment">%邻信道功率比ACPR</span><br><span class="hljs-comment">%sa = helperPACharPlotSpectrum([YDPDPA  Ylinear],&#123;&#x27;Actual PA Output&#x27;, &#x27;with DPD Output&#x27;&#125;, sampleRate,testSignal);</span><br><br><br></code></pre></td></tr></table></figure><h4 id="2、DVR模型-1"><a href="#2、DVR模型-1" class="headerlink" title="2、DVR模型"></a>2、DVR模型</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%本例使用NXP Airfast LDMOS Doherty PA，工作频率3.6-3.8 GHz，增益29 dB。</span><br><span class="hljs-comment">%带宽100MHZ</span><br><span class="hljs-comment">%采样率sampleRate = 860160000</span><br><span class="hljs-comment">%信号类型OFDM</span><br><span class="hljs-comment">%If testSignal is &quot;OFDM&quot;, this example uses a 5G-like OFDM waveform with 64-QAM modulated signals for each subcarrier.</span><br><span class="hljs-comment">% If testSignal is &quot;Tones&quot;, this example uses two tones at 1.8 MHz and 2.6 MHz, to test the intermodulation caused by the PA.</span><br><br><br>sampleRate = <span class="hljs-number">860160000</span>;<br><span class="hljs-comment">% sampleRate = 430080000;</span><br>testSignal = <span class="hljs-string">&#x27;OFDM&#x27;</span>;<br><br><span class="hljs-comment">%读取数据</span><br><span class="hljs-comment">% x = (0 : 5);</span><br>x = paInput;<br><span class="hljs-comment">% x = txData1;</span><br><span class="hljs-comment">% x = paInput_40MHZ;</span><br>x = x(:);<br>xLength = <span class="hljs-built_in">length</span>(x);<br><span class="hljs-comment">%使用前半部分数据用于参数提取，后半部分数据用于模型验证</span><br>half = <span class="hljs-built_in">round</span>(xLength/<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">% y = (2 : 7);</span><br>y = paOutput;<br><span class="hljs-comment">% y = tout;</span><br><span class="hljs-comment">% y = paOutput_40MHZ;</span><br>y = y(:);<br>yLength = <span class="hljs-built_in">length</span>(y);<br><br><span class="hljs-comment">%将数据归一化</span><br><span class="hljs-comment">% x = x / abs(max(x));</span><br><span class="hljs-comment">% y = y / abs(max(y));</span><br><br><br><br>M = <span class="hljs-number">2</span>;<br>K = <span class="hljs-number">8</span>;<br><br><span class="hljs-comment">%计算PA系数矩阵，矩阵大小为（M*K*4+M） * 1</span><br><br><span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>XcoefPA = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <br>YcoefPA = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefPA = x(1:half);  </span><br><span class="hljs-comment">% YcoefPA = y(1:half);  </span><br><br><span class="hljs-comment">%去除多余数据</span><br>YcoefPA = YcoefPA(M+<span class="hljs-number">1</span>:half) ;                   <span class="hljs-comment">%经过处理后，数据去除掉前M个</span><br>coefPA = MatrixDeal_DVR(XcoefPA,M,K) \ YcoefPA;<br><br><span class="hljs-comment">%最小二乘算法</span><br><span class="hljs-comment">% coefPA  = inv( (XcoefPA&#x27;) *XcoefPA ) * (XcoefPA&#x27;) * YcoefPA;</span><br><span class="hljs-comment">% coefPA  = ( (XcoefPA&#x27;) *XcoefPA ) \ (XcoefPA&#x27;) * YcoefPA;</span><br><br><span class="hljs-comment">%带入验证PA模型输出，矩阵大小为xLength*1</span><br>XmodelPA = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );      <span class="hljs-comment">%使用后一半的数据验证模型，将数据归一化</span><br>YmodelPA = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><br><span class="hljs-comment">% XmodelPA = x(half:xLength);      %使用后一半的数据验证模型，将数据归一化</span><br><span class="hljs-comment">% YmodelPA = y(half:xLength); </span><br><br>YmodelFitPA = MatrixDeal_DVR(XmodelPA,M,K) * coefPA;   <span class="hljs-comment">%计算模型输出（输出后的数据减少前M个）</span><br><br><span class="hljs-comment">%去除多余数据</span><br>XmodelPA = XmodelPA(M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(XmodelPA));<br>YmodelPA = YmodelPA(M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(YmodelPA));<br><br><span class="hljs-comment">%通过归一化均方误差衡量功放的建模精度</span><br>NMSE = <span class="hljs-number">10</span> * <span class="hljs-built_in">log10</span>( sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - YmodelFitPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(YmodelPA)).^<span class="hljs-number">2</span> ) ) ;<br><br><span class="hljs-comment">%计算未线性化的EVM</span><br>EVM_withoutDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - XmodelPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XmodelPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withoutDPD is &#x27;</span> num2str(EVM_withoutDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br><span class="hljs-comment">% paCharPlot(XmodelPA,YmodelPA,XmodelPA,&#x27;AM/AM&#x27;);</span><br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><br><br><span class="hljs-comment">%观察频谱</span><br><span class="hljs-comment">%sa = helperPACharPlotSpectrum([YmodelPA  YmodelFitPA],&#123;&#x27;Actual PA Output&#x27;, &#x27;Model PA Output&#x27;&#125;, sampleRate,testSignal);</span><br><br><br><span class="hljs-comment">%预失真器建立</span><br><br><span class="hljs-comment">%预失真器参数提取</span><br>XcoefDPD = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>YcoefDPD = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefDPD = x(1:half);  %使用前一半数据估计参数，将数据归一化</span><br><span class="hljs-comment">% YcoefDPD = y(1:half);  </span><br><br>XcoefDPD = XcoefDPD(M+<span class="hljs-number">1</span>:half);                     <span class="hljs-comment">%将PA实际输入数据作为输出数据，取前一半数据</span><br>coefDPD = MatrixDeal_DVR(YcoefDPD,M,K) \ XcoefDPD;      <span class="hljs-comment">%计算得到DPD参数模型，与PA行为模型一致</span><br><br><span class="hljs-comment">%计算DPD模型输出</span><br>XmodelDPD = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );         <span class="hljs-comment">%使用后一半数据进行DPD模型验证</span><br>YmodelDPD = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><br><span class="hljs-comment">% XmodelDPD = x(half:xLength);         %使用后一半数据进行DPD模型验证</span><br><span class="hljs-comment">% YmodelDPD = y(half:xLength); </span><br><br>YmodelFitDPD = MatrixDeal_DVR(XmodelDPD,M,K) * coefDPD;  <span class="hljs-comment">%计算得到DPD输出（输出数据减少M个）</span><br><br><br><span class="hljs-comment">%去除多余数据</span><br><span class="hljs-comment">% %对比PA模型与DPD模型的非线性特性</span><br><span class="hljs-comment">% XmodelDPD = x(half+M:xLength,:);         %实际用于DPD模型验证的输入数据(去除前M个)</span><br><span class="hljs-comment">% YmodelDPD = y(half+M:yLength,:);         %实际的DPD模型的输出数据（去除前M个）</span><br><span class="hljs-comment">% paCharPlot(XmodelDPD,YmodelFitPA,YmodelFitDPD,&#x27;AM/AM&#x27;);</span><br><br><br><span class="hljs-comment">%将DPD模型输出，输入到PA模型中</span><br>Ylinear = MatrixDeal_DVR(YmodelFitDPD,M,K) * coefPA;<br><br><span class="hljs-comment">%计算误差向量幅度EVM</span><br>XDPDPA = XmodelDPD(M+M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(XmodelDPD));<br>YDPDPA = YmodelDPD(M+M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(YmodelDPD));<br><br>EVM_withDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(Ylinear - XDPDPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XDPDPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withDPD is &#x27;</span> num2str(EVM_withDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br><span class="hljs-comment">% paCharPlot(XDPDPA,XDPDPA,Ylinear,&#x27;AM/AM&#x27;);</span><br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><br><span class="hljs-comment">%邻信道功率比ACPR</span><br><span class="hljs-comment">%sa = helperPACharPlotSpectrum([YDPDPA  Ylinear],&#123;&#x27;Actual PA Output&#x27;, &#x27;with DPD Output&#x27;&#125;, sampleRate,testSignal);</span><br><br><br></code></pre></td></tr></table></figure><h4 id="3、MP模型"><a href="#3、MP模型" class="headerlink" title="3、MP模型"></a>3、MP模型</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% % 为了表征AM/AM传递函数，计算输入功率值范围内的平均输出功率。</span><br><span class="hljs-comment">% % 测量的单位是伏，总体阻抗为100欧姆，</span><br><span class="hljs-comment">% % 在发射器和接收器之间划分。</span><br><span class="hljs-comment">% % 将测量的基带样本转换为dBm的功率值。</span><br><span class="hljs-comment">% % +30 dB项用于dBW到dBm的转换，</span><br><span class="hljs-comment">% % -20 dB项用于100欧姆阻抗。</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% %mag2db函数用于将振幅转换为dB </span><br><span class="hljs-comment">% %原始输入输出数据是复数，绝对值转换为功率</span><br><span class="hljs-comment">% paInputdBm  = mag2db(abs(paInput)) + 30 - 20;</span><br><span class="hljs-comment">% paOutputdBm  = mag2db(abs(paOutput)) + 30 - 20;</span><br><br><br><span class="hljs-comment">% modType = &#x27;memPoly&#x27;;</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% memLen = 3;</span><br><span class="hljs-comment">% degLen = 5;</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% numDataPts = length(paInput);</span><br><span class="hljs-comment">% halfDataPts = round(numDataPts/2);</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% fitCoefMatMem = helperPACharMemPolyModel(&#x27;coefficientFinder&#x27;, paInput(1:halfDataPts),paOutput(1:halfDataPts),memLen,degLen,modType);</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% disp(abs(fitCoefMatMem));</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% rmsErrorTimeMem = helperPACharMemPolyModel(&#x27;errorMeasure&#x27;, paInput, paOutput, fitCoefMatMem, modType);</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% disp([&#x27;Percent RMS error in time domain is &#x27; num2str(rmsErrorTimeMem) &#x27;%&#x27;]);</span><br><span class="hljs-comment">% paOutputFitMem = helperPACharMemPolyModel(&#x27;signalGenerator&#x27;,  paInput, fitCoefMatMem, modType);</span><br><span class="hljs-comment">%   </span><br><span class="hljs-comment">% helperPACharPlotTime(paOutput, paOutputFitMem, sampleRate);</span><br><span class="hljs-comment">% helperPACharPlotGain(paInput, paOutput, paOutputFitMem);</span><br><br><br><br><br><span class="hljs-comment">%本例使用NXP Airfast LDMOS Doherty PA，工作频率3.6-3.8 GHz，增益29 dB。</span><br><span class="hljs-comment">%带宽100MHZ</span><br><span class="hljs-comment">%采样率sampleRate = 860160000</span><br><span class="hljs-comment">%信号类型OFDM</span><br><span class="hljs-comment">%If testSignal is &quot;OFDM&quot;, this example uses a 5G-like OFDM waveform with 64-QAM modulated signals for each subcarrier.</span><br><span class="hljs-comment">% If testSignal is &quot;Tones&quot;, this example uses two tones at 1.8 MHz and 2.6 MHz, to test the intermodulation caused by the PA.</span><br><br><br>sampleRate = <span class="hljs-number">860160000</span>;<br><span class="hljs-comment">% sampleRate = 430080000;</span><br>testSignal = <span class="hljs-string">&#x27;OFDM&#x27;</span>;<br><br><span class="hljs-comment">%读取数据</span><br><span class="hljs-comment">% x = (0 : 5);</span><br>x = paInput;<br><span class="hljs-comment">% x = txData1;</span><br><span class="hljs-comment">% x = paInput_40MHZ;</span><br>x = x(:);<br>xLength = <span class="hljs-built_in">length</span>(x);<br><span class="hljs-comment">%使用前半部分数据用于参数提取，后半部分数据用于模型验证</span><br>half = <span class="hljs-built_in">round</span>(xLength/<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">% y = (2 : 7);</span><br>y = paOutput;<br><span class="hljs-comment">% y = tout;</span><br><span class="hljs-comment">% y = paOutput_40MHZ;</span><br>y = y(:);<br>yLength = <span class="hljs-built_in">length</span>(y);<br><br><span class="hljs-comment">%将数据归一化</span><br><span class="hljs-comment">% x = x / abs(max(x));</span><br><span class="hljs-comment">% y = y / abs(max(y));</span><br><br>M = <span class="hljs-number">2</span>;<br>K = <span class="hljs-number">8</span>;<br><br><br><span class="hljs-comment">%使用前一半数据用于PA参数提取</span><br>XcoefPA = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <br>YcoefPA = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefPA = x(1:half);  </span><br><span class="hljs-comment">% YcoefPA = y(1:half);  </span><br><br>YcoefPA = YcoefPA(M:half) ;                   <span class="hljs-comment">%经过处理后，数据去除掉前M个</span><br>coefPA = MatrixDeal_MP(XcoefPA,M,K) \ YcoefPA;<br><br><span class="hljs-comment">%使用后一半数据用于PA模型验证</span><br>XmodelPA = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );      <span class="hljs-comment">%使用后一半的数据验证模型，将数据归一化</span><br>YmodelPA = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><span class="hljs-comment">% XmodelPA = x(half:xLength);      %使用后一半的数据验证模型，将数据归一化</span><br><span class="hljs-comment">% YmodelPA = y(half:xLength); </span><br><br>YmodelFitPA = MatrixDeal_MP(XmodelPA,M,K) * coefPA;   <span class="hljs-comment">%计算模型输出（输出后的数据减少前M个）</span><br><br><span class="hljs-comment">%去除多余数据</span><br>XmodelPA = XmodelPA(M:<span class="hljs-built_in">length</span>(XmodelPA));<br>YmodelPA = YmodelPA(M:<span class="hljs-built_in">length</span>(YmodelPA));<br><br><span class="hljs-comment">%计算未线性化的EVM</span><br>EVM_withoutDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - XmodelPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XmodelPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withoutDPD is &#x27;</span> num2str(EVM_withoutDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%计算NMSE</span><br>NMSE = <span class="hljs-number">10</span> * <span class="hljs-built_in">log10</span>( sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - YmodelFitPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(YmodelPA)).^<span class="hljs-number">2</span> ) ) ;<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><br><br><br><span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>XcoefDPD = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>YcoefDPD = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefDPD = x(1:half);  %使用前一半数据估计参数，将数据归一化</span><br><span class="hljs-comment">% YcoefDPD = y(1:half);  </span><br><br><br>XcoefDPD = XcoefDPD(M:half);                     <span class="hljs-comment">%将PA实际输入数据作为输出数据，取前一半数据</span><br>coefDPD = MatrixDeal_MP(YcoefDPD,M,K) \ XcoefDPD;      <span class="hljs-comment">%计算得到DPD参数模型，与PA行为模型一致</span><br><br><br><span class="hljs-comment">%模型验证</span><br>XmodelDPD = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );         <span class="hljs-comment">%使用后一半数据进行DPD模型验证</span><br>YmodelDPD = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><br><span class="hljs-comment">% XmodelDPD = x(half:xLength);         %使用后一半数据进行DPD模型验证</span><br><span class="hljs-comment">% YmodelDPD = y(half:xLength); </span><br><br>YmodelFitDPD = MatrixDeal_MP(XmodelDPD,M,K) * coefDPD;  <span class="hljs-comment">%计算得到DPD输出（输出数据减少M个）</span><br><br>Ylinear = MatrixDeal_MP(YmodelFitDPD,M,K) * coefPA;<br><br><span class="hljs-comment">%计算误差向量幅度EVM</span><br>XDPDPA = XmodelDPD(M+M<span class="hljs-number">-1</span>:<span class="hljs-built_in">length</span>(XmodelDPD));<br>YDPDPA = YmodelDPD(M+M<span class="hljs-number">-1</span>:<span class="hljs-built_in">length</span>(YmodelDPD));<br><br>EVM_withDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(Ylinear - XDPDPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XDPDPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withDPD is &#x27;</span> num2str(EVM_withDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><br><span class="hljs-comment">%邻信道功率比ACPR</span><br>sa = helperPACharPlotSpectrum([YDPDPA  Ylinear],&#123;<span class="hljs-string">&#x27;Actual PA Output&#x27;</span>, <span class="hljs-string">&#x27;with DPD Output&#x27;</span>&#125;, sampleRate,testSignal);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Matlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/25/hello-world/"/>
    <url>/2023/06/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helloworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
