<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Microblze软核的应用（自定义IP_PWM）</title>
    <link href="/2023/07/19/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89IP_PWM%EF%BC%89/"/>
    <url>/2023/07/19/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89IP_PWM%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>介绍自定义IP核，并使用Microblaze软核控制。</p><span id="more"></span><h1 id="Microblaze软核的应用（自定义IP-PWM）"><a href="#Microblaze软核的应用（自定义IP-PWM）" class="headerlink" title="Microblaze软核的应用（自定义IP_PWM）"></a>Microblaze软核的应用（自定义IP_PWM）</h1><p>前面介绍了Microblaze软核的开发流程，如何建立一个Microblaze系统，添加IP核，完成基本的操作。</p><p><a href="https://vinters-v.github.io/2023/07/09/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88GPIO&UART%EF%BC%89/">Microblze软核的应用（GPIO&amp;UART） - Vinters-v</a></p><p>但是，在实际应用中，Vivado提供的IP核不足以满足设计的要求。因此，我们常常需要自己设计相应的逻辑电路，封装成IP核，添加到系统中，并使用Microblaze软核对其进行控制，完成一定的功能。</p><p>这里以PWM波产生为例，如果使用CPU产生PWM波的话，需要使用定时器资源，然而在单片机中定时器资源有限。而使用FPGA或者说设计数字电路实现PWM是非常简单的。而对于PWM波的周期和占空比的控制，FPGA则不擅长。</p><p>因此，本文在FPGA器件上设计一个用于PWM波产生的数字电路模块，将其封装成IP核。设计Microblaze系统，添加PWM波产生IP，完成软件控制PWM波周期与占空比的功能。</p><h2 id="1-PWM波产生IP核设计与封装"><a href="#1-PWM波产生IP核设计与封装" class="headerlink" title="1.PWM波产生IP核设计与封装"></a>1.PWM波产生IP核设计与封装</h2><h3 id="PWM波逻辑程序"><a href="#PWM波逻辑程序" class="headerlink" title="PWM波逻辑程序"></a>PWM波逻辑程序</h3><p>Verilog编写pwm波的原理，设计一个同步二进制加法计数器，当计数器的时钟频率固定时，计数器的模值，或者说溢出值就决定了pwm波的周期。只需要根据占空比计算在一个计数周期内pwm波输出端口的高电平的时间。</p><p>模块设置两个输入参数，一个为计数器模值，一个为根据占空比计算的高电平计数长度。在一个周期内，输出端口首先输出高电平，当计数器的计数值大于设置高电平长度时，输出端口输出低电平。pwm波产生的Verilog程序如下。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> PWM(clk,reset,period,duty,pwm_out);<br>    <br><span class="hljs-keyword">parameter</span> N = <span class="hljs-number">32</span>;<br><span class="hljs-keyword">input</span> clk;<br><span class="hljs-keyword">input</span> reset;<br><span class="hljs-keyword">input</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] period;   <span class="hljs-comment">//计数器模值</span><br><span class="hljs-keyword">input</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] duty;     <span class="hljs-comment">//高电平长度</span><br><span class="hljs-keyword">output</span> pwm_out;<br><br><span class="hljs-keyword">reg</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cnt;<br><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> reset)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!reset) cnt &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt &lt; period-<span class="hljs-number">1</span>) cnt &lt;= cnt + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">else</span> cnt &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br>    <br><br><span class="hljs-keyword">assign</span> pwm_out = (cnt &lt; duty) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="仿真验证硬件正确性"><a href="#仿真验证硬件正确性" class="headerlink" title="仿真验证硬件正确性"></a>仿真验证硬件正确性</h3><p>编程仿真程序，测试模块设计是否符合要求。只需要在仿真文件中例化PWM模块，初始化给定两个参数值，并设置时钟输入即可。这里不进行详细介绍。</p><h3 id="封装IP"><a href="#封装IP" class="headerlink" title="封装IP"></a>封装IP</h3><p>程序编写好，并通过仿真之后，就可以将写好的PWM模块封装成IP。步骤如下：</p><p>在Vivado软件上方工具栏，选择Tools-&gt;Create and Package New IP，因为IP要在BD设计中使用，因此，将IP封装为AXI4总线格式，在弹窗中选择Create a new AXI4 peripheral。</p><p><img src="/img/article_img/Microblaze_PWM/1.png"></p><p>接着设置模块的名称，模块是作为主设备还是从设备，模块寄存器个数等等。</p><p><img src="/img/article_img/Microblaze_PWM/2.png"></p><p><img src="/img/article_img/Microblaze_PWM/3.png"></p><p><img src="/img/article_img/Microblaze_PWM/4.png"></p><p>生成IP之后，就可以在IP catalog的用户自定义IP中找到PWM IP核。但此时的IP核中还没有实际的功能，需要添加已经写好的PWM成雪到IP核中。</p><p>首先找到PWM IP核，右键选择Edit  in IP Packager，此时Vivado软件会打开另一个工程文件，用于修改PWM IP的内容。</p><p><img src="/img/article_img/Microblaze_PWM/5.png"></p><p>在新的工程文件中，已经有一个设计文件，我们需要将之前写好的PWM程序添加到设计文件中，然后在PWM IP设计文件的底层程序中例化PWM模块。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// Add user logic here</span><br>PWM pwm_init_0(<br>    <span class="hljs-variable">.clk</span>(S_AXI_ACLK),<br>    <span class="hljs-variable">.reset</span>(S_AXI_ARESETN),<br>    <span class="hljs-variable">.period</span>(slv_reg0),<br>    <span class="hljs-variable">.duty</span>(slv_reg1),<br>    <span class="hljs-variable">.pwm_out</span>(pwm_0)<br>    );<br>    <br>PWM pwm_init_1(<br>    <span class="hljs-variable">.clk</span>(S_AXI_ACLK),<br>    <span class="hljs-variable">.reset</span>(S_AXI_ARESETN),<br>    <span class="hljs-variable">.period</span>(slv_reg2),<br>    <span class="hljs-variable">.duty</span>(slv_reg3),<br>    <span class="hljs-variable">.pwm_out</span>(pwm_1)<br>    );<br><span class="hljs-comment">// User logic ends</span><br></code></pre></td></tr></table></figure><p>其中时钟和复位信号以及两个寄存器，在原有文件中已有定义，pwm输出端口需要我们自行定义。</p><p>在底层文件的用户端口定义区域添加代码</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// Users to add ports here</span><br><span class="hljs-keyword">output</span> pwm_0,<br><span class="hljs-keyword">output</span> pwm_1,<br><br><span class="hljs-comment">// User ports ends</span><br></code></pre></td></tr></table></figure><p>同时在顶层文件中的端口定义区域添加输出端口定义，并在例化下层模块处，添加输出端口例化。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-variable">.pwm_0</span>(pwm_0),<br><span class="hljs-variable">.pwm_1</span>(pwm_1),<br></code></pre></td></tr></table></figure><p>例化后的文件结构如下</p><p><img src="/img/article_img/Microblaze_PWM/6.png"></p><p>修改完成后，打开文件component.xml，将Packaging Steps下的所有步骤更新并重新生成IP。</p><p><img src="/img/article_img/Microblaze_PWM/7.png"></p><p>重新生成后，新的工程文件会自动关闭，跳回到之前设计PWM的HDL的工程文件中，此时PWM IP核的封装就已经完成了，可以将之前编写的PWM的Verilog程序从工程中删除。</p><h2 id="2-添加Microblaze系统"><a href="#2-添加Microblaze系统" class="headerlink" title="2. 添加Microblaze系统"></a>2. 添加Microblaze系统</h2><p>创建Block Design，添加时钟产生模块，Microblaze处理器模块，PWM模块，添加处理器周围模块，自动布线等等。</p><p>具体的设计流程与上一篇文章类似，这里不再详细介绍。</p><p><a href="https://vinters-v.github.io/2023/07/09/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88GPIO&UART%EF%BC%89/">Microblze软核的应用（GPIO&amp;UART） - Vinters-v</a></p><p>完成综合、实现、比特流生成之后，硬件设计就算完成了，最后导出硬件设计文件，连接到SDK，进行软件的开发。</p><h2 id="3-SDK软件开发"><a href="#3-SDK软件开发" class="headerlink" title="3. SDK软件开发"></a>3. SDK软件开发</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>由于本次工程的pwm ip模块是自定义的，所以生成硬件设计文件后，SDK并不会自动生成相应的模板供我们参考使用。因此，这里直接使用hello world模板建立工程即可。</p><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;platform.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xil_printf.h&quot;</span></span><br><span class="hljs-comment">//需要自行添加</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xparameters.h&quot;</span> <span class="hljs-comment">//包含了各种硬件的参数定义</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pwm_ip.h&quot;</span>  <span class="hljs-comment">//pwm模块相关的配置函数与寄存器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xil_io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sleep.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>hello world模板中已经添加了几个必要的头文件，为了能够使用pwm模块，还必须自行添加几个头文件。首先pwm_ip.h文件中，包含了pwm模块的各种配置函数的定义，以及寄存器的定义。xparameters.h文件包含了系统所有硬件的参数定义，对于pwm模块来说，需要的有模块的基地址，设备ID等等。由于使用到了usleep函数，因此需要包含sleep.h文件。</p><h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><p>程序设计与其他单片机的设计类似，这里pwm模块的使用主要涉及到寄存器的读写，包括对寄存器写入频率控制变量和占空比控制变量。这里实现了频率固定，占空比循环变化的pwm波。程序如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;platform.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xil_printf.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xparameters.h&quot;</span> <span class="hljs-comment">//包含了各种硬件的参数定义</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pwm_ip.h&quot;</span>  <span class="hljs-comment">//pwm模块相关的配置函数与寄存器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xil_io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sleep.h&quot;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    init_platform();<br><br>    print(<span class="hljs-string">&quot;Hello World\n\r&quot;</span>);<br>    u32 period;<br>    u32 duty;<br>    period = <span class="hljs-number">1000000</span>;<span class="hljs-comment">//实际频率为100MHZ/period</span><br><br>    <span class="hljs-comment">//对pwm中的寄存器进行配置（其中reg0和reg2分别是两个频率寄存器，reg1和reg3是两个占空比寄存器）</span><br>    PWM_IP_mWriteReg(XPAR_PWM_IP_0_S00_AXI_BASEADDR, PWM_IP_S00_AXI_SLV_REG0_OFFSET, period);<br>    PWM_IP_mWriteReg(XPAR_PWM_IP_0_S00_AXI_BASEADDR, PWM_IP_S00_AXI_SLV_REG2_OFFSET, period);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>    <span class="hljs-keyword">for</span>(duty = period; duty &gt; <span class="hljs-number">0</span>; duty = duty - <span class="hljs-number">100000</span>)<br>    &#123;<br>        PWM_IP_mWriteReg(XPAR_PWM_IP_0_S00_AXI_BASEADDR, PWM_IP_S00_AXI_SLV_REG1_OFFSET, duty);<br>        PWM_IP_mWriteReg(XPAR_PWM_IP_0_S00_AXI_BASEADDR, PWM_IP_S00_AXI_SLV_REG3_OFFSET, period - duty);<br>        usleep(<span class="hljs-number">100000</span>);<span class="hljs-comment">//将线程挂起</span><br>    &#125;<br>    &#125;<br><br>    cleanup_platform();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="烧写与验证"><a href="#烧写与验证" class="headerlink" title="烧写与验证"></a>烧写与验证</h3><p>程序设计完成之后，就可以对FPGA器件进行烧写。首先点击工具栏中的“Program FPGA”，将硬件设计烧写到FPGA上，然后，选择Run As-&gt;Launch on Hardware(System Debugger)将软件代码下载到CPU中，观察板子上LED灯的变化，符合设计要求。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文的主要目的是以pwm产生为例，展示如何自己使用Verilog设计模块，封装为IP核，并由Microblaze控制其完成功能这一整套流程。初步学习了“PS+PL”的系统设计。</p>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>Verilog</tag>
      
      <tag>Microblaze</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Microblze软核的应用（GPIO&amp;UART）</title>
    <link href="/2023/07/09/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88GPIO&amp;UART%EF%BC%89/"/>
    <url>/2023/07/09/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88GPIO&amp;UART%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>介绍Microblaze软核开发的具体流程，以GPIO与UART外设为例。</p><span id="more"></span><h1 id="Microblaze软核的应用（GPIO-amp-UART）"><a href="#Microblaze软核的应用（GPIO-amp-UART）" class="headerlink" title="Microblaze软核的应用（GPIO&amp;UART）"></a>Microblaze软核的应用（GPIO&amp;UART）</h1><p>使用Vivado软件部署Microblaze软核，并添加GPIO外设与URAT外设，完成整个流程的设计与验证。</p><p>首先新建一个新的RTL工程，选择合适的FPGA器件，这里选择 ，不添加任何的设计文件。</p><h2 id="1-添加Microblaze软处理器核"><a href="#1-添加Microblaze软处理器核" class="headerlink" title="1.添加Microblaze软处理器核"></a>1.添加Microblaze软处理器核</h2><p>在Vivado软件界面，在左侧功能栏中，选择Create Block Design,新建一个BD设计文件。点击“+”，向BD设计中添加IP核，选择Microblaze，将软处理器核添加到设计。</p><p><img src="/img/article_img/Microblaze_GPIO/1.png"></p><h2 id="2-配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。"><a href="#2-配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。" class="headerlink" title="2.配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。"></a>2.配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。</h2><p>添加时钟产生模块Clocking Wizard,根据开发板的手册选择输入时钟的频率，输入时钟的频率要与开发板外部时钟源频率一致。模块的复位端口reset默认为高电平有效，一般修改为低电平有效，根据设计需要设置输出时钟的个数和频率大小。</p><p><img src="/img/article_img/Microblaze_GPIO/2.png"></p><p>时钟模块添加后，点击BD设计文件上方的Run Block Automain，软件自动生成处理器必须的外围电路模块，并完成一部分连线。</p><h2 id="3-添加设计所需要的IP核"><a href="#3-添加设计所需要的IP核" class="headerlink" title="3.添加设计所需要的IP核"></a>3.添加设计所需要的IP核</h2><p>添加AXI GPIO模块，同一种用途的IO可以添加一组GPIO，例如，用于LED的IO添加一组GPIO_0，用于按钮开关的添加一组GPIO_1。设置每一组GPIO的输出位数，也就是IO个数。还有数据的输入输出方向。需要用到中断时，则可以是能中断。</p><p><img src="/img/article_img/Microblaze_GPIO/3.png"></p><p>添加AXI Uartlite模块，一般只需要设置波特率即可。</p><p><img src="/img/article_img/Microblaze_GPIO/4.png"></p><p>所有IP核添加完成后，点击BD设计文件上方的Run Connection Automation进行模块之间的自动连接。</p><p>设计完成后点击Validate Design按钮对设计进行检查，没有error即可。</p><h2 id="4-进行管脚约束"><a href="#4-进行管脚约束" class="headerlink" title="4. 进行管脚约束"></a>4. 进行管脚约束</h2><p>对系统中的时钟，复位，以及需要的其他外设的接口进行管脚约束文件的编写，一般直接在Constrains文件中新建约束文件编写代码即可。</p><h2 id="5-完成硬件设计，导出硬件设计文件"><a href="#5-完成硬件设计，导出硬件设计文件" class="headerlink" title="5.完成硬件设计，导出硬件设计文件"></a>5.完成硬件设计，导出硬件设计文件</h2><p>与FPGA中逻辑设计的步骤相同，对硬件设计依次进行综合、实现、比特流文件生成。则完成了硬件电路的设计。</p><p>选择File-&gt;Export-&gt;Export Hardware，导入硬件设计文件，勾选include bitstream。</p><p><img src="/img/article_img/Microblaze_GPIO/5.png"></p><h2 id="6-进行SDK软件开发"><a href="#6-进行SDK软件开发" class="headerlink" title="6.进行SDK软件开发"></a>6.进行SDK软件开发</h2><p>选择File-&gt;Launch SDK，连接到SDK软件，软件会自动添加好刚刚设计好并导出的硬件信息。</p><p>在进行SDK软件开发时，有两种方法。</p><p>一是，选择File-&gt;New-&gt;Application Project，新建一个新的应用工程，采用hello world模板，这个模板是包含了最简单的代码结构。对于自己设计封装的IP核，只能采用这种方式。</p><p>二是，进入system.mss文件，这个文件包含了硬件所支持的开发包，对于每一个添加系统中的IP核，如GPIO，UART等等，都会有一个说明文件Documention与例程文件。对于Vivado中自带的IP核，可以直接导入例程文件Import Examples，在此基础上进行软件开发。</p><p><img src="/img/article_img/Microblaze_GPIO/6.png"></p><h2 id="7-下载硬件设计到FPGA，调试软件代码"><a href="#7-下载硬件设计到FPGA，调试软件代码" class="headerlink" title="7.下载硬件设计到FPGA，调试软件代码"></a>7.下载硬件设计到FPGA，调试软件代码</h2><p>完成软件设计后，连接FPGA，首先点击Program FPGA，将硬件设计下载到FPGA中。然后在应用工程总的文件夹上右键，选择Run As-&gt;Launch on Hardware(System Debugger)将软件代码下载到CPU中，进行软件代码的调试。</p>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>Verilog</tag>
      
      <tag>Microblaze</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Microblze软核的概述</title>
    <link href="/2023/07/08/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/07/08/Microblaze%E8%BD%AF%E6%A0%B8%E7%9A%84%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p>对Microblaze软核作简单概述，列举软核开发流程</p><span id="more"></span><h1 id="Microblaze软核的概述"><a href="#Microblaze软核的概述" class="headerlink" title="Microblaze软核的概述"></a>Microblaze软核的概述</h1><p>FPGA(Field Programmable Gate Array)即现场可编程门列，属于可编程逻辑器件的一种。是当今实现数字系统的主流平台之一。</p><p>FPGA具有硬件可编程的特点，它的内部有大量的逻辑门组成，可以通过编程实现基本电路的之间的连接，从而构成各种数字电路模块，进而设计复杂的数字系统。</p><p>然而，FPGA在设计数字电路上具有优势，对于需要进行控制，或者需要程序串行运行的场合就显得笨拙。对此，通过在FPGA器件内部部署软处理器核来解决这个问题。这里介绍Microblaze软处理器核。</p><p>软处理器核简称“软核”，即处理器并不是固定在FPGA器件内部的 ，当需要使用处理器进行设计时，则使用FPGA的逻辑资源例化一个Microblaze软核，这样FPGA内部就有了一个CPU和其他可以自由配置的逻辑资源，CPU与逻辑电路在FPGA内部连接，使设计更加方便灵活。</p><p>MicroBlaze™ CPU 是嵌入式、可修改预置 32 位 &#x2F; 64 位 RISC 微处理器配置系列。系统设计者可在没有任何 FPGA 经验的情况下，利用 2019.2 中的 Vitis™ Core 开发套件或使用 2019.1 或更早版本中基于 Eclipse 的 Xilinx 软件开发套件 (SDK)，进行MicroBlaze 处理器的开发。</p><p>这里采用的Vivado版本为2081.3，使用SDK进行Microblaze软核的开发。</p><p>开发的流程如下：</p><h2 id="1-添加Microblaze软处理器核"><a href="#1-添加Microblaze软处理器核" class="headerlink" title="1.添加Microblaze软处理器核"></a>1.添加Microblaze软处理器核</h2><h2 id="2-配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。"><a href="#2-配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。" class="headerlink" title="2.配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。"></a>2.配置处理器必需的硬件如时钟产生模块，复位模块，存储器模块等。</h2><h2 id="3-添加设计所需要的IP核"><a href="#3-添加设计所需要的IP核" class="headerlink" title="3.添加设计所需要的IP核"></a>3.添加设计所需要的IP核</h2><p>Vivado提供了众多的IP核用于嵌入式开发，如GPIO控制器、串口UART、中断控制器、块RAM接口控制器、中央DMA控制器、ADC\DAC、IIC总线接口等等。</p><p>此外，对于自己设计的逻辑电路也可以配置为IP核，与Microblaze软处理器连接，实现处理器对电路的控制。</p><h2 id="4-进行管脚约束"><a href="#4-进行管脚约束" class="headerlink" title="4. 进行管脚约束"></a>4. 进行管脚约束</h2><h2 id="5-完成硬件设计，导出硬件设计文件"><a href="#5-完成硬件设计，导出硬件设计文件" class="headerlink" title="5.完成硬件设计，导出硬件设计文件"></a>5.完成硬件设计，导出硬件设计文件</h2><h2 id="6-进行SDK软件开发"><a href="#6-进行SDK软件开发" class="headerlink" title="6.进行SDK软件开发"></a>6.进行SDK软件开发</h2><h2 id="7-下载硬件设计到FPGA，调试软件代码"><a href="#7-下载硬件设计到FPGA，调试软件代码" class="headerlink" title="7.下载硬件设计到FPGA，调试软件代码"></a>7.下载硬件设计到FPGA，调试软件代码</h2>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>Verilog</tag>
      
      <tag>Microblaze</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPGA常用基础模块</title>
    <link href="/2023/07/03/FPGA%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97/"/>
    <url>/2023/07/03/FPGA%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>数字电路中常用基础模块</p><span id="more"></span><h1 id="FPGA常用基础模块"><a href="#FPGA常用基础模块" class="headerlink" title="FPGA常用基础模块"></a>FPGA常用基础模块</h1><p>列举一些比较典型的数字电路，包括组合逻辑电路和时序逻辑电路。体现一定的Verilog语法与编程技巧。同时这些模块也是作为实际电路设计中比较通用的模块。</p><h2 id="组合逻辑电路"><a href="#组合逻辑电路" class="headerlink" title="组合逻辑电路"></a>组合逻辑电路</h2><h3 id="1-8-1数据选择器"><a href="#1-8-1数据选择器" class="headerlink" title="1.  8-1数据选择器"></a>1.  8-1数据选择器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> choose(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] A, <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] D,<br>    <span class="hljs-keyword">output</span> Y<br>    );<br><span class="hljs-keyword">reg</span> y_temp;<br><span class="hljs-keyword">always</span> @(A <span class="hljs-keyword">or</span> D)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">case</span>(A)<br><span class="hljs-number">3&#x27;b000</span>: y_temp = D[<span class="hljs-number">0</span>];<br><span class="hljs-number">3&#x27;b001</span>: y_temp = D[<span class="hljs-number">1</span>];<br><span class="hljs-number">3&#x27;b010</span>: y_temp = D[<span class="hljs-number">2</span>];<br><span class="hljs-number">3&#x27;b011</span>: y_temp = D[<span class="hljs-number">3</span>];<br><span class="hljs-number">3&#x27;b100</span>: y_temp = D[<span class="hljs-number">4</span>];<br><span class="hljs-number">3&#x27;b101</span>: y_temp = D[<span class="hljs-number">5</span>];<br><span class="hljs-number">3&#x27;b110</span>: y_temp = D[<span class="hljs-number">6</span>];<br><span class="hljs-keyword">default</span>: y_temp = D[<span class="hljs-number">7</span>];<br><span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">assign</span> Y = y_temp;  <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="2-3-8译码器"><a href="#2-3-8译码器" class="headerlink" title="2. 3-8译码器"></a>2. 3-8译码器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> Tran_3_8(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] In,<br>    <span class="hljs-keyword">input</span> EN, <span class="hljs-comment">//使能信号</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] Out<br>    );<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] Out_temp;<br><span class="hljs-keyword">always</span> @(In <span class="hljs-keyword">or</span> EN)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(~EN)<br><span class="hljs-keyword">case</span>(In)<br><span class="hljs-number">3&#x27;b000</span>: Out_temp = <span class="hljs-number">8&#x27;b0111_1111</span>;<br><span class="hljs-number">3&#x27;b001</span>: Out_temp = <span class="hljs-number">8&#x27;b1011_1111</span>;<br><span class="hljs-number">3&#x27;b010</span>: Out_temp = <span class="hljs-number">8&#x27;b1101_1111</span>;<br><span class="hljs-number">3&#x27;b011</span>: Out_temp = <span class="hljs-number">8&#x27;b1110_1111</span>;<br><span class="hljs-number">3&#x27;b100</span>: Out_temp = <span class="hljs-number">8&#x27;b1111_0111</span>;<br><span class="hljs-number">3&#x27;b101</span>: Out_temp = <span class="hljs-number">8&#x27;b1111_1011</span>;<br><span class="hljs-number">3&#x27;b110</span>: Out_temp = <span class="hljs-number">8&#x27;b1111_1101</span>;<br><span class="hljs-number">3&#x27;b111</span>: Out_temp = <span class="hljs-number">8&#x27;b1111_1110</span>;<br><span class="hljs-keyword">default</span>: Out_temp = <span class="hljs-number">8&#x27;b1111_1111</span>;<br><span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">else</span><br>Out_temp = <span class="hljs-number">8&#x27;b1111_1111</span>;<br><span class="hljs-keyword">end</span>                                                               <br><span class="hljs-keyword">assign</span> Out = Out_temp;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="时序逻辑电路"><a href="#时序逻辑电路" class="headerlink" title="时序逻辑电路"></a>时序逻辑电路</h2><h3 id="1-D触发器"><a href="#1-D触发器" class="headerlink" title="1. D触发器"></a>1. D触发器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> DFF(S,R,D,CLK,Q,qn);<br>    <br><span class="hljs-keyword">input</span> S,R,D,CLK;<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> Q;<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> qn;<br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> CLK <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> S <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> R)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(!R) <span class="hljs-keyword">begin</span> Q &lt;= <span class="hljs-number">1&#x27;b0</span>; qn &lt;= <span class="hljs-number">1&#x27;b1</span>; <span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!S) <span class="hljs-keyword">begin</span> Q &lt;= <span class="hljs-number">1&#x27;b1</span>; qn &lt;= <span class="hljs-number">1&#x27;b0</span>; <span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span> Q &lt;= D; qn &lt;= ~D; <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="2-模M同步二进制加法计数器"><a href="#2-模M同步二进制加法计数器" class="headerlink" title="2. 模M同步二进制加法计数器"></a>2. 模M同步二进制加法计数器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> cnt_M(clk,rst,cnt);<br><br><span class="hljs-keyword">parameter</span> M = <span class="hljs-number">1024</span>;        <span class="hljs-comment">//M mo</span><br><span class="hljs-keyword">parameter</span> N = <span class="hljs-number">10</span>;          <span class="hljs-comment">//N wei count</span><br><br><span class="hljs-keyword">input</span> clk,rst;<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]cnt;<br><br><span class="hljs-comment">//M wei 10 de count</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(!rst) cnt &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt &lt; M-<span class="hljs-number">1</span>) cnt &lt;= cnt + <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">else</span> cnt &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="3-分频电路"><a href="#3-分频电路" class="headerlink" title="3. 分频电路"></a>3. 分频电路</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> Div_Clk(clk,rst,led);<br><br><span class="hljs-keyword">input</span> clk, rst;<br><span class="hljs-keyword">output</span> Div; <br><br><span class="hljs-keyword">reg</span>  [<span class="hljs-number">25</span>:<span class="hljs-number">0</span>]  cnt; <span class="hljs-comment">//计数值</span><br><span class="hljs-keyword">parameter</span> CNT = <span class="hljs-number">32&#x27;d10</span>;  <span class="hljs-comment">//周期为CNT</span><br><span class="hljs-keyword">parameter</span> Half_CNT = <span class="hljs-number">32&#x27;d5</span>;  <span class="hljs-comment">//周期的一半</span><br><span class="hljs-comment">//实际为一个计数器    </span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!rst) cnt &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt == CNT-<span class="hljs-number">1</span>)  cnt&lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>  cnt &lt;= cnt + <span class="hljs-number">1&#x27;b1</span>; <br><span class="hljs-keyword">end</span><br>    <br><span class="hljs-keyword">assign</span> led = (cnt &lt; Half_CNT-<span class="hljs-number">1</span>) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br>    <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="4-有限状态机"><a href="#4-有限状态机" class="headerlink" title="4. 有限状态机"></a>4. 有限状态机</h3><p>状态机一般包括组合逻辑电路和寄存器两部分。</p><p>状态机的下一个状态的输出不仅与输入信号有关，还与寄存器当前状态有关。</p><p>状态机可以分为米勒（Mealy）型和摩尔（Moore）型。</p><p>Mealy型状态机的输出是当前状态和输入信号的函数，Moore型状态机的输出仅是当前状态的函数。</p><p>下面是一个三段式Moore型状态机。</p><p>在编写一个状态机之前，首先要绘制对应时序逻辑的状态转移图，然后根据状态转移图，编写程序。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> TOP(rst,clk,yout);<br><br><span class="hljs-keyword">input</span> rst,clk;<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] yout;<br><br><span class="hljs-keyword">parameter</span> s0 = <span class="hljs-number">3&#x27;b100</span>, s1 = <span class="hljs-number">3&#x27;b010</span>, s2 = <span class="hljs-number">3&#x27;b001</span>;<span class="hljs-comment">//定义状态机中的所有状态</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] next_state;<br><br><span class="hljs-comment">//第一个always块，完成状态转换</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span>(!rst)  state &lt;= s0;<br><span class="hljs-keyword">else</span> state &lt;= next_state;<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//第二个always块，完成状态机的内部逻辑</span><br><span class="hljs-keyword">always</span> @(state <span class="hljs-keyword">or</span> next state)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">case</span>(state)<br>        s0: next_state &lt;= s1;<br>        s1: next_state &lt;= s2;<br>        s2: next_state &lt;= s0;<br>        <span class="hljs-keyword">default</span>: next_state &lt;= s0;<br>    <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">//状态机的外部输出</span><br><span class="hljs-keyword">always</span> @(*)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">case</span>(state)<br>        s0: yout &lt;= <span class="hljs-number">2&#x27;b00</span>;<br>        s1: yout &lt;= <span class="hljs-number">2&#x27;b01</span>;<br>        s2: yout &lt;= <span class="hljs-number">2&#x27;b10</span>;<br>        <span class="hljs-keyword">default</span>: yout &lt;= <span class="hljs-number">2&#x27;b00</span>;<br>    <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用方法</title>
    <link href="/2023/06/28/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2023/06/28/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>git使用方法</p><span id="more"></span><h1 id="Git使用方法"><a href="#Git使用方法" class="headerlink" title="Git使用方法"></a>Git使用方法</h1><p>git：分布式版本控制系统</p><h2 id="Git与GIithub远程仓库连接（配置SSH）"><a href="#Git与GIithub远程仓库连接（配置SSH）" class="headerlink" title="Git与GIithub远程仓库连接（配置SSH）"></a>Git与GIithub远程仓库连接（配置SSH）</h2><p>（ssh是一种网络协议，用于计算机之间的加密登录）</p><p>以下为成功安装git后的操作</p><h3 id="配置注册用户名和注册邮箱"><a href="#配置注册用户名和注册邮箱" class="headerlink" title="配置注册用户名和注册邮箱"></a>配置注册用户名和注册邮箱</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;xxx&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;xxx.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><h3 id="生成SSH"><a href="#生成SSH" class="headerlink" title="生成SSH"></a>生成SSH</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;邮箱&quot;</span><br></code></pre></td></tr></table></figure><h3 id="获取公钥"><a href="#获取公钥" class="headerlink" title="获取公钥"></a>获取公钥</h3><p>SSH文件存放于C:&#x2F;User&#x2F;用户&#x2F;.ssh，其中id_rsa为私钥，id_rsa.pub为公钥。</p><p>复制公钥，在GitHub-&gt;Setting-&gt;SSH and GPG keys-&gt;New SSH key，创建一个新的SSH key。</p><p>测试SSH连接</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><h2 id="推送文章到远程仓库"><a href="#推送文章到远程仓库" class="headerlink" title="推送文章到远程仓库"></a>推送文章到远程仓库</h2><h3 id="在Github上建立新仓库"><a href="#在Github上建立新仓库" class="headerlink" title="在Github上建立新仓库"></a>在Github上建立新仓库</h3><p>“+”-&gt;New respository</p><h3 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h3><p>在目录中新建一个文件夹Git，右键选择Git bash here，执行命令</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>将Git文件夹初始化为一个仓库，此时Git文件夹下会出现一个隐藏的.git文件夹。</p><h3 id="将远程仓库克隆到本地"><a href="#将远程仓库克隆到本地" class="headerlink" title="将远程仓库克隆到本地"></a>将远程仓库克隆到本地</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:用户名/仓库名.git<br></code></pre></td></tr></table></figure><h3 id="管理仓库中文件"><a href="#管理仓库中文件" class="headerlink" title="管理仓库中文件"></a>管理仓库中文件</h3><h3 id="命令add"><a href="#命令add" class="headerlink" title="命令add"></a>命令add</h3><p>在仓库文件夹下git bash here，执行命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> 单个文件<br>git <span class="hljs-built_in">add</span> 文件夹1/ 文件夹2/ <span class="hljs-built_in">..</span>.<br>git <span class="hljs-built_in">add</span> .<br></code></pre></td></tr></table></figure><h3 id="命令commit"><a href="#命令commit" class="headerlink" title="命令commit"></a>命令commit</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;注释&quot;</span><br></code></pre></td></tr></table></figure><h3 id="命令push"><a href="#命令push" class="headerlink" title="命令push"></a>命令push</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></figure><p>至此，便完成了“远程仓库的建立-&gt;本地仓库克隆-&gt;管理仓库-&gt;推送本地仓库到远程”的过程。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毕设Matlab笔记</title>
    <link href="/2023/06/26/%E6%AF%95%E8%AE%BEMatlab%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/26/%E6%AF%95%E8%AE%BEMatlab%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>毕设Matlab笔记</p><span id="more"></span><h1 id="Matlab-笔记"><a href="#Matlab-笔记" class="headerlink" title="Matlab 笔记"></a>Matlab 笔记</h1><h2 id="一、PA建模"><a href="#一、PA建模" class="headerlink" title="一、PA建模"></a>一、PA建模</h2><p>本例使用NXP Airfast LDMOS Doherty PA，工作频率3.6-3.8 GHz，增益29 dB。</p><h2 id="1、无记忆非线性模型阅读"><a href="#1、无记忆非线性模型阅读" class="headerlink" title="1、无记忆非线性模型阅读"></a>1、无记忆非线性模型阅读</h2><p>导入原始测量的功放输入输出数据（复数形式）</p><p>对输入输出数据取绝对值，然后转换为dBm</p><p>对数据进行统计histcounts，直方图</p><p>求输入数据最大值-20</p><p>找出满足条件的边缘数据的位置</p><p>建立新的表格存储满足条件的数据值</p><p>分别求输入功率，输出功率，相移的平均值</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs matlab">sampleRate = <span class="hljs-number">860160000</span>;<br><br><span class="hljs-comment">%数据转换</span><br>paInputdBm  = mag2db(<span class="hljs-built_in">abs</span>(paInput)) + <span class="hljs-number">30</span> - <span class="hljs-number">20</span>;<br>paOutputdBm  = mag2db(<span class="hljs-built_in">abs</span>(paOutput)) + <span class="hljs-number">30</span> - <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">%准备建模数据</span><br>[N,edges,idx] = histcounts(paInputdBm, <span class="hljs-string">&#x27;BinWidth&#x27;</span>, <span class="hljs-number">0.5</span>);  <span class="hljs-comment">%hiscounts函数，直方图bin计数</span><br>minInPowerdBm = <span class="hljs-built_in">max</span>(paInputdBm) - <span class="hljs-number">20</span>;  <span class="hljs-comment">%输入功率值不能小于最大输入功率20db</span><br>minIdx = <span class="hljs-built_in">find</span>(edges &lt; minInPowerdBm, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;last&#x27;</span>);<br>tableLen = <span class="hljs-built_in">length</span>(edges)-minIdx<span class="hljs-number">-1</span>;<br>inOutTable = <span class="hljs-built_in">zeros</span>(tableLen,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> p = minIdx+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(edges)<span class="hljs-number">-1</span><br>inOutTable(p-minIdx,<span class="hljs-number">1</span>) = <span class="hljs-built_in">mean</span>(paInputdBm(idx == p));   <span class="hljs-comment">% Average input power for current bin</span><br>inOutTable(p-minIdx,<span class="hljs-number">2</span>) = <span class="hljs-built_in">mean</span>(paOutputdBm(idx == p));  <span class="hljs-comment">% Average output power for current bin</span><br>inOutTable(p-minIdx,<span class="hljs-number">3</span>) = <span class="hljs-built_in">mean</span>(<span class="hljs-built_in">angle</span>(paOutput(idx == p)./paInput(idx == p))); <span class="hljs-comment">% Average phase shift for current                                                                                       bin</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%建立模型</span><br>pa = comm.MemorylessNonlinearity(<span class="hljs-string">&#x27;Method&#x27;</span>,<span class="hljs-string">&#x27;Lookup table&#x27;</span>,<span class="hljs-string">&#x27;Table&#x27;</span>,inOutTable,<span class="hljs-string">&#x27;ReferenceImpedance&#x27;</span>,<span class="hljs-number">100</span>);<br><br><span class="hljs-comment">%计算模型输出</span><br>paOutputFitMemless = pa(paInput);<br><span class="hljs-comment">%计算误差</span><br>err = <span class="hljs-built_in">abs</span>(paOutput - paOutputFitMemless)./<span class="hljs-built_in">abs</span>(paOutput);<br>rmsErrorMemless = rms(err)*<span class="hljs-number">100</span>;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;Percent RMS error in time domain is &#x27;</span> num2str(rmsErrorMemless) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><span class="hljs-comment">%绘制图形观察</span><br>helperPACharPlotTime(paOutput, paOutputFitMemless, sampleRate);<br>helperPACharPlotGain(paInput, paOutput, paOutputFitMemless);<br><br></code></pre></td></tr></table></figure><h2 id="2、记忆多项式模型阅读"><a href="#2、记忆多项式模型阅读" class="headerlink" title="2、记忆多项式模型阅读"></a>2、记忆多项式模型阅读</h2><p>程序阅读</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs matlab">modType = <span class="hljs-string">&#x27;memPoly&#x27;</span>; <span class="hljs-comment">%记忆多项式模型</span><br>memLen = <span class="hljs-number">5</span>;     <span class="hljs-comment">% M = 5</span><br>degLen = <span class="hljs-number">5</span>;     <span class="hljs-comment">% K = 5</span><br>numDataPts = <span class="hljs-built_in">length</span>(paInput);<br>halfDataPts = <span class="hljs-built_in">round</span>(numDataPts/<span class="hljs-number">2</span>);<br>fitCoefMatMem = helperPACharMemPolyModel(<span class="hljs-string">&#x27;coefficientFinder&#x27;</span>,paInput(<span class="hljs-number">1</span>:halfDataPts),paOutput(<span class="hljs-number">1</span>:halfDataPts),memLen,degLen,modType);<br><span class="hljs-built_in">disp</span>(<span class="hljs-built_in">abs</span>(fitCoefMatMem));<br><br>rmsErrorTimeMem = helperPACharMemPolyModel(<span class="hljs-string">&#x27;errorMeasure&#x27;</span>,paInput, paOutput, fitCoefMatMem, modType);<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;Percent RMS error in time domain is &#x27;</span> num2str(rmsErrorTimeMem) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br>paOutputFitMem = helperPACharMemPolyModel(<span class="hljs-string">&#x27;signalGenerator&#x27;</span>, paInput, fitCoefMatMem, modType);<br><br>helperPACharPlotTime(paOutput, paOutputFitMem, sampleRate);<br>helperPACharPlotGain(paInput, paOutput, paOutputFitMem);<br><br><br><br></code></pre></td></tr></table></figure><p>我的程序</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%x = (0 : 3);</span><br>x = paInput;<br>x = x(:);<br>xLength = <span class="hljs-built_in">length</span>(x);<br><br><span class="hljs-comment">%y = (2 : 5);</span><br>y = paOutput;<br>y = y(:);<br>yLength = <span class="hljs-built_in">length</span>(y);<br><br>M = <span class="hljs-number">3</span>;<br>K = <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">%构造(x(n) - m)矩阵，m从0到M-1, 矩阵大小为xLength*M</span><br>xm = x;<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">0</span> : M - <span class="hljs-number">1</span><br>    xm(M:xLength , m+<span class="hljs-number">1</span>) = xm(M-m:xLength-m , <span class="hljs-number">1</span>) ;<br><span class="hljs-keyword">end</span><br>xm_fix = xm; <span class="hljs-comment">%保存(x(n) - m)矩阵</span><br><br><span class="hljs-comment">%构造(x(n) - m) * |x(n) - m|^k 矩阵，矩阵大小为(xLength-M+1)*（M*K）</span><br>xmAbs = <span class="hljs-built_in">abs</span>(xm);<span class="hljs-comment">%保存|x - m|矩阵</span><br><span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span> : K<span class="hljs-number">-1</span><br>    mid = (xmAbs.^ k) .* xm_fix;<br>    xm = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>, xm, mid);<br><span class="hljs-keyword">end</span><br>xmk = xm(M:xLength,:);<br><br><span class="hljs-comment">%计算系数矩阵，矩阵大小为（M*K） * 1</span><br>coef = xmk \ y(M:xLength);<br><br><span class="hljs-comment">%带入求解yout矩阵，矩阵大小为xLength*1</span><br>yout = xm * coef;<br><br><span class="hljs-comment">% helperPACharPlotTime(y, yout, 860160000);</span><br><span class="hljs-comment">% helperPACharPlotGain(x, y, yout);</span><br><br><br><span class="hljs-comment">%通过归一化均方误差衡量功放的建模精度</span><br>NMSE = <span class="hljs-number">10</span> * <span class="hljs-built_in">log10</span>( sum ( (<span class="hljs-built_in">abs</span>(y - yout)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(y).^<span class="hljs-number">2</span>) ) ) ;<br><br><br><br><span class="hljs-comment">%AM/AM图绘制</span><br><span class="hljs-comment">%单位转换</span><br>paInputPowerdBm = mag2db(<span class="hljs-built_in">abs</span>(x)) + <span class="hljs-number">30</span> - <span class="hljs-number">20</span>;<br>paOutputPowerdBm = mag2db(<span class="hljs-built_in">abs</span>(y)) + <span class="hljs-number">30</span> - <span class="hljs-number">20</span>;<br>paOutputPowerFitdBm = mag2db(<span class="hljs-built_in">abs</span>(yout)) + <span class="hljs-number">30</span> - <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">%去除噪点</span><br>inputPowerRange = <span class="hljs-number">20</span>;<br>idxToDiscard = paInputPowerdBm &lt; (<span class="hljs-built_in">max</span>(paInputPowerdBm)-inputPowerRange);<span class="hljs-comment">%去除掉与最大输入功率相差20的点</span><br><br>paInputPowerdBm(idxToDiscard) = [];<br>paOutputPowerdBm(idxToDiscard) = [];<br>paOutputPowerFitdBm(idxToDiscard) = [];<br><br><span class="hljs-built_in">plot</span>(paInputPowerdBm, paOutputPowerdBm, <span class="hljs-string">&#x27;o&#x27;</span>, paInputPowerdBm,paOutputPowerFitdBm, <span class="hljs-string">&#x27;.&#x27;</span>)<br>grid on<br>xlabel(<span class="hljs-string">&#x27;Input Power (dBm)&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;Output Power (dBm)&#x27;</span>)<br>title(<span class="hljs-string">&#x27;AM/AM&#x27;</span>)<br><br><span class="hljs-comment">%AM/PM图绘制</span><br>paInputPhase = <span class="hljs-built_in">angle</span>(x);<br>paOutputPhase = <span class="hljs-built_in">angle</span>(y);<br>paOutputPhaseFit = <span class="hljs-built_in">angle</span>(yout);<br><br>paInputPhase(idxToDiscard) = [];<br>paOutputPhase(idxToDiscard) = [];<br>paOutputPhaseFit(idxToDiscard) = [];<br><br>paPhaseChange =  paInputPhase - paOutputPhase;<br>paPhaseChangeFit =paOutputPhaseFit - paOutputPhase;<br><br><span class="hljs-comment">%将角度集中在-pi-pi之间</span><br>lambdaWrapped = wrapToPi(paPhaseChange);<br>lambdaWrapped2 = wrapToPi(paPhaseChangeFit);<br><br><span class="hljs-built_in">plot</span>(paInputPowerdBm, lambdaWrapped, <span class="hljs-string">&#x27;o&#x27;</span>, paInputPowerdBm,lambdaWrapped2, <span class="hljs-string">&#x27;.&#x27;</span>)<br>grid on<br>xlabel(<span class="hljs-string">&#x27;Input Power (dBm)&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;Phase Change&#x27;</span>)<br>title(<span class="hljs-string">&#x27;AM/PM&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="我的程序"><a href="#我的程序" class="headerlink" title="我的程序"></a>我的程序</h2><h3 id="1、毕设论文1-矩阵处理函数"><a href="#1、毕设论文1-矩阵处理函数" class="headerlink" title="1、毕设论文1_矩阵处理函数"></a>1、毕设论文1_矩阵处理函数</h3><h4 id="1、改进后模型"><a href="#1、改进后模型" class="headerlink" title="1、改进后模型"></a>1、改进后模型</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[Xout]</span> = <span class="hljs-title">MatrixDeal</span><span class="hljs-params">(x,M,K)</span></span><br><br><br><span class="hljs-comment">%构造x(n - m)矩阵，m从1到M, 矩阵大小为xLength*M,有效长度为Xlength-M</span><br>xnm = x;<br>xhalfLength = <span class="hljs-built_in">length</span>(xnm);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">1</span> : M<br>    xnm(M+<span class="hljs-number">1</span>:xhalfLength , m) = x(M-m+<span class="hljs-number">1</span>:xhalfLength-m , <span class="hljs-number">1</span>) ;  <span class="hljs-comment">%(m从1-M)</span><br><span class="hljs-keyword">end</span><br><br>xnm_fix = xnm; <span class="hljs-comment">%保存x(n - m)矩阵</span><br>xnm_fixabs = <span class="hljs-built_in">abs</span>(xnm_fix);<span class="hljs-comment">%保存 |x(n - m)| 矩阵</span><br><br>xn_fix = x;<span class="hljs-comment">%保存 x(n) 矩阵</span><br>xn_fixabs = <span class="hljs-built_in">abs</span>(xn_fix);<span class="hljs-comment">%保存 |x(n)| 矩阵</span><br><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-comment">%m从0开始到M</span><br>xnm_0 = x;<br>xhalfLength = <span class="hljs-built_in">length</span>(xnm_0);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">0</span> : M<br>    xnm_0(M+<span class="hljs-number">1</span>:xhalfLength , m+<span class="hljs-number">1</span>) = x(M-m+<span class="hljs-number">1</span>:xhalfLength-m , <span class="hljs-number">1</span>) ;  <span class="hljs-comment">%(m从1-M)</span><br><span class="hljs-keyword">end</span><br>xnm_fix_0 = xnm_0; <span class="hljs-comment">%保存x(n - m)矩阵</span><br>xnm_fixabs_0 = <span class="hljs-built_in">abs</span>(xnm_fix_0);<span class="hljs-comment">%保存 |x(n - m)| 矩阵</span><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><br><span class="hljs-comment">%构造Bk矩阵</span><br>Bk = (<span class="hljs-number">0</span>:K<span class="hljs-number">-1</span>);<br>Bk = Bk/K;<br><br><br><span class="hljs-comment">%f0</span><br><span class="hljs-comment">%构造 x(n-m)矩阵，矩阵大小为xLength * (M*k)</span><br><span class="hljs-comment">% X1 = xnm_fix(M+1:xhalfLength,:);</span><br><br>X1 = xnm_fix_0(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><span class="hljs-comment">%F21</span><br><span class="hljs-comment">%构造| ( |x(n-m)| - Bk ) | * x(n - m) * |x(n)| 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_F21 = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xnm_fix .* xn_fixabs;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(k) ) .* xnm_fix .* xn_fixabs;<br>    xmk_F21 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_F21,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X2 = xmk_F21(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%f22</span><br><span class="hljs-comment">%构造 | ( |x(n-m)| - Bk ) | * x(n) 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f22 = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xn_fix;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(k) ) .* xn_fix;<br>    xmk_f22 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f22,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X3 = xmk_f22(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%F23</span><br><span class="hljs-comment">%构造  | ( |x(n-m)| - Bk ) | * x(n-m) 矩阵，矩阵大小为xLength * (M*k)</span><br><span class="hljs-comment">% xmk_F23 = abs( xnm_fixabs - Bk(1) ) .* xnm_fix;</span><br><span class="hljs-comment">% for k = 2 : K</span><br><span class="hljs-comment">%     mid = abs( xnm_fixabs - Bk(k) ) .* xnm_fix;</span><br><span class="hljs-comment">%     xmk_F23 = cat(2,xmk_F23,mid);</span><br><span class="hljs-comment">% end</span><br><span class="hljs-comment">% %矩阵大小为(xLength-M) * (M*K)</span><br><span class="hljs-comment">% X4 = xmk_F23(M+1:xhalfLength,:);</span><br><br><br><br>xmk_F23 = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(<span class="hljs-number">1</span>) ) .* xnm_fix_0;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(k) ) .* xnm_fix_0;<br>    xmk_F23 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_F23,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X4 = xmk_F23(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%f24</span><br><span class="hljs-comment">%构造 | ( |x(n)| - Bk ) | * x(n-m) 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f24 = <span class="hljs-built_in">abs</span>( xn_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xnm_fix;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xn_fixabs - Bk(k) ) .* xnm_fix;<br>    xmk_f24 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f24,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X5 = xmk_f24(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%合并矩阵，矩阵大小为(xLength-M) *（M*K*4+M） </span><br>Xout = [X1 X2 X3 X4 X5];<br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="2、DVR模型"><a href="#2、DVR模型" class="headerlink" title="2、DVR模型"></a>2、DVR模型</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[Xout]</span> = <span class="hljs-title">MatrixDeal_DVR</span><span class="hljs-params">(x,M,K)</span></span><br><br><br><span class="hljs-comment">%构造x(n - m)矩阵，m从1到M, 矩阵大小为xLength*M,有效长度为Xlength-M-1</span><br>xnm = x;<br>xhalfLength = <span class="hljs-built_in">length</span>(xnm);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">1</span> : M<br>    xnm(M+<span class="hljs-number">1</span>:xhalfLength , m) = x(M-m+<span class="hljs-number">1</span>:xhalfLength-m , <span class="hljs-number">1</span>) ;<br><span class="hljs-keyword">end</span><br><br>xnm_fix = xnm; <span class="hljs-comment">%保存x(n - m)矩阵</span><br>xnm_fixabs = <span class="hljs-built_in">abs</span>(xnm_fix);<span class="hljs-comment">%保存 |x(n - m)| 矩阵</span><br>    <br>xn_fix = x;<span class="hljs-comment">%保存 x(n) 矩阵</span><br>xn_fixabs = <span class="hljs-built_in">abs</span>(xn_fix);<span class="hljs-comment">%保存 |x(n)| 矩阵</span><br><br><span class="hljs-comment">%构造Bk矩阵</span><br>Bk = (<span class="hljs-number">0</span>:K<span class="hljs-number">-1</span>);<br>Bk = Bk/K;<br><br><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-comment">%m从0开始到M</span><br>xnm_0 = x;<br>xhalfLength = <span class="hljs-built_in">length</span>(xnm_0);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">0</span> : M<br>    xnm_0(M+<span class="hljs-number">1</span>:xhalfLength , m+<span class="hljs-number">1</span>) = x(M-m+<span class="hljs-number">1</span>:xhalfLength-m , <span class="hljs-number">1</span>) ;  <span class="hljs-comment">%(m从1-M)</span><br><span class="hljs-keyword">end</span><br>xnm_fix_0 = xnm_0; <span class="hljs-comment">%保存x(n - m)矩阵</span><br>xnm_fixabs_0 = <span class="hljs-built_in">abs</span>(xnm_fix_0);<span class="hljs-comment">%保存 |x(n - m)| 矩阵</span><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><br><br><span class="hljs-comment">% %构造xAngle(n-m)矩阵</span><br><span class="hljs-comment">% xAngle = angle(xnm);</span><br><span class="hljs-comment">% for m = 1 : M</span><br><span class="hljs-comment">%     xAngle(M+1:xhalfLength , m) = xAngle(M-m+1:xhalfLength-m , 1) ;</span><br><span class="hljs-comment">% end</span><br><span class="hljs-comment">% xAngle_fix = 1i * xAngle;%保存i * xAngle(n-m)矩阵</span><br><br><span class="hljs-comment">%构造xAngle(n-m)矩阵</span><br>xAngle = <span class="hljs-built_in">angle</span>(xnm);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">0</span> : M<br>    xAngle(M+<span class="hljs-number">1</span>:xhalfLength , m+<span class="hljs-number">1</span>) = xAngle(M-m+<span class="hljs-number">1</span>:xhalfLength-m , <span class="hljs-number">1</span>) ;<br><span class="hljs-keyword">end</span><br>xAngle_fix = <span class="hljs-number">1</span><span class="hljs-built_in">i</span> * xAngle;<span class="hljs-comment">%保存i * xAngle(n-m)矩阵</span><br><br><span class="hljs-comment">%f0</span><br><span class="hljs-comment">%构造 x(n-m)矩阵，矩阵大小为xLength * (M*k)</span><br><span class="hljs-comment">% X1 = xnm_fix(M+1:xhalfLength,:);</span><br><br>X1 = xnm_fix_0(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><span class="hljs-comment">% %f1</span><br><span class="hljs-comment">% %构造 | ( |x(n-m)| - Bk ) | * e^(xAngle_fix) 矩阵</span><br><span class="hljs-comment">% xmk_f1 = abs( xnm_fixabs - Bk(1) ) .* exp(xAngle_fix);</span><br><span class="hljs-comment">% for k = 2 : K</span><br><span class="hljs-comment">%     mid = abs( xnm_fixabs - Bk(k) ) .* exp(xAngle_fix);</span><br><span class="hljs-comment">%     xmk_f1 = cat(2,xmk_f1,mid);</span><br><span class="hljs-comment">% end</span><br><span class="hljs-comment">% X2 = xmk_f1(M+1:xhalfLength,:);</span><br><br><span class="hljs-comment">%f1</span><br><span class="hljs-comment">%构造 | ( |x(n-m)| - Bk ) | * e^(xAngle_fix) 矩阵</span><br>xmk_f1 = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(<span class="hljs-number">1</span>) ) .* <span class="hljs-built_in">exp</span>(xAngle_fix);<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(k) ) .* <span class="hljs-built_in">exp</span>(xAngle_fix);<br>    xmk_f1 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f1,mid);<br><span class="hljs-keyword">end</span><br>X2 = xmk_f1(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">% %f21</span><br><span class="hljs-comment">% %构造| ( |x(n-m)| - Bk ) | * e^(xAngle_fix) * |x(n)| 矩阵，矩阵大小为xLength * (M*k)</span><br><span class="hljs-comment">% xmk_f21 = abs( xnm_fixabs - Bk(1) ) .* exp(xAngle_fix) .* xn_fixabs;</span><br><span class="hljs-comment">% for k = 2 : K</span><br><span class="hljs-comment">%     mid = abs( xnm_fixabs - Bk(k) ) .* exp(xAngle_fix) .* xn_fixabs;</span><br><span class="hljs-comment">%     xmk_f21 = cat(2,xmk_f21,mid);</span><br><span class="hljs-comment">% end</span><br><span class="hljs-comment">% %矩阵大小为(xLength-M) * (M*K)</span><br><span class="hljs-comment">% X3 = xmk_f21(M+1:xhalfLength,:);</span><br><br><span class="hljs-comment">%f21</span><br><span class="hljs-comment">%构造| ( |x(n-m)| - Bk ) | * e^(xAngle_fix) * |x(n)| 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f21 = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(<span class="hljs-number">1</span>) ) .* <span class="hljs-built_in">exp</span>(xAngle_fix) .* xn_fixabs;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs_0 - Bk(k) ) .* <span class="hljs-built_in">exp</span>(xAngle_fix) .* xn_fixabs;<br>    xmk_f21 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f21,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X3 = xmk_f21(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%f22</span><br><span class="hljs-comment">%构造| ( |x(n-m)| - Bk ) | * x(n) 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f22 = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xn_fix;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(k) ) .* xn_fix;<br>    xmk_f22 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f22,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X4 = xmk_f22(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%f23</span><br><span class="hljs-comment">%构造| ( |x(n-m)| - Bk ) | * x(n-m) 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f23 = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xnm_fix;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xnm_fixabs - Bk(k) ) .* xnm_fix;<br>    xmk_f23 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f23,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X5 = xmk_f23(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><br><span class="hljs-comment">%f24</span><br><span class="hljs-comment">%构造 | ( |x(n-m)| - Bk ) | * x(n-m) 矩阵，矩阵大小为xLength * (M*k)</span><br>xmk_f24 = <span class="hljs-built_in">abs</span>( xn_fixabs - Bk(<span class="hljs-number">1</span>) ) .* xnm_fix;<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">2</span> : K<br>    mid = <span class="hljs-built_in">abs</span>( xn_fixabs - Bk(k) ) .* xnm_fix;<br>    xmk_f24 = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>,xmk_f24,mid);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>X6 = xmk_f24(M+<span class="hljs-number">1</span>:xhalfLength,:);<br><br><span class="hljs-comment">%合并矩阵，矩阵大小为(xLength-M) *（M*K*4+M） </span><br>Xout = [X1 X2 X3 X4 X5 X6];<br><br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="3、记忆多项式"><a href="#3、记忆多项式" class="headerlink" title="3、记忆多项式"></a>3、记忆多项式</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[Xout]</span> = <span class="hljs-title">MatrixDeal_MP</span><span class="hljs-params">(x,M,K)</span></span><br><span class="hljs-comment">%UNTITLED 此处提供此函数的摘要</span><br><span class="hljs-comment">%   此处提供详细说明</span><br><br><br><span class="hljs-comment">%构造(x(n) - m)矩阵，m从0到M-1, 矩阵大小为xLength*M</span><br>xm = x;<br>xmLength = <span class="hljs-built_in">length</span>(xm);<br><span class="hljs-keyword">for</span> m = <span class="hljs-number">0</span> : M - <span class="hljs-number">1</span><br>    xm(M:xmLength , m+<span class="hljs-number">1</span>) = xm(M-m:xmLength-m , <span class="hljs-number">1</span>) ;<span class="hljs-comment">%有效数据从第M行开始</span><br><span class="hljs-keyword">end</span><br>xm_fix = xm; <span class="hljs-comment">%保存(x(n) - m)矩阵</span><br><br><span class="hljs-comment">%构造(x(n) - m) * |x(n) - m|^k 矩阵，矩阵大小为(xLength-M+1)*（M*K）</span><br>xmAbs = <span class="hljs-built_in">abs</span>(xm_fix);<span class="hljs-comment">%保存|x - m|矩阵</span><br><span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span> : K<span class="hljs-number">-1</span><br>    mid = (xmAbs.^ k) .* xm_fix;<br>    xm = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>, xm, mid);<br><span class="hljs-keyword">end</span><br>xmk = xm(M:xmLength,:);<br><br><span class="hljs-comment">%矩阵大小为(xLength-M) * (M*K)</span><br>Xout = xmk;<br><br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="2、毕设论文1-绘图函数"><a href="#2、毕设论文1-绘图函数" class="headerlink" title="2、毕设论文1_绘图函数"></a>2、毕设论文1_绘图函数</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span>   <span class="hljs-title">paCharPlot</span><span class="hljs-params">(paInput,paOutput,paOutputFit,Type)</span></span><br><br>paInputMagnitude = <span class="hljs-built_in">abs</span>(paInput) ;<br>paOutputMagnitude = <span class="hljs-built_in">abs</span>(paOutput) ;<br>paOutputMagnitudeFit = <span class="hljs-built_in">abs</span>(paOutputFit) ;<br><br>idxToDiscard = paOutputMagnitudeFit &gt; <span class="hljs-number">1</span> | paOutputMagnitude &gt; <span class="hljs-number">1</span>;<br>paInputMagnitude(idxToDiscard) = [];<br>paOutputMagnitude(idxToDiscard) = [];<br>paOutputMagnitudeFit(idxToDiscard) = [];<br><br>paGain = paOutputMagnitude - paInputMagnitude;<br>paGainFit = paOutputMagnitudeFit - paInputMagnitude;<br><br><br><span class="hljs-comment">%AM/PM图绘制</span><br>paInputPhase = <span class="hljs-built_in">angle</span>(paInput);<br>paOutputPhase = <span class="hljs-built_in">angle</span>(paOutput);<br>paOutputPhaseFit = <span class="hljs-built_in">angle</span>(paOutputFit);<br><br>paInputPhase(idxToDiscard) = [];<br>paOutputPhase(idxToDiscard) = [];<br>paOutputPhaseFit(idxToDiscard) = [];<br><br>paPhaseChange =  paInputPhase - paOutputPhase;<br>paPhaseChangeFit =paInputPhase - paOutputPhaseFit;<br><br><span class="hljs-comment">%将角度数据集中在-pi-pi之间</span><br>lambdaWrapped = wrapToPi(paPhaseChange);<br>lambdaWrappedFit = wrapToPi(paPhaseChangeFit);    <br><br><span class="hljs-comment">% lambdaWrapped = rad2deg(lambdaWrapped);</span><br><span class="hljs-comment">% lambdaWrapped2 = rad2deg(lambdaWrapped2);</span><br><br><br><span class="hljs-keyword">switch</span> Type<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;AM/AM&#x27;</span><br>        <span class="hljs-built_in">figure</span>;<br>        <span class="hljs-built_in">plot</span>(paInputMagnitude, paOutputMagnitude, <span class="hljs-string">&#x27;.&#x27;</span>, paInputMagnitude,paOutputMagnitudeFit, <span class="hljs-string">&#x27;.&#x27;</span>)<br>        grid on<br>        xlabel(<span class="hljs-string">&#x27;Input Magnitude&#x27;</span>)<br>        ylabel(<span class="hljs-string">&#x27;Output Magnitude&#x27;</span>)<br>        <span class="hljs-built_in">legend</span>(&#123;<span class="hljs-string">&#x27;Actual&#x27;</span>,<span class="hljs-string">&#x27;Model/Linear&#x27;</span>&#125;,<span class="hljs-string">&#x27;Location&#x27;</span>,<span class="hljs-string">&#x27;northwest&#x27;</span>)<br>        title(<span class="hljs-string">&#x27;AM/AM&#x27;</span>)<br><br><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;PM/AM&#x27;</span><br>        <span class="hljs-built_in">figure</span>;<br>        <span class="hljs-built_in">plot</span>(paInputMagnitude, lambdaWrapped, <span class="hljs-string">&#x27;.&#x27;</span>, paInputMagnitude,lambdaWrappedFit, <span class="hljs-string">&#x27;.&#x27;</span>)<br>        grid on<br>        xlabel(<span class="hljs-string">&#x27;Input Magnitude&#x27;</span>)<br>        ylabel(<span class="hljs-string">&#x27;Phase Change&#x27;</span>)<br>        <span class="hljs-built_in">legend</span>(&#123;<span class="hljs-string">&#x27;Actual&#x27;</span>,<span class="hljs-string">&#x27;Model/Linear&#x27;</span>&#125;,<span class="hljs-string">&#x27;Location&#x27;</span>,<span class="hljs-string">&#x27;northwest&#x27;</span>)<br>        title(<span class="hljs-string">&#x27;AM/PM&#x27;</span>)<br><br>       <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Gain&#x27;</span><br>        <span class="hljs-built_in">figure</span>;<br>        <span class="hljs-built_in">plot</span>(paInputMagnitude, paGain, <span class="hljs-string">&#x27;.&#x27;</span>, paInputMagnitude,paGainFit, <span class="hljs-string">&#x27;.&#x27;</span>)<br>        grid on<br>        xlabel(<span class="hljs-string">&#x27;Input Magnitude&#x27;</span>)<br>        ylabel(<span class="hljs-string">&#x27;Gain&#x27;</span>)<br>        <span class="hljs-built_in">legend</span>(&#123;<span class="hljs-string">&#x27;Actual&#x27;</span>,<span class="hljs-string">&#x27;Model/Linear&#x27;</span>&#125;,<span class="hljs-string">&#x27;Location&#x27;</span>,<span class="hljs-string">&#x27;northwest&#x27;</span>)<br>        title(<span class="hljs-string">&#x27;PA Gain&#x27;</span>)<br><br><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Couple&#x27;</span><br>        yyaxis left;<br>        <span class="hljs-built_in">plot</span>(paInputPowerdBm, paOutputPowerdBm, <span class="hljs-string">&#x27;o&#x27;</span>, paInputPowerdBm,paOutputPowerFitdBm, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        yyaxis right;<br>        <span class="hljs-built_in">plot</span>(paInputPowerdBm, lambdaWrapped, <span class="hljs-string">&#x27;o&#x27;</span>, paInputPowerdBm,lambdaWrapped2, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-built_in">hold</span> on<br><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="3、毕设论文1-模型建立"><a href="#3、毕设论文1-模型建立" class="headerlink" title="3、毕设论文1_模型建立"></a>3、毕设论文1_模型建立</h3><h4 id="1、改进后模型-1"><a href="#1、改进后模型-1" class="headerlink" title="1、改进后模型"></a>1、改进后模型</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%本例使用NXP Airfast LDMOS Doherty PA，工作频率3.6-3.8 GHz，增益29 dB。</span><br><span class="hljs-comment">%带宽100MHZ    100000000</span><br><span class="hljs-comment">%采样率sampleRate = 860160000</span><br><span class="hljs-comment">%信号类型OFDM</span><br><span class="hljs-comment">%If testSignal is &quot;OFDM&quot;, this example uses a 5G-like OFDM waveform with 64-QAM modulated signals for each subcarrier.</span><br><span class="hljs-comment">% If testSignal is &quot;Tones&quot;, this example uses two tones at 1.8 MHz and 2.6 MHz, to test the intermodulation caused by the PA.</span><br><br><br>sampleRate = <span class="hljs-number">860160000</span>;<br><span class="hljs-comment">% sampleRate = 430080000;</span><br>testSignal = <span class="hljs-string">&#x27;OFDM&#x27;</span>;<br><br><span class="hljs-comment">%读取数据</span><br><span class="hljs-comment">% x = (0 : 5);</span><br>x = paInput;<br><span class="hljs-comment">% x = txData1;</span><br><span class="hljs-comment">% x = paInput_40MHZ;</span><br>x = x(:);<br>xLength = <span class="hljs-built_in">length</span>(x);<br><span class="hljs-comment">%使用前半部分数据用于参数提取，后半部分数据用于模型验证</span><br>half = <span class="hljs-built_in">round</span>(xLength/<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">% y = (2 : 7);</span><br>y = paOutput;<br><span class="hljs-comment">% y = tout;</span><br><span class="hljs-comment">% y = paOutput_40MHZ;</span><br>y = y(:);<br>yLength = <span class="hljs-built_in">length</span>(y);<br><br><span class="hljs-comment">%将数据归一化</span><br><span class="hljs-comment">% x = x / abs(max(x));</span><br><span class="hljs-comment">% y = y / abs(max(y));</span><br><br>M = <span class="hljs-number">2</span>;<br>K = <span class="hljs-number">8</span>;<br><br><span class="hljs-comment">%计算PA系数矩阵，矩阵大小为（M*K*4+M） * 1</span><br><br><span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>XcoefPA = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <br>YcoefPA = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefPA = x(1:half);  </span><br><span class="hljs-comment">% YcoefPA = y(1:half);  </span><br><br><span class="hljs-comment">%去除多余数据</span><br>YcoefPA = YcoefPA(M+<span class="hljs-number">1</span>:half) ;                   <span class="hljs-comment">%经过处理后，数据去除掉前M个</span><br>coefPA = MatrixDeal(XcoefPA,M,K) \ YcoefPA;<br><br><span class="hljs-comment">%最小二乘算法</span><br><span class="hljs-comment">% coefPA  = inv( (XcoefPA&#x27;) *XcoefPA ) * (XcoefPA&#x27;) * YcoefPA;</span><br><span class="hljs-comment">% coefPA  = ( (XcoefPA&#x27;) *XcoefPA ) \ (XcoefPA&#x27;) * YcoefPA;</span><br><br><span class="hljs-comment">%带入验证PA模型输出，矩阵大小为xLength*1</span><br>XmodelPA = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );      <span class="hljs-comment">%使用后一半的数据验证模型，将数据归一化</span><br>YmodelPA = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><br><span class="hljs-comment">% XmodelPA = x(half:xLength);      %使用后一半的数据验证模型，将数据归一化</span><br><span class="hljs-comment">% YmodelPA = y(half:xLength); </span><br><br>YmodelFitPA = MatrixDeal(XmodelPA,M,K) * coefPA;   <span class="hljs-comment">%计算模型输出（输出后的数据减少前M个）</span><br><br><span class="hljs-comment">%去除多余数据</span><br>XmodelPA = XmodelPA(M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(XmodelPA));<br>YmodelPA = YmodelPA(M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(YmodelPA));<br><br><span class="hljs-comment">%通过归一化均方误差衡量功放的建模精度</span><br>NMSE = <span class="hljs-number">10</span> * <span class="hljs-built_in">log10</span>( sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - YmodelFitPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(YmodelPA)).^<span class="hljs-number">2</span> ) ) ;<br><br><span class="hljs-comment">%计算未线性化的EVM</span><br>EVM_withoutDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - XmodelPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XmodelPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withoutDPD is &#x27;</span> num2str(EVM_withoutDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br><span class="hljs-comment">% paCharPlot(XmodelPA,YmodelPA,XmodelPA,&#x27;AM/AM&#x27;);</span><br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><span class="hljs-comment">% paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,&#x27;Gain&#x27;);</span><br><br><br><span class="hljs-comment">%观察频谱</span><br><span class="hljs-comment">%sa = helperPACharPlotSpectrum([YmodelPA  YmodelFitPA],&#123;&#x27;Actual PA Output&#x27;, &#x27;Model PA Output&#x27;&#125;, sampleRate,testSignal);</span><br><br><span class="hljs-comment">%预失真器建立</span><br><br><span class="hljs-comment">%预失真器参数提取</span><br>XcoefDPD = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>YcoefDPD = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefDPD = x(1:half);  %使用前一半数据估计参数，将数据归一化</span><br><span class="hljs-comment">% YcoefDPD = y(1:half);  </span><br><br>XcoefDPD = XcoefDPD(M+<span class="hljs-number">1</span>:half);                     <span class="hljs-comment">%将PA实际输入数据作为输出数据，取前一半数据</span><br>coefDPD = MatrixDeal(YcoefDPD,M,K) \ XcoefDPD;      <span class="hljs-comment">%计算得到DPD参数模型，与PA行为模型一致</span><br><br><span class="hljs-comment">%计算DPD模型输出</span><br>XmodelDPD = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );         <span class="hljs-comment">%使用后一半数据进行DPD模型验证</span><br>YmodelDPD = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><br><span class="hljs-comment">% XmodelDPD = x(half:xLength);         %使用后一半数据进行DPD模型验证</span><br><span class="hljs-comment">% YmodelDPD = y(half:xLength); </span><br><br>YmodelFitDPD = MatrixDeal(XmodelDPD,M,K) * coefDPD;  <span class="hljs-comment">%计算得到DPD输出（输出数据减少M个）</span><br><br><br><span class="hljs-comment">%去除多余数据</span><br><span class="hljs-comment">% %对比PA模型与DPD模型的非线性特性</span><br><span class="hljs-comment">% XmodelDPD = x(half+M:xLength,:);         %实际用于DPD模型验证的输入数据(去除前M个)</span><br><span class="hljs-comment">% YmodelDPD = y(half+M:yLength,:);         %实际的DPD模型的输出数据（去除前M个）</span><br><span class="hljs-comment">% paCharPlot(XmodelDPD,YmodelFitPA,YmodelFitDPD,&#x27;AM/AM&#x27;);</span><br><br><br><span class="hljs-comment">%将DPD模型输出，输入到PA模型中</span><br>Ylinear = MatrixDeal(YmodelFitDPD,M,K) * coefPA;<br><br><span class="hljs-comment">%计算误差向量幅度EVM</span><br>XDPDPA = XmodelDPD(M+M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(XmodelDPD));<br>YDPDPA = YmodelDPD(M+M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(YmodelDPD));<br><br>EVM_withDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(Ylinear - XDPDPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XDPDPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withDPD is &#x27;</span> num2str(EVM_withDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br><span class="hljs-comment">% % paCharPlot(XDPDPA,XDPDPA,Ylinear,&#x27;AM/AM&#x27;);</span><br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><span class="hljs-comment">% paCharPlot(XDPDPA,YDPDPA,Ylinear,&#x27;Gain&#x27;);</span><br><br><span class="hljs-comment">%邻信道功率比ACPR</span><br><span class="hljs-comment">%sa = helperPACharPlotSpectrum([YDPDPA  Ylinear],&#123;&#x27;Actual PA Output&#x27;, &#x27;with DPD Output&#x27;&#125;, sampleRate,testSignal);</span><br><br><br></code></pre></td></tr></table></figure><h4 id="2、DVR模型-1"><a href="#2、DVR模型-1" class="headerlink" title="2、DVR模型"></a>2、DVR模型</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%本例使用NXP Airfast LDMOS Doherty PA，工作频率3.6-3.8 GHz，增益29 dB。</span><br><span class="hljs-comment">%带宽100MHZ</span><br><span class="hljs-comment">%采样率sampleRate = 860160000</span><br><span class="hljs-comment">%信号类型OFDM</span><br><span class="hljs-comment">%If testSignal is &quot;OFDM&quot;, this example uses a 5G-like OFDM waveform with 64-QAM modulated signals for each subcarrier.</span><br><span class="hljs-comment">% If testSignal is &quot;Tones&quot;, this example uses two tones at 1.8 MHz and 2.6 MHz, to test the intermodulation caused by the PA.</span><br><br><br>sampleRate = <span class="hljs-number">860160000</span>;<br><span class="hljs-comment">% sampleRate = 430080000;</span><br>testSignal = <span class="hljs-string">&#x27;OFDM&#x27;</span>;<br><br><span class="hljs-comment">%读取数据</span><br><span class="hljs-comment">% x = (0 : 5);</span><br>x = paInput;<br><span class="hljs-comment">% x = txData1;</span><br><span class="hljs-comment">% x = paInput_40MHZ;</span><br>x = x(:);<br>xLength = <span class="hljs-built_in">length</span>(x);<br><span class="hljs-comment">%使用前半部分数据用于参数提取，后半部分数据用于模型验证</span><br>half = <span class="hljs-built_in">round</span>(xLength/<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">% y = (2 : 7);</span><br>y = paOutput;<br><span class="hljs-comment">% y = tout;</span><br><span class="hljs-comment">% y = paOutput_40MHZ;</span><br>y = y(:);<br>yLength = <span class="hljs-built_in">length</span>(y);<br><br><span class="hljs-comment">%将数据归一化</span><br><span class="hljs-comment">% x = x / abs(max(x));</span><br><span class="hljs-comment">% y = y / abs(max(y));</span><br><br><br><br>M = <span class="hljs-number">2</span>;<br>K = <span class="hljs-number">8</span>;<br><br><span class="hljs-comment">%计算PA系数矩阵，矩阵大小为（M*K*4+M） * 1</span><br><br><span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>XcoefPA = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <br>YcoefPA = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefPA = x(1:half);  </span><br><span class="hljs-comment">% YcoefPA = y(1:half);  </span><br><br><span class="hljs-comment">%去除多余数据</span><br>YcoefPA = YcoefPA(M+<span class="hljs-number">1</span>:half) ;                   <span class="hljs-comment">%经过处理后，数据去除掉前M个</span><br>coefPA = MatrixDeal_DVR(XcoefPA,M,K) \ YcoefPA;<br><br><span class="hljs-comment">%最小二乘算法</span><br><span class="hljs-comment">% coefPA  = inv( (XcoefPA&#x27;) *XcoefPA ) * (XcoefPA&#x27;) * YcoefPA;</span><br><span class="hljs-comment">% coefPA  = ( (XcoefPA&#x27;) *XcoefPA ) \ (XcoefPA&#x27;) * YcoefPA;</span><br><br><span class="hljs-comment">%带入验证PA模型输出，矩阵大小为xLength*1</span><br>XmodelPA = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );      <span class="hljs-comment">%使用后一半的数据验证模型，将数据归一化</span><br>YmodelPA = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><br><span class="hljs-comment">% XmodelPA = x(half:xLength);      %使用后一半的数据验证模型，将数据归一化</span><br><span class="hljs-comment">% YmodelPA = y(half:xLength); </span><br><br>YmodelFitPA = MatrixDeal_DVR(XmodelPA,M,K) * coefPA;   <span class="hljs-comment">%计算模型输出（输出后的数据减少前M个）</span><br><br><span class="hljs-comment">%去除多余数据</span><br>XmodelPA = XmodelPA(M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(XmodelPA));<br>YmodelPA = YmodelPA(M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(YmodelPA));<br><br><span class="hljs-comment">%通过归一化均方误差衡量功放的建模精度</span><br>NMSE = <span class="hljs-number">10</span> * <span class="hljs-built_in">log10</span>( sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - YmodelFitPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(YmodelPA)).^<span class="hljs-number">2</span> ) ) ;<br><br><span class="hljs-comment">%计算未线性化的EVM</span><br>EVM_withoutDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - XmodelPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XmodelPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withoutDPD is &#x27;</span> num2str(EVM_withoutDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br><span class="hljs-comment">% paCharPlot(XmodelPA,YmodelPA,XmodelPA,&#x27;AM/AM&#x27;);</span><br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><br><br><span class="hljs-comment">%观察频谱</span><br><span class="hljs-comment">%sa = helperPACharPlotSpectrum([YmodelPA  YmodelFitPA],&#123;&#x27;Actual PA Output&#x27;, &#x27;Model PA Output&#x27;&#125;, sampleRate,testSignal);</span><br><br><br><span class="hljs-comment">%预失真器建立</span><br><br><span class="hljs-comment">%预失真器参数提取</span><br>XcoefDPD = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>YcoefDPD = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefDPD = x(1:half);  %使用前一半数据估计参数，将数据归一化</span><br><span class="hljs-comment">% YcoefDPD = y(1:half);  </span><br><br>XcoefDPD = XcoefDPD(M+<span class="hljs-number">1</span>:half);                     <span class="hljs-comment">%将PA实际输入数据作为输出数据，取前一半数据</span><br>coefDPD = MatrixDeal_DVR(YcoefDPD,M,K) \ XcoefDPD;      <span class="hljs-comment">%计算得到DPD参数模型，与PA行为模型一致</span><br><br><span class="hljs-comment">%计算DPD模型输出</span><br>XmodelDPD = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );         <span class="hljs-comment">%使用后一半数据进行DPD模型验证</span><br>YmodelDPD = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><br><span class="hljs-comment">% XmodelDPD = x(half:xLength);         %使用后一半数据进行DPD模型验证</span><br><span class="hljs-comment">% YmodelDPD = y(half:xLength); </span><br><br>YmodelFitDPD = MatrixDeal_DVR(XmodelDPD,M,K) * coefDPD;  <span class="hljs-comment">%计算得到DPD输出（输出数据减少M个）</span><br><br><br><span class="hljs-comment">%去除多余数据</span><br><span class="hljs-comment">% %对比PA模型与DPD模型的非线性特性</span><br><span class="hljs-comment">% XmodelDPD = x(half+M:xLength,:);         %实际用于DPD模型验证的输入数据(去除前M个)</span><br><span class="hljs-comment">% YmodelDPD = y(half+M:yLength,:);         %实际的DPD模型的输出数据（去除前M个）</span><br><span class="hljs-comment">% paCharPlot(XmodelDPD,YmodelFitPA,YmodelFitDPD,&#x27;AM/AM&#x27;);</span><br><br><br><span class="hljs-comment">%将DPD模型输出，输入到PA模型中</span><br>Ylinear = MatrixDeal_DVR(YmodelFitDPD,M,K) * coefPA;<br><br><span class="hljs-comment">%计算误差向量幅度EVM</span><br>XDPDPA = XmodelDPD(M+M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(XmodelDPD));<br>YDPDPA = YmodelDPD(M+M+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(YmodelDPD));<br><br>EVM_withDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(Ylinear - XDPDPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XDPDPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withDPD is &#x27;</span> num2str(EVM_withDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br><span class="hljs-comment">% paCharPlot(XDPDPA,XDPDPA,Ylinear,&#x27;AM/AM&#x27;);</span><br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><br><span class="hljs-comment">%邻信道功率比ACPR</span><br><span class="hljs-comment">%sa = helperPACharPlotSpectrum([YDPDPA  Ylinear],&#123;&#x27;Actual PA Output&#x27;, &#x27;with DPD Output&#x27;&#125;, sampleRate,testSignal);</span><br><br><br></code></pre></td></tr></table></figure><h4 id="3、MP模型"><a href="#3、MP模型" class="headerlink" title="3、MP模型"></a>3、MP模型</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% % 为了表征AM/AM传递函数，计算输入功率值范围内的平均输出功率。</span><br><span class="hljs-comment">% % 测量的单位是伏，总体阻抗为100欧姆，</span><br><span class="hljs-comment">% % 在发射器和接收器之间划分。</span><br><span class="hljs-comment">% % 将测量的基带样本转换为dBm的功率值。</span><br><span class="hljs-comment">% % +30 dB项用于dBW到dBm的转换，</span><br><span class="hljs-comment">% % -20 dB项用于100欧姆阻抗。</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% %mag2db函数用于将振幅转换为dB </span><br><span class="hljs-comment">% %原始输入输出数据是复数，绝对值转换为功率</span><br><span class="hljs-comment">% paInputdBm  = mag2db(abs(paInput)) + 30 - 20;</span><br><span class="hljs-comment">% paOutputdBm  = mag2db(abs(paOutput)) + 30 - 20;</span><br><br><br><span class="hljs-comment">% modType = &#x27;memPoly&#x27;;</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% memLen = 3;</span><br><span class="hljs-comment">% degLen = 5;</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% numDataPts = length(paInput);</span><br><span class="hljs-comment">% halfDataPts = round(numDataPts/2);</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% fitCoefMatMem = helperPACharMemPolyModel(&#x27;coefficientFinder&#x27;, paInput(1:halfDataPts),paOutput(1:halfDataPts),memLen,degLen,modType);</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% disp(abs(fitCoefMatMem));</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% rmsErrorTimeMem = helperPACharMemPolyModel(&#x27;errorMeasure&#x27;, paInput, paOutput, fitCoefMatMem, modType);</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% disp([&#x27;Percent RMS error in time domain is &#x27; num2str(rmsErrorTimeMem) &#x27;%&#x27;]);</span><br><span class="hljs-comment">% paOutputFitMem = helperPACharMemPolyModel(&#x27;signalGenerator&#x27;,  paInput, fitCoefMatMem, modType);</span><br><span class="hljs-comment">%   </span><br><span class="hljs-comment">% helperPACharPlotTime(paOutput, paOutputFitMem, sampleRate);</span><br><span class="hljs-comment">% helperPACharPlotGain(paInput, paOutput, paOutputFitMem);</span><br><br><br><br><br><span class="hljs-comment">%本例使用NXP Airfast LDMOS Doherty PA，工作频率3.6-3.8 GHz，增益29 dB。</span><br><span class="hljs-comment">%带宽100MHZ</span><br><span class="hljs-comment">%采样率sampleRate = 860160000</span><br><span class="hljs-comment">%信号类型OFDM</span><br><span class="hljs-comment">%If testSignal is &quot;OFDM&quot;, this example uses a 5G-like OFDM waveform with 64-QAM modulated signals for each subcarrier.</span><br><span class="hljs-comment">% If testSignal is &quot;Tones&quot;, this example uses two tones at 1.8 MHz and 2.6 MHz, to test the intermodulation caused by the PA.</span><br><br><br>sampleRate = <span class="hljs-number">860160000</span>;<br><span class="hljs-comment">% sampleRate = 430080000;</span><br>testSignal = <span class="hljs-string">&#x27;OFDM&#x27;</span>;<br><br><span class="hljs-comment">%读取数据</span><br><span class="hljs-comment">% x = (0 : 5);</span><br>x = paInput;<br><span class="hljs-comment">% x = txData1;</span><br><span class="hljs-comment">% x = paInput_40MHZ;</span><br>x = x(:);<br>xLength = <span class="hljs-built_in">length</span>(x);<br><span class="hljs-comment">%使用前半部分数据用于参数提取，后半部分数据用于模型验证</span><br>half = <span class="hljs-built_in">round</span>(xLength/<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">% y = (2 : 7);</span><br>y = paOutput;<br><span class="hljs-comment">% y = tout;</span><br><span class="hljs-comment">% y = paOutput_40MHZ;</span><br>y = y(:);<br>yLength = <span class="hljs-built_in">length</span>(y);<br><br><span class="hljs-comment">%将数据归一化</span><br><span class="hljs-comment">% x = x / abs(max(x));</span><br><span class="hljs-comment">% y = y / abs(max(y));</span><br><br>M = <span class="hljs-number">2</span>;<br>K = <span class="hljs-number">8</span>;<br><br><br><span class="hljs-comment">%使用前一半数据用于PA参数提取</span><br>XcoefPA = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <br>YcoefPA = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefPA = x(1:half);  </span><br><span class="hljs-comment">% YcoefPA = y(1:half);  </span><br><br>YcoefPA = YcoefPA(M:half) ;                   <span class="hljs-comment">%经过处理后，数据去除掉前M个</span><br>coefPA = MatrixDeal_MP(XcoefPA,M,K) \ YcoefPA;<br><br><span class="hljs-comment">%使用后一半数据用于PA模型验证</span><br>XmodelPA = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );      <span class="hljs-comment">%使用后一半的数据验证模型，将数据归一化</span><br>YmodelPA = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><span class="hljs-comment">% XmodelPA = x(half:xLength);      %使用后一半的数据验证模型，将数据归一化</span><br><span class="hljs-comment">% YmodelPA = y(half:xLength); </span><br><br>YmodelFitPA = MatrixDeal_MP(XmodelPA,M,K) * coefPA;   <span class="hljs-comment">%计算模型输出（输出后的数据减少前M个）</span><br><br><span class="hljs-comment">%去除多余数据</span><br>XmodelPA = XmodelPA(M:<span class="hljs-built_in">length</span>(XmodelPA));<br>YmodelPA = YmodelPA(M:<span class="hljs-built_in">length</span>(YmodelPA));<br><br><span class="hljs-comment">%计算未线性化的EVM</span><br>EVM_withoutDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - XmodelPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XmodelPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withoutDPD is &#x27;</span> num2str(EVM_withoutDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%计算NMSE</span><br>NMSE = <span class="hljs-number">10</span> * <span class="hljs-built_in">log10</span>( sum ( (<span class="hljs-built_in">abs</span>(YmodelPA - YmodelFitPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(YmodelPA)).^<span class="hljs-number">2</span> ) ) ;<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br>paCharPlot(XmodelPA,YmodelPA,YmodelFitPA,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><br><br><br><span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>XcoefDPD = x(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(<span class="hljs-number">1</span>:half)) );  <span class="hljs-comment">%使用前一半数据估计参数，将数据归一化</span><br>YcoefDPD = y(<span class="hljs-number">1</span>:half) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(<span class="hljs-number">1</span>:half)) );  <br><br><span class="hljs-comment">% XcoefDPD = x(1:half);  %使用前一半数据估计参数，将数据归一化</span><br><span class="hljs-comment">% YcoefDPD = y(1:half);  </span><br><br><br>XcoefDPD = XcoefDPD(M:half);                     <span class="hljs-comment">%将PA实际输入数据作为输出数据，取前一半数据</span><br>coefDPD = MatrixDeal_MP(YcoefDPD,M,K) \ XcoefDPD;      <span class="hljs-comment">%计算得到DPD参数模型，与PA行为模型一致</span><br><br><br><span class="hljs-comment">%模型验证</span><br>XmodelDPD = x(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(x(half:xLength)) );         <span class="hljs-comment">%使用后一半数据进行DPD模型验证</span><br>YmodelDPD = y(half:xLength) / <span class="hljs-built_in">abs</span> ( <span class="hljs-built_in">max</span>(y(half:xLength)) ); <br><br><span class="hljs-comment">% XmodelDPD = x(half:xLength);         %使用后一半数据进行DPD模型验证</span><br><span class="hljs-comment">% YmodelDPD = y(half:xLength); </span><br><br>YmodelFitDPD = MatrixDeal_MP(XmodelDPD,M,K) * coefDPD;  <span class="hljs-comment">%计算得到DPD输出（输出数据减少M个）</span><br><br>Ylinear = MatrixDeal_MP(YmodelFitDPD,M,K) * coefPA;<br><br><span class="hljs-comment">%计算误差向量幅度EVM</span><br>XDPDPA = XmodelDPD(M+M<span class="hljs-number">-1</span>:<span class="hljs-built_in">length</span>(XmodelDPD));<br>YDPDPA = YmodelDPD(M+M<span class="hljs-number">-1</span>:<span class="hljs-built_in">length</span>(YmodelDPD));<br><br>EVM_withDPD = <span class="hljs-built_in">sqrt</span> (  sum ( (<span class="hljs-built_in">abs</span>(Ylinear - XDPDPA)).^<span class="hljs-number">2</span> ) / sum ( (<span class="hljs-built_in">abs</span>(XDPDPA)).^<span class="hljs-number">2</span>) ) * <span class="hljs-number">100</span> ;<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;The EVM_withDPD is &#x27;</span> num2str(EVM_withDPD) <span class="hljs-string">&#x27;%&#x27;</span>]);<br><br><span class="hljs-comment">%绘图</span><br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;AM/AM&#x27;</span>);<br>paCharPlot(XDPDPA,YDPDPA,Ylinear,<span class="hljs-string">&#x27;PM/AM&#x27;</span>);<br><br><span class="hljs-comment">%邻信道功率比ACPR</span><br>sa = helperPACharPlotSpectrum([YDPDPA  Ylinear],&#123;<span class="hljs-string">&#x27;Actual PA Output&#x27;</span>, <span class="hljs-string">&#x27;with DPD Output&#x27;</span>&#125;, sampleRate,testSignal);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Matlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/25/hello-world/"/>
    <url>/2023/06/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helloworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
